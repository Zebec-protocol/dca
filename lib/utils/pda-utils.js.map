{"version":3,"file":"pda-utils.js","names":["findProgramAddress","seeds","programId","DCA_PROGRAM_ID","PublicKey","findVaultAddress","owner","dcaAccount","toBuffer","findAssociatedTokenAddress","mint","TOKEN_PROGRAM_ID","ASSOCIATED_TOKEN_PROGRAM_ID"],"sources":["../../src/utils/pda-utils.ts"],"sourcesContent":["import { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport { PublicKey } from \"@solana/web3.js\";\n\nimport { DCA_PROGRAM_ID } from \"../constants\";\n\nexport async function findProgramAddress(seeds: Buffer[], programId = DCA_PROGRAM_ID): Promise<[PublicKey, number]> {\n\treturn await PublicKey.findProgramAddress(seeds, programId);\n}\n\nexport async function findVaultAddress(owner: PublicKey, dcaAccount: PublicKey): Promise<PublicKey> {\n\treturn (await findProgramAddress([owner.toBuffer(), dcaAccount.toBuffer()]))[0];\n}\n\nexport async function findAssociatedTokenAddress(owner: PublicKey, mint: PublicKey): Promise<PublicKey> {\n\treturn (\n\t\tawait findProgramAddress(\n\t\t\t[owner.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n\t\t\tASSOCIATED_TOKEN_PROGRAM_ID,\n\t\t)\n\t)[0];\n}\n"],"mappings":";;;;;;;;;AAAA;;AACA;;AAEA;;;;+CAFA,oJ;;;;;;SAIsBA,kB;;;;;mFAAf,iBAAkCC,KAAlC;IAAA;IAAA;IAAA;MAAA;QAAA;UAAA;YAAmDC,SAAnD,2DAA+DC,yBAA/D;YAAA;YAAA,OACOC,cAAA,CAAUJ,kBAAV,CAA6BC,KAA7B,EAAoCC,SAApC,CADP;;UAAA;YAAA;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C;;;;SAIeG,gB;;;;;iFAAf,kBAAgCC,KAAhC,EAAkDC,UAAlD;IAAA;MAAA;QAAA;UAAA;YAAA;YAAA,OACQP,kBAAkB,CAAC,CAACM,KAAK,CAACE,QAAN,EAAD,EAAmBD,UAAU,CAACC,QAAX,EAAnB,CAAD,CAD1B;;UAAA;YAAA,iDACuE,CADvE;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C;;;;SAIeC,0B;;;;;2FAAf,kBAA0CH,KAA1C,EAA4DI,IAA5D;IAAA;MAAA;QAAA;UAAA;YAAA;YAAA,OAECV,kBAAkB,CACvB,CAACM,KAAK,CAACE,QAAN,EAAD,EAAmBG,0BAAA,CAAiBH,QAAjB,EAAnB,EAAgDE,IAAI,CAACF,QAAL,EAAhD,CADuB,EAEvBI,qCAFuB,CAFnB;;UAAA;YAAA,iDAMJ,CANI;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C"}