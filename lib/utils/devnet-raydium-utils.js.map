{"version":3,"file":"devnet-raydium-utils.js","names":["LIQUIDITY_PROGRAM_ID_V4","DEVNET_LIQUIDITY_PROGRAM_ID_V4","SERUM_PROGRAM_ID_V3","DEVNET_SERUM_PROGRAM_ID_V3","getAssociatedId","programId","marketId","findProgramAddress","toBuffer","Buffer","from","publicKey","getAssociatedAuthority","getAssociatedBaseVault","getAssociatedQuoteVault","getAssociatedLpMint","getAssociatedLpVault","getAssociatedTargetOrders","getAssociatedWithdrawQueue","getAssociatedOpenOrders","getAssociatedPoolKeys","version","baseMint","quoteMint","id","lpMint","authority","nonce","baseVault","quoteVault","lpVault","openOrders","targetOrders","withdrawQueue","serumVersion","serumProgramId","Market","marketAuthority","marketVersion","marketProgramId","fetchAllPoolKeysDevnet","connection","config","supported","stateLayout","LIQUIDITY_STATE_LAYOUT_V4","poolsAccountInfo","Promise","all","map","getProgramAccounts","filters","dataSize","span","then","accounts","info","flatPoolsAccountInfo","flat","tempPoolsKeys","pubkey","accountInfo","account","LIQUIDITY_STATE_LAYOUT","data","fields","decode","status","Liquidity","isV4","PublicKey","default","isZero","associatedPoolKeys","push","marketsInfo","getMultipleAccountsInfo","poolsKeys","index","poolKeys","marketInfo","getLayouts","MARKET_STATE_LAYOUT","state","marketBaseVault","marketQuoteVault","marketBids","bids","marketAsks","asks","marketEventQueue","eventQueue","fetchPoolKeysDevnet","poolId","getAccountInfo","LiquidityStateLayout","Uint8Array","market"],"sources":["../../src/utils/devnet-raydium-utils.ts"],"sourcesContent":["import { findProgramAddress, getMultipleAccountsInfo, GetMultipleAccountsInfoConfig, Liquidity, LiquidityAssociatedPoolKeys, LiquidityStateLayout, LIQUIDITY_STATE_LAYOUT_V4, Market } from \"@raydium-io/raydium-sdk\";\nimport { AccountInfo, Connection, PublicKey } from \"@solana/web3.js\";\nimport { DEVNET_LIQUIDITY_PROGRAM_ID_V4, DEVNET_SERUM_PROGRAM_ID_V3 } from \"../constants\";\n\nconst LIQUIDITY_PROGRAM_ID_V4 = DEVNET_LIQUIDITY_PROGRAM_ID_V4;\nconst SERUM_PROGRAM_ID_V3 = DEVNET_SERUM_PROGRAM_ID_V3;\n\n\nasync function getAssociatedId({ programId, marketId }: { programId: PublicKey, marketId: PublicKey }) {\n    const { publicKey } = await findProgramAddress(\n        [programId.toBuffer(), marketId.toBuffer(), Buffer.from(\"amm_associated_seed\", \"utf-8\")],\n        programId,\n    );\n    return publicKey;\n}\n\nasync function getAssociatedAuthority({ programId }: { programId: PublicKey }) {\n    return findProgramAddress(\n        // new Uint8Array(Buffer.from('amm authority'.replace('\\u00A0', ' '), 'utf-8'))\n        [Buffer.from([97, 109, 109, 32, 97, 117, 116, 104, 111, 114, 105, 116, 121])],\n        programId,\n    );\n}\n\nasync function getAssociatedBaseVault({ programId, marketId }: { programId: PublicKey, marketId: PublicKey }) {\n    const { publicKey } = await findProgramAddress(\n        [programId.toBuffer(), marketId.toBuffer(), Buffer.from(\"coin_vault_associated_seed\", \"utf-8\")],\n        programId,\n    );\n    return publicKey;\n}\n\nasync function getAssociatedQuoteVault({ programId, marketId }: { programId: PublicKey, marketId: PublicKey }) {\n    const { publicKey } = await findProgramAddress(\n        [programId.toBuffer(), marketId.toBuffer(), Buffer.from(\"pc_vault_associated_seed\", \"utf-8\")],\n        programId,\n    );\n    return publicKey;\n}\n\nasync function getAssociatedLpMint({ programId, marketId }: { programId: PublicKey, marketId: PublicKey }) {\n    const { publicKey } = await findProgramAddress(\n        [programId.toBuffer(), marketId.toBuffer(), Buffer.from(\"lp_mint_associated_seed\", \"utf-8\")],\n        programId,\n    );\n    return publicKey;\n}\n\nasync function getAssociatedLpVault({ programId, marketId }: { programId: PublicKey, marketId: PublicKey }) {\n    const { publicKey } = await findProgramAddress(\n        [programId.toBuffer(), marketId.toBuffer(), Buffer.from(\"temp_lp_token_associated_seed\", \"utf-8\")],\n        programId,\n    );\n    return publicKey;\n}\n\nasync function getAssociatedTargetOrders({ programId, marketId }: { programId: PublicKey, marketId: PublicKey }) {\n    const { publicKey } = await findProgramAddress(\n        [programId.toBuffer(), marketId.toBuffer(), Buffer.from(\"target_associated_seed\", \"utf-8\")],\n        programId,\n    );\n    return publicKey;\n}\n\nasync function getAssociatedWithdrawQueue({ programId, marketId }: { programId: PublicKey, marketId: PublicKey }) {\n    const { publicKey } = await findProgramAddress(\n        [programId.toBuffer(), marketId.toBuffer(), Buffer.from(\"withdraw_associated_seed\", \"utf-8\")],\n        programId,\n    );\n    return publicKey;\n}\n\nasync function getAssociatedOpenOrders({ programId, marketId }: { programId: PublicKey, marketId: PublicKey }) {\n    const { publicKey } = await findProgramAddress(\n        [programId.toBuffer(), marketId.toBuffer(), Buffer.from(\"open_order_associated_seed\", \"utf-8\")],\n        programId,\n    );\n    return publicKey;\n}\n\nasync function getAssociatedPoolKeys({\n    version,\n    marketId,\n    baseMint,\n    quoteMint,\n}: {\n    version: number;\n    marketId: PublicKey;\n    baseMint: PublicKey;\n    quoteMint: PublicKey;\n}): Promise<LiquidityAssociatedPoolKeys> {\n    const programId = LIQUIDITY_PROGRAM_ID_V4;\n\n    const id = await getAssociatedId({ programId, marketId });\n    const lpMint = await getAssociatedLpMint({ programId, marketId });\n    const { publicKey: authority, nonce } = await getAssociatedAuthority({ programId });\n    const baseVault = await getAssociatedBaseVault({ programId, marketId });\n    const quoteVault = await getAssociatedQuoteVault({ programId, marketId });\n    const lpVault = await getAssociatedLpVault({ programId, marketId });\n    const openOrders = await getAssociatedOpenOrders({ programId, marketId });\n    const targetOrders = await getAssociatedTargetOrders({ programId, marketId });\n    const withdrawQueue = await getAssociatedWithdrawQueue({ programId, marketId });\n\n    const serumVersion = 3;\n    const serumProgramId = SERUM_PROGRAM_ID_V3\n    const { publicKey: marketAuthority } = await Market.getAssociatedAuthority({\n        programId: serumProgramId,\n        marketId,\n    });\n\n    return {\n        // base\n        id,\n        baseMint,\n        quoteMint,\n        lpMint,\n        // version\n        version,\n        programId,\n        // keys\n        authority,\n        nonce,\n        baseVault,\n        quoteVault,\n        lpVault,\n        openOrders,\n        targetOrders,\n        withdrawQueue,\n        // market version\n        marketVersion: serumVersion,\n        marketProgramId: serumProgramId,\n        // market keys\n        marketId,\n        marketAuthority,\n    };\n}\n\nexport async function fetchAllPoolKeysDevnet(\n    connection: Connection,\n    config: GetMultipleAccountsInfoConfig,\n) {\n    // supported versions\n    const supported = [{\n        version: 4,\n        programId: LIQUIDITY_PROGRAM_ID_V4,\n        serumVersion: 3,\n        serumProgramId: SERUM_PROGRAM_ID_V3,\n        stateLayout: LIQUIDITY_STATE_LAYOUT_V4,\n    }]\n\n    let poolsAccountInfo: {\n        pubkey: PublicKey;\n        account: AccountInfo<Buffer>;\n\n        version: number;\n        programId: PublicKey;\n        serumVersion: number;\n        serumProgramId: PublicKey;\n        stateLayout: LiquidityStateLayout;\n    }[][] = [];\n    try {\n        poolsAccountInfo = await Promise.all(\n            supported.map(({ programId, version, serumVersion, serumProgramId, stateLayout }) =>\n                connection\n                    .getProgramAccounts(programId, {\n                        filters: [{ dataSize: stateLayout.span }],\n                    })\n                    .then((accounts) => {\n                        return accounts.map((info) => {\n                            return {\n                                ...info,\n                                ...{ version, programId, serumVersion, serumProgramId, stateLayout },\n                            };\n                        });\n                    }),\n            ),\n        );\n    } catch (error) {\n    }\n\n    const flatPoolsAccountInfo = poolsAccountInfo.flat();\n    // temp pool keys without market keys\n    const tempPoolsKeys = [];\n\n    for (const {\n        pubkey,\n        account: accountInfo,\n        version,\n        programId,\n        serumVersion,\n        serumProgramId,\n        stateLayout: LIQUIDITY_STATE_LAYOUT,\n    } of flatPoolsAccountInfo) {\n\n        const { data } = accountInfo;\n\n        const fields = LIQUIDITY_STATE_LAYOUT.decode(data);\n        const { status, nonce, baseMint, quoteMint, lpMint, openOrders, targetOrders, baseVault, quoteVault, marketId } =\n            fields;\n\n        let withdrawQueue, lpVault;\n        if (Liquidity.isV4(fields)) {\n            withdrawQueue = fields.withdrawQueue;\n            lpVault = fields.lpVault;\n        } else {\n            withdrawQueue = PublicKey.default;\n            lpVault = PublicKey.default;\n        }\n        // uninitialized\n        if (status.isZero()) {\n            continue;\n        }\n\n        const associatedPoolKeys = await getAssociatedPoolKeys({\n            version,\n            baseMint,\n            quoteMint,\n            marketId,\n        });\n        // double check keys with on-chain data\n        // logger.assert(Number(nonce) === associatedPoolKeys.nonce, \"invalid nonce\");\n\n        tempPoolsKeys.push({\n            id: pubkey,\n            baseMint,\n            quoteMint,\n            lpMint,\n            version,\n            programId,\n\n            authority: associatedPoolKeys.authority,\n            openOrders,\n            targetOrders,\n            baseVault,\n            quoteVault,\n            withdrawQueue,\n            lpVault,\n            marketVersion: serumVersion,\n            marketProgramId: serumProgramId,\n            marketId,\n            marketAuthority: associatedPoolKeys.marketAuthority,\n        });\n    }\n\n    // fetch market keys\n    let marketsInfo: (AccountInfo<Buffer> | null)[] = [];\n    try {\n        marketsInfo = await getMultipleAccountsInfo(\n            connection,\n            tempPoolsKeys.map(({ marketId }) => marketId),\n            config,\n        );\n    } catch (error) {\n\n    }\n\n    const poolsKeys = [];\n\n    for (const index in marketsInfo) {\n        const poolKeys = tempPoolsKeys[index];\n        const marketInfo = marketsInfo[index];\n\n        const { id, marketVersion } = poolKeys;\n\n        // @ts-ignore\n        const { data } = marketInfo;\n        const { state: MARKET_STATE_LAYOUT } = Market.getLayouts(marketVersion);\n\n        const {\n            baseVault: marketBaseVault,\n            quoteVault: marketQuoteVault,\n            bids: marketBids,\n            asks: marketAsks,\n            eventQueue: marketEventQueue,\n        } = MARKET_STATE_LAYOUT.decode(data);\n\n        poolsKeys.push({\n            ...poolKeys,\n            ...{\n                marketBaseVault,\n                marketQuoteVault,\n                marketBids,\n                marketAsks,\n                marketEventQueue,\n            },\n        });\n    }\n\n    return poolsKeys;\n}\n\n\nexport async function fetchPoolKeysDevnet(\n    connection: Connection,\n    poolId: PublicKey,\n    version = 4\n) {\n\n    // const version = 4\n    const serumVersion = 3\n    const marketVersion = 3\n\n    const programId = LIQUIDITY_PROGRAM_ID_V4\n    const serumProgramId = SERUM_PROGRAM_ID_V3\n\n    const account = await connection.getAccountInfo(poolId)\n    const { state: LiquidityStateLayout } = Liquidity.getLayouts(version)\n\n    //@ts-ignore\n    const fields = LiquidityStateLayout.decode(Uint8Array.from(account.data));\n    const { status, baseMint, quoteMint, lpMint, openOrders, targetOrders, baseVault, quoteVault, marketId } = fields;\n\n    let withdrawQueue;\n    let lpVault;\n\n    if (Liquidity.isV4(fields)) {\n        withdrawQueue = fields.withdrawQueue;\n        lpVault = fields.lpVault;\n    } else {\n        withdrawQueue = PublicKey.default;\n        lpVault = PublicKey.default;\n    }\n\n    // uninitialized\n    // if (status.isZero()) {\n    //   return ;\n    // }\n\n    const associatedPoolKeys = await getAssociatedPoolKeys({\n        version,\n        baseMint,\n        quoteMint,\n        marketId,\n    });\n\n    const poolKeys = {\n        id: poolId,\n        baseMint,\n        quoteMint,\n        lpMint,\n        version,\n        programId,\n\n        authority: associatedPoolKeys.authority,\n        openOrders,\n        targetOrders,\n        baseVault,\n        quoteVault,\n        withdrawQueue,\n        lpVault,\n        marketVersion: serumVersion,\n        marketProgramId: serumProgramId,\n        marketId,\n        marketAuthority: associatedPoolKeys.marketAuthority,\n    };\n\n    const marketInfo = await connection.getAccountInfo(marketId);\n    const { state: MARKET_STATE_LAYOUT } = Market.getLayouts(marketVersion);\n    //@ts-ignore\n    const market = MARKET_STATE_LAYOUT.decode(Uint8Array.from(marketInfo.data));\n\n    const {\n        baseVault: marketBaseVault,\n        quoteVault: marketQuoteVault,\n        bids: marketBids,\n        asks: marketAsks,\n        eventQueue: marketEventQueue,\n    } = market;\n\n    // const poolKeys: LiquidityPoolKeys;\n    return {\n        ...poolKeys,\n        ...{\n            marketBaseVault,\n            marketQuoteVault,\n            marketBids,\n            marketAsks,\n            marketEventQueue,\n        },\n    };\n}"],"mappings":"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"}