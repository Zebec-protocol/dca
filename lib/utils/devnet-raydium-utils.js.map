{"version":3,"file":"devnet-raydium-utils.js","names":["LIQUIDITY_PROGRAM_ID_V4","DEVNET_LIQUIDITY_PROGRAM_ID_V4","SERUM_PROGRAM_ID_V3","DEVNET_SERUM_PROGRAM_ID_V3","getAssociatedId","programId","marketId","findProgramAddress","toBuffer","Buffer","from","publicKey","getAssociatedAuthority","getAssociatedBaseVault","getAssociatedQuoteVault","getAssociatedLpMint","getAssociatedLpVault","getAssociatedTargetOrders","getAssociatedWithdrawQueue","getAssociatedOpenOrders","getAssociatedPoolKeys","version","baseMint","quoteMint","id","lpMint","authority","nonce","baseVault","quoteVault","lpVault","openOrders","targetOrders","withdrawQueue","serumVersion","serumProgramId","Market","marketAuthority","marketVersion","marketProgramId","fetchAllPoolKeysDevnet","connection","config","supported","stateLayout","LIQUIDITY_STATE_LAYOUT_V4","poolsAccountInfo","Promise","all","map","getProgramAccounts","filters","dataSize","span","then","accounts","info","flatPoolsAccountInfo","flat","tempPoolsKeys","pubkey","accountInfo","account","LIQUIDITY_STATE_LAYOUT","data","fields","decode","status","Liquidity","isV4","PublicKey","default","isZero","associatedPoolKeys","push","marketsInfo","getMultipleAccountsInfo","poolsKeys","index","poolKeys","marketInfo","getLayouts","MARKET_STATE_LAYOUT","state","marketBaseVault","marketQuoteVault","marketBids","bids","marketAsks","asks","marketEventQueue","eventQueue","fetchPoolKeysDevnet","poolId","getAccountInfo","LiquidityStateLayout","Uint8Array","market","findPoolIdByBaseAndQuoteMintDevnet","base","quote","Connection","clusterApiUrl","poolKeysList","keys","find","el","toString","Error"],"sources":["../../src/utils/devnet-raydium-utils.ts"],"sourcesContent":["import {\n\tfindProgramAddress,\n\tgetMultipleAccountsInfo,\n\tGetMultipleAccountsInfoConfig,\n\tLiquidity,\n\tLIQUIDITY_STATE_LAYOUT_V4,\n\tLiquidityAssociatedPoolKeys,\n\tLiquidityStateLayout,\n\tMarket,\n} from \"@raydium-io/raydium-sdk\";\nimport { AccountInfo, clusterApiUrl, Connection, PublicKey } from \"@solana/web3.js\";\n\nimport { DEVNET_LIQUIDITY_PROGRAM_ID_V4, DEVNET_SERUM_PROGRAM_ID_V3 } from \"../constants\";\n\nconst LIQUIDITY_PROGRAM_ID_V4 = DEVNET_LIQUIDITY_PROGRAM_ID_V4;\nconst SERUM_PROGRAM_ID_V3 = DEVNET_SERUM_PROGRAM_ID_V3;\n\nasync function getAssociatedId({ programId, marketId }: { programId: PublicKey; marketId: PublicKey }) {\n\tconst { publicKey } = await findProgramAddress(\n\t\t[programId.toBuffer(), marketId.toBuffer(), Buffer.from(\"amm_associated_seed\", \"utf-8\")],\n\t\tprogramId,\n\t);\n\treturn publicKey;\n}\n\nasync function getAssociatedAuthority({ programId }: { programId: PublicKey }) {\n\treturn findProgramAddress(\n\t\t// new Uint8Array(Buffer.from('amm authority'.replace('\\u00A0', ' '), 'utf-8'))\n\t\t[Buffer.from([97, 109, 109, 32, 97, 117, 116, 104, 111, 114, 105, 116, 121])],\n\t\tprogramId,\n\t);\n}\n\nasync function getAssociatedBaseVault({ programId, marketId }: { programId: PublicKey; marketId: PublicKey }) {\n\tconst { publicKey } = await findProgramAddress(\n\t\t[programId.toBuffer(), marketId.toBuffer(), Buffer.from(\"coin_vault_associated_seed\", \"utf-8\")],\n\t\tprogramId,\n\t);\n\treturn publicKey;\n}\n\nasync function getAssociatedQuoteVault({ programId, marketId }: { programId: PublicKey; marketId: PublicKey }) {\n\tconst { publicKey } = await findProgramAddress(\n\t\t[programId.toBuffer(), marketId.toBuffer(), Buffer.from(\"pc_vault_associated_seed\", \"utf-8\")],\n\t\tprogramId,\n\t);\n\treturn publicKey;\n}\n\nasync function getAssociatedLpMint({ programId, marketId }: { programId: PublicKey; marketId: PublicKey }) {\n\tconst { publicKey } = await findProgramAddress(\n\t\t[programId.toBuffer(), marketId.toBuffer(), Buffer.from(\"lp_mint_associated_seed\", \"utf-8\")],\n\t\tprogramId,\n\t);\n\treturn publicKey;\n}\n\nasync function getAssociatedLpVault({ programId, marketId }: { programId: PublicKey; marketId: PublicKey }) {\n\tconst { publicKey } = await findProgramAddress(\n\t\t[programId.toBuffer(), marketId.toBuffer(), Buffer.from(\"temp_lp_token_associated_seed\", \"utf-8\")],\n\t\tprogramId,\n\t);\n\treturn publicKey;\n}\n\nasync function getAssociatedTargetOrders({ programId, marketId }: { programId: PublicKey; marketId: PublicKey }) {\n\tconst { publicKey } = await findProgramAddress(\n\t\t[programId.toBuffer(), marketId.toBuffer(), Buffer.from(\"target_associated_seed\", \"utf-8\")],\n\t\tprogramId,\n\t);\n\treturn publicKey;\n}\n\nasync function getAssociatedWithdrawQueue({ programId, marketId }: { programId: PublicKey; marketId: PublicKey }) {\n\tconst { publicKey } = await findProgramAddress(\n\t\t[programId.toBuffer(), marketId.toBuffer(), Buffer.from(\"withdraw_associated_seed\", \"utf-8\")],\n\t\tprogramId,\n\t);\n\treturn publicKey;\n}\n\nasync function getAssociatedOpenOrders({ programId, marketId }: { programId: PublicKey; marketId: PublicKey }) {\n\tconst { publicKey } = await findProgramAddress(\n\t\t[programId.toBuffer(), marketId.toBuffer(), Buffer.from(\"open_order_associated_seed\", \"utf-8\")],\n\t\tprogramId,\n\t);\n\treturn publicKey;\n}\n\nasync function getAssociatedPoolKeys({\n\tversion,\n\tmarketId,\n\tbaseMint,\n\tquoteMint,\n}: {\n\tversion: number;\n\tmarketId: PublicKey;\n\tbaseMint: PublicKey;\n\tquoteMint: PublicKey;\n}): Promise<LiquidityAssociatedPoolKeys> {\n\tconst programId = LIQUIDITY_PROGRAM_ID_V4;\n\n\tconst id = await getAssociatedId({ programId, marketId });\n\tconst lpMint = await getAssociatedLpMint({ programId, marketId });\n\tconst { publicKey: authority, nonce } = await getAssociatedAuthority({\n\t\tprogramId,\n\t});\n\tconst baseVault = await getAssociatedBaseVault({ programId, marketId });\n\tconst quoteVault = await getAssociatedQuoteVault({ programId, marketId });\n\tconst lpVault = await getAssociatedLpVault({ programId, marketId });\n\tconst openOrders = await getAssociatedOpenOrders({ programId, marketId });\n\tconst targetOrders = await getAssociatedTargetOrders({ programId, marketId });\n\tconst withdrawQueue = await getAssociatedWithdrawQueue({\n\t\tprogramId,\n\t\tmarketId,\n\t});\n\n\tconst serumVersion = 3;\n\tconst serumProgramId = SERUM_PROGRAM_ID_V3;\n\tconst { publicKey: marketAuthority } = await Market.getAssociatedAuthority({\n\t\tprogramId: serumProgramId,\n\t\tmarketId,\n\t});\n\n\treturn {\n\t\t// base\n\t\tid,\n\t\tbaseMint,\n\t\tquoteMint,\n\t\tlpMint,\n\t\t// version\n\t\tversion,\n\t\tprogramId,\n\t\t// keys\n\t\tauthority,\n\t\tnonce,\n\t\tbaseVault,\n\t\tquoteVault,\n\t\tlpVault,\n\t\topenOrders,\n\t\ttargetOrders,\n\t\twithdrawQueue,\n\t\t// market version\n\t\tmarketVersion: serumVersion,\n\t\tmarketProgramId: serumProgramId,\n\t\t// market keys\n\t\tmarketId,\n\t\tmarketAuthority,\n\t};\n}\n\nexport async function fetchAllPoolKeysDevnet(connection: Connection, config?: GetMultipleAccountsInfoConfig) {\n\t// supported versions\n\tconst supported = [\n\t\t{\n\t\t\tversion: 4,\n\t\t\tprogramId: LIQUIDITY_PROGRAM_ID_V4,\n\t\t\tserumVersion: 3,\n\t\t\tserumProgramId: SERUM_PROGRAM_ID_V3,\n\t\t\tstateLayout: LIQUIDITY_STATE_LAYOUT_V4,\n\t\t},\n\t];\n\n\tlet poolsAccountInfo: {\n\t\tpubkey: PublicKey;\n\t\taccount: AccountInfo<Buffer>;\n\n\t\tversion: number;\n\t\tprogramId: PublicKey;\n\t\tserumVersion: number;\n\t\tserumProgramId: PublicKey;\n\t\tstateLayout: LiquidityStateLayout;\n\t}[][] = [];\n\ttry {\n\t\tpoolsAccountInfo = await Promise.all(\n\t\t\tsupported.map(({ programId, version, serumVersion, serumProgramId, stateLayout }) =>\n\t\t\t\tconnection\n\t\t\t\t\t.getProgramAccounts(programId, {\n\t\t\t\t\t\tfilters: [{ dataSize: stateLayout.span }],\n\t\t\t\t\t})\n\t\t\t\t\t.then((accounts) => {\n\t\t\t\t\t\treturn accounts.map((info) => {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t...info,\n\t\t\t\t\t\t\t\t...{\n\t\t\t\t\t\t\t\t\tversion,\n\t\t\t\t\t\t\t\t\tprogramId,\n\t\t\t\t\t\t\t\t\tserumVersion,\n\t\t\t\t\t\t\t\t\tserumProgramId,\n\t\t\t\t\t\t\t\t\tstateLayout,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t});\n\t\t\t\t\t}),\n\t\t\t),\n\t\t);\n\t} catch (error) {}\n\n\tconst flatPoolsAccountInfo = poolsAccountInfo.flat();\n\t// temp pool keys without market keys\n\tconst tempPoolsKeys = [];\n\n\tfor (const {\n\t\tpubkey,\n\t\taccount: accountInfo,\n\t\tversion,\n\t\tprogramId,\n\t\tserumVersion,\n\t\tserumProgramId,\n\t\tstateLayout: LIQUIDITY_STATE_LAYOUT,\n\t} of flatPoolsAccountInfo) {\n\t\tconst { data } = accountInfo;\n\n\t\tconst fields = LIQUIDITY_STATE_LAYOUT.decode(data);\n\t\tconst { status, nonce, baseMint, quoteMint, lpMint, openOrders, targetOrders, baseVault, quoteVault, marketId } =\n\t\t\tfields;\n\n\t\tlet withdrawQueue, lpVault;\n\t\tif (Liquidity.isV4(fields)) {\n\t\t\twithdrawQueue = fields.withdrawQueue;\n\t\t\tlpVault = fields.lpVault;\n\t\t} else {\n\t\t\twithdrawQueue = PublicKey.default;\n\t\t\tlpVault = PublicKey.default;\n\t\t}\n\t\t// uninitialized\n\t\tif (status.isZero()) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst associatedPoolKeys = await getAssociatedPoolKeys({\n\t\t\tversion,\n\t\t\tbaseMint,\n\t\t\tquoteMint,\n\t\t\tmarketId,\n\t\t});\n\t\t// double check keys with on-chain data\n\t\t// logger.assert(Number(nonce) === associatedPoolKeys.nonce, \"invalid nonce\");\n\n\t\ttempPoolsKeys.push({\n\t\t\tid: pubkey,\n\t\t\tbaseMint,\n\t\t\tquoteMint,\n\t\t\tlpMint,\n\t\t\tversion,\n\t\t\tprogramId,\n\n\t\t\tauthority: associatedPoolKeys.authority,\n\t\t\topenOrders,\n\t\t\ttargetOrders,\n\t\t\tbaseVault,\n\t\t\tquoteVault,\n\t\t\twithdrawQueue,\n\t\t\tlpVault,\n\t\t\tmarketVersion: serumVersion,\n\t\t\tmarketProgramId: serumProgramId,\n\t\t\tmarketId,\n\t\t\tmarketAuthority: associatedPoolKeys.marketAuthority,\n\t\t});\n\t}\n\n\t// fetch market keys\n\tlet marketsInfo: (AccountInfo<Buffer> | null)[] = [];\n\ttry {\n\t\tmarketsInfo = await getMultipleAccountsInfo(\n\t\t\tconnection,\n\t\t\ttempPoolsKeys.map(({ marketId }) => marketId),\n\t\t\tconfig,\n\t\t);\n\t} catch (error) {}\n\n\tconst poolsKeys = [];\n\n\tfor (const index in marketsInfo) {\n\t\tconst poolKeys = tempPoolsKeys[index];\n\t\tconst marketInfo = marketsInfo[index];\n\n\t\tconst { id, marketVersion } = poolKeys;\n\n\t\t// @ts-ignore\n\t\tconst { data } = marketInfo;\n\t\tconst { state: MARKET_STATE_LAYOUT } = Market.getLayouts(marketVersion);\n\n\t\tconst {\n\t\t\tbaseVault: marketBaseVault,\n\t\t\tquoteVault: marketQuoteVault,\n\t\t\tbids: marketBids,\n\t\t\tasks: marketAsks,\n\t\t\teventQueue: marketEventQueue,\n\t\t} = MARKET_STATE_LAYOUT.decode(data);\n\n\t\tpoolsKeys.push({\n\t\t\t...poolKeys,\n\t\t\t...{\n\t\t\t\tmarketBaseVault,\n\t\t\t\tmarketQuoteVault,\n\t\t\t\tmarketBids,\n\t\t\t\tmarketAsks,\n\t\t\t\tmarketEventQueue,\n\t\t\t},\n\t\t});\n\t}\n\n\treturn poolsKeys;\n}\n\nexport async function fetchPoolKeysDevnet(connection: Connection, poolId: PublicKey, version = 4) {\n\t// const version = 4\n\tconst serumVersion = 3;\n\tconst marketVersion = 3;\n\n\tconst programId = LIQUIDITY_PROGRAM_ID_V4;\n\tconst serumProgramId = SERUM_PROGRAM_ID_V3;\n\n\tconst account = await connection.getAccountInfo(poolId);\n\tconst { state: LiquidityStateLayout } = Liquidity.getLayouts(version);\n\n\t//@ts-ignore\n\tconst fields = LiquidityStateLayout.decode(Uint8Array.from(account.data));\n\tconst { status, baseMint, quoteMint, lpMint, openOrders, targetOrders, baseVault, quoteVault, marketId } = fields;\n\n\tlet withdrawQueue;\n\tlet lpVault;\n\n\tif (Liquidity.isV4(fields)) {\n\t\twithdrawQueue = fields.withdrawQueue;\n\t\tlpVault = fields.lpVault;\n\t} else {\n\t\twithdrawQueue = PublicKey.default;\n\t\tlpVault = PublicKey.default;\n\t}\n\n\t// uninitialized\n\t// if (status.isZero()) {\n\t//   return ;\n\t// }\n\n\tconst associatedPoolKeys = await getAssociatedPoolKeys({\n\t\tversion,\n\t\tbaseMint,\n\t\tquoteMint,\n\t\tmarketId,\n\t});\n\n\tconst poolKeys = {\n\t\tid: poolId,\n\t\tbaseMint,\n\t\tquoteMint,\n\t\tlpMint,\n\t\tversion,\n\t\tprogramId,\n\n\t\tauthority: associatedPoolKeys.authority,\n\t\topenOrders,\n\t\ttargetOrders,\n\t\tbaseVault,\n\t\tquoteVault,\n\t\twithdrawQueue,\n\t\tlpVault,\n\t\tmarketVersion: serumVersion,\n\t\tmarketProgramId: serumProgramId,\n\t\tmarketId,\n\t\tmarketAuthority: associatedPoolKeys.marketAuthority,\n\t};\n\n\tconst marketInfo = await connection.getAccountInfo(marketId);\n\tconst { state: MARKET_STATE_LAYOUT } = Market.getLayouts(marketVersion);\n\t//@ts-ignore\n\tconst market = MARKET_STATE_LAYOUT.decode(Uint8Array.from(marketInfo.data));\n\n\tconst {\n\t\tbaseVault: marketBaseVault,\n\t\tquoteVault: marketQuoteVault,\n\t\tbids: marketBids,\n\t\tasks: marketAsks,\n\t\teventQueue: marketEventQueue,\n\t} = market;\n\n\t// const poolKeys: LiquidityPoolKeys;\n\treturn {\n\t\t...poolKeys,\n\t\t...{\n\t\t\tmarketBaseVault,\n\t\t\tmarketQuoteVault,\n\t\t\tmarketBids,\n\t\t\tmarketAsks,\n\t\t\tmarketEventQueue,\n\t\t},\n\t};\n}\n\nexport async function findPoolIdByBaseAndQuoteMintDevnet(base: PublicKey, quote: PublicKey): Promise<string> {\n\ttry {\n\t\tconst poolKeysList = await fetchAllPoolKeysDevnet(new Connection(clusterApiUrl(\"devnet\")));\n\t\tconst keys = poolKeysList.find(\n\t\t\t(el) => el.baseMint.toString() == base.toString() && el.quoteMint.toString() == quote.toString(),\n\t\t);\n\t\tif (!keys) throw new Error(\"No liquidity pool found for given base and quote mint.\");\n\t\treturn keys.id.toString();\n\t} catch (err) {\n\t\tthrow err;\n\t}\n}\n"],"mappings":";;;;;;;;;AAAA;;AAUA;;AAEA;;;;;;;;;;;;;;;;+CAXA,oJ;;;;;;AAaA,IAAMA,uBAAuB,GAAGC,yCAAhC;AACA,IAAMC,mBAAmB,GAAGC,qCAA5B;;SAEeC,e;;;;;gFAAf;IAAA;;IAAA;MAAA;QAAA;UAAA;YAAiCC,SAAjC,QAAiCA,SAAjC,EAA4CC,QAA5C,QAA4CA,QAA5C;YAAA;YAAA,OAC6B,IAAAC,8BAAA,EAC3B,CAACF,SAAS,CAACG,QAAV,EAAD,EAAuBF,QAAQ,CAACE,QAAT,EAAvB,EAA4CC,MAAM,CAACC,IAAP,CAAY,qBAAZ,EAAmC,OAAnC,CAA5C,CAD2B,EAE3BL,SAF2B,CAD7B;;UAAA;YAAA;YACSM,SADT,yBACSA,SADT;YAAA,iCAKQA,SALR;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C;;;;SAQeC,sB;;;;;uFAAf;IAAA;IAAA;MAAA;QAAA;UAAA;YAAwCP,SAAxC,SAAwCA,SAAxC;YAAA,kCACQ,IAAAE,8BAAA,GACN;YACA,CAACE,MAAM,CAACC,IAAP,CAAY,CAAC,EAAD,EAAK,GAAL,EAAU,GAAV,EAAe,EAAf,EAAmB,EAAnB,EAAuB,GAAvB,EAA4B,GAA5B,EAAiC,GAAjC,EAAsC,GAAtC,EAA2C,GAA3C,EAAgD,GAAhD,EAAqD,GAArD,EAA0D,GAA1D,CAAZ,CAAD,CAFM,EAGNL,SAHM,CADR;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C;;;;SAQeQ,sB;;;;;uFAAf;IAAA;;IAAA;MAAA;QAAA;UAAA;YAAwCR,SAAxC,SAAwCA,SAAxC,EAAmDC,QAAnD,SAAmDA,QAAnD;YAAA;YAAA,OAC6B,IAAAC,8BAAA,EAC3B,CAACF,SAAS,CAACG,QAAV,EAAD,EAAuBF,QAAQ,CAACE,QAAT,EAAvB,EAA4CC,MAAM,CAACC,IAAP,CAAY,4BAAZ,EAA0C,OAA1C,CAA5C,CAD2B,EAE3BL,SAF2B,CAD7B;;UAAA;YAAA;YACSM,SADT,0BACSA,SADT;YAAA,kCAKQA,SALR;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C;;;;SAQeG,uB;;;;;wFAAf;IAAA;;IAAA;MAAA;QAAA;UAAA;YAAyCT,SAAzC,SAAyCA,SAAzC,EAAoDC,QAApD,SAAoDA,QAApD;YAAA;YAAA,OAC6B,IAAAC,8BAAA,EAC3B,CAACF,SAAS,CAACG,QAAV,EAAD,EAAuBF,QAAQ,CAACE,QAAT,EAAvB,EAA4CC,MAAM,CAACC,IAAP,CAAY,0BAAZ,EAAwC,OAAxC,CAA5C,CAD2B,EAE3BL,SAF2B,CAD7B;;UAAA;YAAA;YACSM,SADT,0BACSA,SADT;YAAA,kCAKQA,SALR;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C;;;;SAQeI,mB;;;;;oFAAf;IAAA;;IAAA;MAAA;QAAA;UAAA;YAAqCV,SAArC,SAAqCA,SAArC,EAAgDC,QAAhD,SAAgDA,QAAhD;YAAA;YAAA,OAC6B,IAAAC,8BAAA,EAC3B,CAACF,SAAS,CAACG,QAAV,EAAD,EAAuBF,QAAQ,CAACE,QAAT,EAAvB,EAA4CC,MAAM,CAACC,IAAP,CAAY,yBAAZ,EAAuC,OAAvC,CAA5C,CAD2B,EAE3BL,SAF2B,CAD7B;;UAAA;YAAA;YACSM,SADT,0BACSA,SADT;YAAA,kCAKQA,SALR;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C;;;;SAQeK,oB;;;;;qFAAf;IAAA;;IAAA;MAAA;QAAA;UAAA;YAAsCX,SAAtC,SAAsCA,SAAtC,EAAiDC,QAAjD,SAAiDA,QAAjD;YAAA;YAAA,OAC6B,IAAAC,8BAAA,EAC3B,CAACF,SAAS,CAACG,QAAV,EAAD,EAAuBF,QAAQ,CAACE,QAAT,EAAvB,EAA4CC,MAAM,CAACC,IAAP,CAAY,+BAAZ,EAA6C,OAA7C,CAA5C,CAD2B,EAE3BL,SAF2B,CAD7B;;UAAA;YAAA;YACSM,SADT,0BACSA,SADT;YAAA,kCAKQA,SALR;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C;;;;SAQeM,yB;;;;;0FAAf;IAAA;;IAAA;MAAA;QAAA;UAAA;YAA2CZ,SAA3C,SAA2CA,SAA3C,EAAsDC,QAAtD,SAAsDA,QAAtD;YAAA;YAAA,OAC6B,IAAAC,8BAAA,EAC3B,CAACF,SAAS,CAACG,QAAV,EAAD,EAAuBF,QAAQ,CAACE,QAAT,EAAvB,EAA4CC,MAAM,CAACC,IAAP,CAAY,wBAAZ,EAAsC,OAAtC,CAA5C,CAD2B,EAE3BL,SAF2B,CAD7B;;UAAA;YAAA;YACSM,SADT,0BACSA,SADT;YAAA,kCAKQA,SALR;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C;;;;SAQeO,0B;;;;;2FAAf;IAAA;;IAAA;MAAA;QAAA;UAAA;YAA4Cb,SAA5C,SAA4CA,SAA5C,EAAuDC,QAAvD,SAAuDA,QAAvD;YAAA;YAAA,OAC6B,IAAAC,8BAAA,EAC3B,CAACF,SAAS,CAACG,QAAV,EAAD,EAAuBF,QAAQ,CAACE,QAAT,EAAvB,EAA4CC,MAAM,CAACC,IAAP,CAAY,0BAAZ,EAAwC,OAAxC,CAA5C,CAD2B,EAE3BL,SAF2B,CAD7B;;UAAA;YAAA;YACSM,SADT,0BACSA,SADT;YAAA,kCAKQA,SALR;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C;;;;SAQeQ,uB;;;;;wFAAf;IAAA;;IAAA;MAAA;QAAA;UAAA;YAAyCd,SAAzC,SAAyCA,SAAzC,EAAoDC,QAApD,SAAoDA,QAApD;YAAA;YAAA,OAC6B,IAAAC,8BAAA,EAC3B,CAACF,SAAS,CAACG,QAAV,EAAD,EAAuBF,QAAQ,CAACE,QAAT,EAAvB,EAA4CC,MAAM,CAACC,IAAP,CAAY,4BAAZ,EAA0C,OAA1C,CAA5C,CAD2B,EAE3BL,SAF2B,CAD7B;;UAAA;YAAA;YACSM,SADT,0BACSA,SADT;YAAA,kCAKQA,SALR;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C;;;;SAQeS,qB;;;;;sFAAf;IAAA;;IAAA;MAAA;QAAA;UAAA;YACCC,OADD,UACCA,OADD,EAECf,QAFD,UAECA,QAFD,EAGCgB,QAHD,UAGCA,QAHD,EAICC,SAJD,UAICA,SAJD;YAWOlB,SAXP,GAWmBL,uBAXnB;YAAA;YAAA,OAakBI,eAAe,CAAC;cAAEC,SAAS,EAATA,SAAF;cAAaC,QAAQ,EAARA;YAAb,CAAD,CAbjC;;UAAA;YAaOkB,EAbP;YAAA;YAAA,OAcsBT,mBAAmB,CAAC;cAAEV,SAAS,EAATA,SAAF;cAAaC,QAAQ,EAARA;YAAb,CAAD,CAdzC;;UAAA;YAcOmB,MAdP;YAAA;YAAA,OAe+Cb,sBAAsB,CAAC;cACpEP,SAAS,EAATA;YADoE,CAAD,CAfrE;;UAAA;YAAA;YAeoBqB,SAfpB,yBAeSf,SAfT;YAe+BgB,KAf/B,yBAe+BA,KAf/B;YAAA;YAAA,OAkByBd,sBAAsB,CAAC;cAAER,SAAS,EAATA,SAAF;cAAaC,QAAQ,EAARA;YAAb,CAAD,CAlB/C;;UAAA;YAkBOsB,SAlBP;YAAA;YAAA,OAmB0Bd,uBAAuB,CAAC;cAAET,SAAS,EAATA,SAAF;cAAaC,QAAQ,EAARA;YAAb,CAAD,CAnBjD;;UAAA;YAmBOuB,UAnBP;YAAA;YAAA,OAoBuBb,oBAAoB,CAAC;cAAEX,SAAS,EAATA,SAAF;cAAaC,QAAQ,EAARA;YAAb,CAAD,CApB3C;;UAAA;YAoBOwB,OApBP;YAAA;YAAA,OAqB0BX,uBAAuB,CAAC;cAAEd,SAAS,EAATA,SAAF;cAAaC,QAAQ,EAARA;YAAb,CAAD,CArBjD;;UAAA;YAqBOyB,UArBP;YAAA;YAAA,OAsB4Bd,yBAAyB,CAAC;cAAEZ,SAAS,EAATA,SAAF;cAAaC,QAAQ,EAARA;YAAb,CAAD,CAtBrD;;UAAA;YAsBO0B,YAtBP;YAAA;YAAA,OAuB6Bd,0BAA0B,CAAC;cACtDb,SAAS,EAATA,SADsD;cAEtDC,QAAQ,EAARA;YAFsD,CAAD,CAvBvD;;UAAA;YAuBO2B,aAvBP;YA4BOC,YA5BP,GA4BsB,CA5BtB;YA6BOC,cA7BP,GA6BwBjC,mBA7BxB;YAAA;YAAA,OA8B8CkC,kBAAA,CAAOxB,sBAAP,CAA8B;cAC1EP,SAAS,EAAE8B,cAD+D;cAE1E7B,QAAQ,EAARA;YAF0E,CAA9B,CA9B9C;;UAAA;YAAA;YA8BoB+B,eA9BpB,yBA8BS1B,SA9BT;YAAA,mCAmCQ;cACN;cACAa,EAAE,EAAFA,EAFM;cAGNF,QAAQ,EAARA,QAHM;cAINC,SAAS,EAATA,SAJM;cAKNE,MAAM,EAANA,MALM;cAMN;cACAJ,OAAO,EAAPA,OAPM;cAQNhB,SAAS,EAATA,SARM;cASN;cACAqB,SAAS,EAATA,SAVM;cAWNC,KAAK,EAALA,KAXM;cAYNC,SAAS,EAATA,SAZM;cAaNC,UAAU,EAAVA,UAbM;cAcNC,OAAO,EAAPA,OAdM;cAeNC,UAAU,EAAVA,UAfM;cAgBNC,YAAY,EAAZA,YAhBM;cAiBNC,aAAa,EAAbA,aAjBM;cAkBN;cACAK,aAAa,EAAEJ,YAnBT;cAoBNK,eAAe,EAAEJ,cApBX;cAqBN;cACA7B,QAAQ,EAARA,QAtBM;cAuBN+B,eAAe,EAAfA;YAvBM,CAnCR;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C;;;;SA8DsBG,sB;;;;;uFAAf,mBAAsCC,UAAtC,EAA8DC,MAA9D;IAAA;;IAAA;MAAA;QAAA;UAAA;YACN;YACMC,SAFA,GAEY,CACjB;cACCtB,OAAO,EAAE,CADV;cAEChB,SAAS,EAAEL,uBAFZ;cAGCkC,YAAY,EAAE,CAHf;cAICC,cAAc,EAAEjC,mBAJjB;cAKC0C,WAAW,EAAEC;YALd,CADiB,CAFZ;YAYFC,gBAZE,GAqBE,EArBF;YAAA;YAAA;YAAA,OAuBoBC,OAAO,CAACC,GAAR,CACxBL,SAAS,CAACM,GAAV,CAAc;cAAA,IAAG5C,SAAH,UAAGA,SAAH;cAAA,IAAcgB,OAAd,UAAcA,OAAd;cAAA,IAAuBa,YAAvB,UAAuBA,YAAvB;cAAA,IAAqCC,cAArC,UAAqCA,cAArC;cAAA,IAAqDS,WAArD,UAAqDA,WAArD;cAAA,OACbH,UAAU,CACRS,kBADF,CACqB7C,SADrB,EACgC;gBAC9B8C,OAAO,EAAE,CAAC;kBAAEC,QAAQ,EAAER,WAAW,CAACS;gBAAxB,CAAD;cADqB,CADhC,EAIEC,IAJF,CAIO,UAACC,QAAD,EAAc;gBACnB,OAAOA,QAAQ,CAACN,GAAT,CAAa,UAACO,IAAD,EAAU;kBAC7B,uCACIA,IADJ,GAEI;oBACFnC,OAAO,EAAPA,OADE;oBAEFhB,SAAS,EAATA,SAFE;oBAGF6B,YAAY,EAAZA,YAHE;oBAIFC,cAAc,EAAdA,cAJE;oBAKFS,WAAW,EAAXA;kBALE,CAFJ;gBAUA,CAXM,CAAP;cAYA,CAjBF,CADa;YAAA,CAAd,CADwB,CAvBpB;;UAAA;YAuBLE,gBAvBK;YAAA;YAAA;;UAAA;YAAA;YAAA;;UAAA;YA+CAW,oBA/CA,GA+CuBX,gBAAgB,CAACY,IAAjB,EA/CvB,EAgDN;;YACMC,aAjDA,GAiDgB,EAjDhB;YAAA,uCA2DDF,oBA3DC;YAAA;;YAAA;;UAAA;YAAA;cAAA;cAAA;YAAA;;YAAA,2BAoDLG,MApDK,eAoDLA,MApDK,EAqDIC,WArDJ,eAqDLC,OArDK,EAsDLzC,OAtDK,eAsDLA,OAtDK,EAuDLhB,SAvDK,eAuDLA,SAvDK,EAwDL6B,YAxDK,eAwDLA,YAxDK,EAyDLC,cAzDK,eAyDLA,cAzDK,EA0DQ4B,sBA1DR,eA0DLnB,WA1DK;YA4DGoB,KA5DH,GA4DYH,WA5DZ,CA4DGG,IA5DH;YA8DCC,MA9DD,GA8DUF,sBAAsB,CAACG,MAAvB,CAA8BF,KAA9B,CA9DV;YA+DGG,MA/DH,GAgEJF,MAhEI,CA+DGE,MA/DH,EA+DWxC,KA/DX,GAgEJsC,MAhEI,CA+DWtC,KA/DX,EA+DkBL,QA/DlB,GAgEJ2C,MAhEI,CA+DkB3C,QA/DlB,EA+D4BC,SA/D5B,GAgEJ0C,MAhEI,CA+D4B1C,SA/D5B,EA+DuCE,MA/DvC,GAgEJwC,MAhEI,CA+DuCxC,MA/DvC,EA+D+CM,UA/D/C,GAgEJkC,MAhEI,CA+D+ClC,UA/D/C,EA+D2DC,YA/D3D,GAgEJiC,MAhEI,CA+D2DjC,YA/D3D,EA+DyEJ,SA/DzE,GAgEJqC,MAhEI,CA+DyErC,SA/DzE,EA+DoFC,UA/DpF,GAgEJoC,MAhEI,CA+DoFpC,UA/DpF,EA+DgGvB,QA/DhG,GAgEJ2D,MAhEI,CA+DgG3D,QA/DhG;YAkED2B,aAlEC,WAkEcH,OAlEd;;YAmEL,IAAIsC,qBAAA,CAAUC,IAAV,CAAeJ,MAAf,CAAJ,EAA4B;cAC3BhC,aAAa,GAAGgC,MAAM,CAAChC,aAAvB;cACAH,OAAO,GAAGmC,MAAM,CAACnC,OAAjB;YACA,CAHD,MAGO;cACNG,aAAa,GAAGqC,cAAA,CAAUC,OAA1B;cACAzC,OAAO,GAAGwC,cAAA,CAAUC,OAApB;YACA,CAzEI,CA0EL;;;YA1EK,KA2EDJ,MAAM,CAACK,MAAP,EA3EC;cAAA;cAAA;YAAA;;YAAA;;UAAA;YAAA;YAAA,OA+E4BpD,qBAAqB,CAAC;cACtDC,OAAO,EAAPA,OADsD;cAEtDC,QAAQ,EAARA,QAFsD;cAGtDC,SAAS,EAATA,SAHsD;cAItDjB,QAAQ,EAARA;YAJsD,CAAD,CA/EjD;;UAAA;YA+ECmE,kBA/ED;YAqFL;YACA;YAEAd,aAAa,CAACe,IAAd,CAAmB;cAClBlD,EAAE,EAAEoC,MADc;cAElBtC,QAAQ,EAARA,QAFkB;cAGlBC,SAAS,EAATA,SAHkB;cAIlBE,MAAM,EAANA,MAJkB;cAKlBJ,OAAO,EAAPA,OALkB;cAMlBhB,SAAS,EAATA,SANkB;cAQlBqB,SAAS,EAAE+C,kBAAkB,CAAC/C,SARZ;cASlBK,UAAU,EAAVA,UATkB;cAUlBC,YAAY,EAAZA,YAVkB;cAWlBJ,SAAS,EAATA,SAXkB;cAYlBC,UAAU,EAAVA,UAZkB;cAalBI,aAAa,EAAbA,aAbkB;cAclBH,OAAO,EAAPA,OAdkB;cAelBQ,aAAa,EAAEJ,YAfG;cAgBlBK,eAAe,EAAEJ,cAhBC;cAiBlB7B,QAAQ,EAARA,QAjBkB;cAkBlB+B,eAAe,EAAEoC,kBAAkB,CAACpC;YAlBlB,CAAnB;;UAxFK;YAAA;YAAA;;UAAA;YAAA;YAAA;;UAAA;YAAA;YAAA;;YAAA;;UAAA;YAAA;;YAAA;;YAAA;;UAAA;YA8GN;YACIsC,WA/GE,GA+G4C,EA/G5C;YAAA;YAAA;YAAA,OAiHe,IAAAC,mCAAA,EACnBnC,UADmB,EAEnBkB,aAAa,CAACV,GAAd,CAAkB;cAAA,IAAG3C,QAAH,UAAGA,QAAH;cAAA,OAAkBA,QAAlB;YAAA,CAAlB,CAFmB,EAGnBoC,MAHmB,CAjHf;;UAAA;YAiHLiC,WAjHK;YAAA;YAAA;;UAAA;YAAA;YAAA;;UAAA;YAwHAE,SAxHA,GAwHY,EAxHZ;;YA0HN,KAAWC,KAAX,IAAoBH,WAApB,EAAiC;cAC1BI,QAD0B,GACfpB,aAAa,CAACmB,KAAD,CADE;cAE1BE,UAF0B,GAEbL,WAAW,CAACG,KAAD,CAFE;cAIxBtD,EAJwB,GAIFuD,QAJE,CAIxBvD,EAJwB,EAIpBc,aAJoB,GAIFyC,QAJE,CAIpBzC,aAJoB,EAMhC;;cACQ0B,IAPwB,GAOfgB,UAPe,CAOxBhB,IAPwB;cAAA,qBAQO5B,kBAAA,CAAO6C,UAAP,CAAkB3C,aAAlB,CARP,EAQjB4C,mBARiB,sBAQxBC,KARwB;cAAA,wBAgB5BD,mBAAmB,CAAChB,MAApB,CAA2BF,IAA3B,CAhB4B,EAWpBoB,eAXoB,yBAW/BxD,SAX+B,EAYnByD,gBAZmB,yBAY/BxD,UAZ+B,EAazByD,UAbyB,yBAa/BC,IAb+B,EAczBC,UAdyB,yBAc/BC,IAd+B,EAenBC,gBAfmB,yBAe/BC,UAf+B;cAkBhCd,SAAS,CAACH,IAAV,iCACIK,QADJ,GAEI;gBACFK,eAAe,EAAfA,eADE;gBAEFC,gBAAgB,EAAhBA,gBAFE;gBAGFC,UAAU,EAAVA,UAHE;gBAIFE,UAAU,EAAVA,UAJE;gBAKFE,gBAAgB,EAAhBA;cALE,CAFJ;YAUA;;YAtJK,mCAwJCb,SAxJD;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C;;;;SA2Jee,mB;;;;;oFAAf,mBAAmCnD,UAAnC,EAA2DoD,MAA3D;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;;IAAA;MAAA;QAAA;UAAA;YAA8ExE,OAA9E,iEAAwF,CAAxF;YACN;YACMa,YAFA,GAEe,CAFf;YAGAI,aAHA,GAGgB,CAHhB;YAKAjC,SALA,GAKYL,uBALZ;YAMAmC,cANA,GAMiBjC,mBANjB;YAAA;YAAA,OAQgBuC,UAAU,CAACqD,cAAX,CAA0BD,MAA1B,CARhB;;UAAA;YAQA/B,OARA;YAAA,wBASkCM,qBAAA,CAAUa,UAAV,CAAqB5D,OAArB,CATlC,EASS0E,oBATT,yBASEZ,KATF,EAWN;;YACMlB,MAZA,GAYS8B,oBAAoB,CAAC7B,MAArB,CAA4B8B,UAAU,CAACtF,IAAX,CAAgBoD,OAAO,CAACE,IAAxB,CAA5B,CAZT;YAaEG,MAbF,GAaqGF,MAbrG,CAaEE,MAbF,EAaU7C,QAbV,GAaqG2C,MAbrG,CAaU3C,QAbV,EAaoBC,SAbpB,GAaqG0C,MAbrG,CAaoB1C,SAbpB,EAa+BE,MAb/B,GAaqGwC,MAbrG,CAa+BxC,MAb/B,EAauCM,UAbvC,GAaqGkC,MAbrG,CAauClC,UAbvC,EAamDC,YAbnD,GAaqGiC,MAbrG,CAamDjC,YAbnD,EAaiEJ,SAbjE,GAaqGqC,MAbrG,CAaiErC,SAbjE,EAa4EC,UAb5E,GAaqGoC,MAbrG,CAa4EpC,UAb5E,EAawFvB,QAbxF,GAaqG2D,MAbrG,CAawF3D,QAbxF;;YAkBN,IAAI8D,qBAAA,CAAUC,IAAV,CAAeJ,MAAf,CAAJ,EAA4B;cAC3BhC,aAAa,GAAGgC,MAAM,CAAChC,aAAvB;cACAH,OAAO,GAAGmC,MAAM,CAACnC,OAAjB;YACA,CAHD,MAGO;cACNG,aAAa,GAAGqC,cAAA,CAAUC,OAA1B;cACAzC,OAAO,GAAGwC,cAAA,CAAUC,OAApB;YACA,CAxBK,CA0BN;YACA;YACA;YACA;;;YA7BM;YAAA,OA+B2BnD,qBAAqB,CAAC;cACtDC,OAAO,EAAPA,OADsD;cAEtDC,QAAQ,EAARA,QAFsD;cAGtDC,SAAS,EAATA,SAHsD;cAItDjB,QAAQ,EAARA;YAJsD,CAAD,CA/BhD;;UAAA;YA+BAmE,kBA/BA;YAsCAM,QAtCA,GAsCW;cAChBvD,EAAE,EAAEqE,MADY;cAEhBvE,QAAQ,EAARA,QAFgB;cAGhBC,SAAS,EAATA,SAHgB;cAIhBE,MAAM,EAANA,MAJgB;cAKhBJ,OAAO,EAAPA,OALgB;cAMhBhB,SAAS,EAATA,SANgB;cAQhBqB,SAAS,EAAE+C,kBAAkB,CAAC/C,SARd;cAShBK,UAAU,EAAVA,UATgB;cAUhBC,YAAY,EAAZA,YAVgB;cAWhBJ,SAAS,EAATA,SAXgB;cAYhBC,UAAU,EAAVA,UAZgB;cAahBI,aAAa,EAAbA,aAbgB;cAchBH,OAAO,EAAPA,OAdgB;cAehBQ,aAAa,EAAEJ,YAfC;cAgBhBK,eAAe,EAAEJ,cAhBD;cAiBhB7B,QAAQ,EAARA,QAjBgB;cAkBhB+B,eAAe,EAAEoC,kBAAkB,CAACpC;YAlBpB,CAtCX;YAAA;YAAA,OA2DmBI,UAAU,CAACqD,cAAX,CAA0BxF,QAA1B,CA3DnB;;UAAA;YA2DA0E,UA3DA;YAAA,sBA4DiC5C,kBAAA,CAAO6C,UAAP,CAAkB3C,aAAlB,CA5DjC,EA4DS4C,mBA5DT,uBA4DEC,KA5DF,EA6DN;;YACMc,MA9DA,GA8DSf,mBAAmB,CAAChB,MAApB,CAA2B8B,UAAU,CAACtF,IAAX,CAAgBsE,UAAU,CAAChB,IAA3B,CAA3B,CA9DT;YAiEMoB,eAjEN,GAsEFa,MAtEE,CAiELrE,SAjEK,EAkEOyD,gBAlEP,GAsEFY,MAtEE,CAkELpE,UAlEK,EAmECyD,UAnED,GAsEFW,MAtEE,CAmELV,IAnEK,EAoECC,UApED,GAsEFS,MAtEE,CAoELR,IApEK,EAqEOC,gBArEP,GAsEFO,MAtEE,CAqELN,UArEK,EAwEN;;YAxEM,mEA0EFZ,QA1EE,GA2EF;cACFK,eAAe,EAAfA,eADE;cAEFC,gBAAgB,EAAhBA,gBAFE;cAGFC,UAAU,EAAVA,UAHE;cAIFE,UAAU,EAAVA,UAJE;cAKFE,gBAAgB,EAAhBA;YALE,CA3EE;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C;;;;SAqFeQ,kC;;;;;mGAAf,mBAAkDC,IAAlD,EAAmEC,KAAnE;IAAA;IAAA;MAAA;QAAA;UAAA;YAAA;YAAA;YAAA,OAEsB5D,sBAAsB,CAAC,IAAI6D,eAAJ,CAAe,IAAAC,kBAAA,EAAc,QAAd,CAAf,CAAD,CAF5C;;UAAA;YAECC,YAFD;YAGCC,IAHD,GAGQD,YAAY,CAACE,IAAb,CACZ,UAACC,EAAD;cAAA,OAAQA,EAAE,CAACpF,QAAH,CAAYqF,QAAZ,MAA0BR,IAAI,CAACQ,QAAL,EAA1B,IAA6CD,EAAE,CAACnF,SAAH,CAAaoF,QAAb,MAA2BP,KAAK,CAACO,QAAN,EAAhF;YAAA,CADY,CAHR;;YAAA,IAMAH,IANA;cAAA;cAAA;YAAA;;YAAA,MAMY,IAAII,KAAJ,CAAU,wDAAV,CANZ;;UAAA;YAAA,mCAOEJ,IAAI,CAAChF,EAAL,CAAQmF,QAAR,EAPF;;UAAA;YAAA;YAAA;YAAA;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C"}