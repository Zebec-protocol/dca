{"version":3,"file":"raydium-utils.js","names":["fetchPoolKeys","connection","poolId","version","serumVersion","marketVersion","programId","LIQUIDITY_PROGRAM_ID_V4","serumProgramId","SERUM_PROGRAM_ID_V3","getAccountInfo","account","Liquidity","getLayouts","LiquidityStateLayout","state","fields","decode","data","status","baseMint","quoteMint","lpMint","openOrders","targetOrders","baseVault","quoteVault","marketId","isV4","withdrawQueue","lpVault","PublicKey","default","getAssociatedPoolKeys","associatedPoolKeys","poolKeys","id","authority","marketProgramId","marketAuthority","marketInfo","Market","MARKET_STATE_LAYOUT","market","marketBaseVault","marketQuoteVault","marketBids","bids","marketAsks","asks","marketEventQueue","eventQueue","fetchAllPoolKeys","axios","get","response","poolKeysList","official","unOfficial","length","Error","findPoolIdByBaseAndQuoteMint","base","quote","keys","find","el","toString"],"sources":["../../src/utils/raydium-utils.ts"],"sourcesContent":["import axios from \"axios\";\n\nimport {\n\tLiquidity,\n\tLIQUIDITY_PROGRAM_ID_V4,\n\tLiquidityPoolKeys,\n\tMarket,\n\tSERUM_PROGRAM_ID_V3,\n} from \"@raydium-io/raydium-sdk\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\n\n/**\n * Fetch all keys in a raydium liquidity pool id\n */\nexport async function fetchPoolKeys(\n\tconnection: Connection,\n\tpoolId: PublicKey,\n\tversion = 4,\n): Promise<LiquidityPoolKeys> {\n\t// const version = 4\n\tconst serumVersion = 3;\n\tconst marketVersion = 3;\n\n\tconst programId = LIQUIDITY_PROGRAM_ID_V4;\n\tconst serumProgramId = SERUM_PROGRAM_ID_V3;\n\n\tconst account = await connection.getAccountInfo(poolId);\n\tconst { state: LiquidityStateLayout } = Liquidity.getLayouts(version);\n\n\t//@ts-ignore\n\tconst fields = LiquidityStateLayout.decode(account.data);\n\tconst { status, baseMint, quoteMint, lpMint, openOrders, targetOrders, baseVault, quoteVault, marketId } = fields;\n\n\tlet withdrawQueue, lpVault;\n\tif (Liquidity.isV4(fields)) {\n\t\twithdrawQueue = fields.withdrawQueue;\n\t\tlpVault = fields.lpVault;\n\t} else {\n\t\twithdrawQueue = PublicKey.default;\n\t\tlpVault = PublicKey.default;\n\t}\n\n\t// uninitialized\n\t// if (status.isZero()) {\n\t//   return ;\n\t// }\n\n\tconst associatedPoolKeys = await Liquidity.getAssociatedPoolKeys({\n\t\tversion,\n\t\tbaseMint,\n\t\tquoteMint,\n\t\tmarketId,\n\t});\n\n\tconst poolKeys = {\n\t\tid: poolId,\n\t\tbaseMint,\n\t\tquoteMint,\n\t\tlpMint,\n\t\tversion,\n\t\tprogramId,\n\n\t\tauthority: associatedPoolKeys.authority,\n\t\topenOrders,\n\t\ttargetOrders,\n\t\tbaseVault,\n\t\tquoteVault,\n\t\twithdrawQueue,\n\t\tlpVault,\n\t\tmarketVersion: serumVersion,\n\t\tmarketProgramId: serumProgramId,\n\t\tmarketId,\n\t\tmarketAuthority: associatedPoolKeys.marketAuthority,\n\t};\n\n\tconst marketInfo = await connection.getAccountInfo(marketId);\n\tconst { state: MARKET_STATE_LAYOUT } = Market.getLayouts(marketVersion);\n\t// @ts-ignore\n\tconst market = MARKET_STATE_LAYOUT.decode(marketInfo.data);\n\n\tconst {\n\t\tbaseVault: marketBaseVault,\n\t\tquoteVault: marketQuoteVault,\n\t\tbids: marketBids,\n\t\tasks: marketAsks,\n\t\teventQueue: marketEventQueue,\n\t} = market;\n\n\t// const poolKeys: LiquidityPoolKeys;\n\treturn {\n\t\t...poolKeys,\n\t\t...{\n\t\t\tmarketBaseVault,\n\t\t\tmarketQuoteVault,\n\t\t\tmarketBids,\n\t\t\tmarketAsks,\n\t\t\tmarketEventQueue,\n\t\t},\n\t};\n}\n\nasync function fetchAllPoolKeys(): Promise<LiquidityPoolKeys[]> {\n\ttry {\n\t\tconst response = await axios.get(\"https://api.raydium.io/v2/sdk/liquidity/mainnet.json\");\n\t\tlet poolKeysList: LiquidityPoolKeys[] = [...(response.data.official ?? []), ...(response.data.unOfficial ?? [])];\n\t\tif (poolKeysList.length === 0) throw new Error(\"Error in retreiving liquidity pool keys\");\n\t\treturn poolKeysList;\n\t} catch (err) {\n\t\tthrow err;\n\t}\n}\n\nexport async function findPoolIdByBaseAndQuoteMint(base: PublicKey, quote: PublicKey): Promise<string> {\n\ttry {\n\t\tconst poolKeysList = await fetchAllPoolKeys();\n\t\tconst keys = poolKeysList.find(\n\t\t\t(el) => el.baseMint.toString() == base.toString() && el.quoteMint.toString() == quote.toString(),\n\t\t);\n\t\tif (!keys) throw new Error(\"No liquidity pool found for given base and quote mint.\");\n\t\treturn keys.id.toString();\n\t} catch (err) {\n\t\tthrow err;\n\t}\n}\n"],"mappings":"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"}