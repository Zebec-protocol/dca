{"version":3,"file":"raydium-utils.js","names":["fetchPoolKeys","connection","poolId","version","serumVersion","marketVersion","programId","LIQUIDITY_PROGRAM_ID_V4","serumProgramId","SERUM_PROGRAM_ID_V3","getAccountInfo","account","Liquidity","getLayouts","LiquidityStateLayout","state","fields","decode","data","status","baseMint","quoteMint","lpMint","openOrders","targetOrders","baseVault","quoteVault","marketId","isV4","withdrawQueue","lpVault","PublicKey","default","getAssociatedPoolKeys","associatedPoolKeys","poolKeys","id","authority","marketProgramId","marketAuthority","marketInfo","Market","MARKET_STATE_LAYOUT","market","marketBaseVault","marketQuoteVault","marketBids","bids","marketAsks","asks","marketEventQueue","eventQueue","fetchAllPoolKeys","axios","get","response","poolKeysList","official","unOfficial","length","Error","findPoolIdByBaseAndQuoteMint","base","quote","keys","find","el","toString"],"sources":["../../src/utils/raydium-utils.ts"],"sourcesContent":["import { Liquidity, LiquidityPoolKeys, LIQUIDITY_PROGRAM_ID_V4, Market, SERUM_PROGRAM_ID_V3 } from \"@raydium-io/raydium-sdk\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\nimport axios from \"axios\";\n\n/**\n * Fetch all keys in a raydium liquidity pool id\n */\nexport async function fetchPoolKeys(\n    connection: Connection,\n    poolId: PublicKey,\n    version = 4\n): Promise<LiquidityPoolKeys> {\n\n    // const version = 4\n    const serumVersion = 3\n    const marketVersion = 3\n\n    const programId = LIQUIDITY_PROGRAM_ID_V4\n    const serumProgramId = SERUM_PROGRAM_ID_V3\n\n    const account = await connection.getAccountInfo(poolId)\n    const { state: LiquidityStateLayout } = Liquidity.getLayouts(version)\n\n    //@ts-ignore\n    const fields = LiquidityStateLayout.decode(account.data);\n    const { status, baseMint, quoteMint, lpMint, openOrders, targetOrders, baseVault, quoteVault, marketId } = fields;\n\n    let withdrawQueue, lpVault;\n    if (Liquidity.isV4(fields)) {\n        withdrawQueue = fields.withdrawQueue;\n        lpVault = fields.lpVault;\n    } else {\n        withdrawQueue = PublicKey.default;\n        lpVault = PublicKey.default;\n    }\n\n    // uninitialized\n    // if (status.isZero()) {\n    //   return ;\n    // }\n\n    const associatedPoolKeys = await Liquidity.getAssociatedPoolKeys({\n        version,\n        baseMint,\n        quoteMint,\n        marketId,\n    });\n\n    const poolKeys = {\n        id: poolId,\n        baseMint,\n        quoteMint,\n        lpMint,\n        version,\n        programId,\n\n        authority: associatedPoolKeys.authority,\n        openOrders,\n        targetOrders,\n        baseVault,\n        quoteVault,\n        withdrawQueue,\n        lpVault,\n        marketVersion: serumVersion,\n        marketProgramId: serumProgramId,\n        marketId,\n        marketAuthority: associatedPoolKeys.marketAuthority,\n    };\n\n    const marketInfo = await connection.getAccountInfo(marketId);\n    const { state: MARKET_STATE_LAYOUT } = Market.getLayouts(marketVersion);\n    // @ts-ignore\n    const market = MARKET_STATE_LAYOUT.decode(marketInfo.data);\n\n    const {\n        baseVault: marketBaseVault,\n        quoteVault: marketQuoteVault,\n        bids: marketBids,\n        asks: marketAsks,\n        eventQueue: marketEventQueue,\n    } = market;\n\n    // const poolKeys: LiquidityPoolKeys;\n    return {\n        ...poolKeys,\n        ...{\n            marketBaseVault,\n            marketQuoteVault,\n            marketBids,\n            marketAsks,\n            marketEventQueue,\n        },\n    };\n}\n\nasync function fetchAllPoolKeys(): Promise<LiquidityPoolKeys[]> {\n    try {\n        const response = await axios.get(\"https://api.raydium.io/v2/sdk/liquidity/mainnet.json\");\n        let poolKeysList: LiquidityPoolKeys[] = [...(response.data.official ?? []), ...(response.data.unOfficial ?? [])];\n        if (poolKeysList.length === 0) throw new Error(\"Error in retreiving liquidity pool keys\");\n        return poolKeysList;\n    } catch (err) {\n        throw err;\n    }\n}\n\nexport async function findPoolIdByBaseAndQuoteMint(base: PublicKey, quote: PublicKey): Promise<string> {\n    try {\n        const poolKeysList = await fetchAllPoolKeys();\n        const keys = poolKeysList.find(el =>\n            el.baseMint.toString() == base.toString() &&\n            el.quoteMint.toString() == quote.toString()\n        );\n        if (!keys) throw new Error(\"No liquidity pool found for given base and quote mint.\")\n        return keys.id.toString();\n    } catch (err) {\n        throw err;\n    }\n}"],"mappings":"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"}