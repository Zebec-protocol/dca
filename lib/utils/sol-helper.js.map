{"version":3,"file":"sol-helper.js","names":["isU64","amount","gt","BN","RangeError","convertToLamports","decimals","_amount","BigNumber","multipliedBy","bnAmount","toFixed","convertToDecimal","decimal","divn","toNumber"],"sources":["../../src/utils/sol-helper.ts"],"sourcesContent":["import BigNumber from \"bignumber.js\";\nimport BN from \"bn.js\";\n\nconst isU64 = (amount: BN) => {\n\tif (amount.gt(new BN(\"18446744073709551615\"))) {\n\t\tthrow new RangeError(\"The amount is not an unsigned 64-bit integer.\");\n\t}\n};\n\n/**\n * Convert sol or token amounts to lamports\n * @returns Amount in lamports\n */\nexport function convertToLamports(amount: number, decimals = 9) {\n\tconst _amount = new BigNumber(amount).multipliedBy(10 * decimals);\n\tconst bnAmount = new BN(_amount.toFixed());\n\tisU64(bnAmount);\n\treturn bnAmount;\n}\n\n/**\n * Convert lamports to decimal\n * @returns Amount in lamports\n */\nexport function convertToDecimal(amount: BN, decimal = 9) {\n\tisU64(amount);\n\treturn amount.divn(10 ** decimal).toNumber();\n}\n"],"mappings":";;;;;;;;AAAA;;AACA;;;;AAEA,IAAMA,KAAK,GAAG,SAARA,KAAQ,CAACC,MAAD,EAAgB;EAC7B,IAAIA,MAAM,CAACC,EAAP,CAAU,IAAIC,WAAJ,CAAO,sBAAP,CAAV,CAAJ,EAA+C;IAC9C,MAAM,IAAIC,UAAJ,CAAe,+CAAf,CAAN;EACA;AACD,CAJD;AAMA;AACA;AACA;AACA;;;AACO,SAASC,iBAAT,CAA2BJ,MAA3B,EAAyD;EAAA,IAAdK,QAAc,uEAAH,CAAG;;EAC/D,IAAMC,OAAO,GAAG,IAAIC,kBAAJ,CAAcP,MAAd,EAAsBQ,YAAtB,CAAmC,KAAKH,QAAxC,CAAhB;;EACA,IAAMI,QAAQ,GAAG,IAAIP,WAAJ,CAAOI,OAAO,CAACI,OAAR,EAAP,CAAjB;EACAX,KAAK,CAACU,QAAD,CAAL;EACA,OAAOA,QAAP;AACA;AAED;AACA;AACA;AACA;;;AACO,SAASE,gBAAT,CAA0BX,MAA1B,EAAmD;EAAA,IAAbY,OAAa,uEAAH,CAAG;EACzDb,KAAK,CAACC,MAAD,CAAL;EACA,OAAOA,MAAM,CAACa,IAAP,UAAY,EAAZ,EAAkBD,OAAlB,GAA2BE,QAA3B,EAAP;AACA"}