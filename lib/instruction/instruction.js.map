{"version":3,"file":"instruction.js","names":["DcaInstruction","source","vault","mint","nativeMint","sourceTokenAccount","vaultTokenAccount","vaultNativeMintAccount","dcaAccount","amount","data","DepositTokenData","encode","keys","AccountMetaFactory","newWritable","newReadonly","TOKEN_PROGRAM_ID","SystemProgram","programId","SYSVAR_RENT_PUBKEY","ASSOCIATED_TOKEN_PROGRAM_ID","TransactionInstruction","DCA_PROGRAM_ID","DepositSolData","startTime","dcaAmount","dcaTime","minimumAmountOut","InitializeData","liquidityProgramId","amm","ammAuthority","ammOpenOrder","ammTargetOrder","poolCoinToken","poolPcToken","serumMarketProgramId","serumMarket","serumBids","serumAsk","serumEventQueue","serumCoinVault","serumPcVault","serumVaultSigner","SwapToSolData","SwapFromSolData","transferAmount","WithdrawTokenData","sourceNativeMintAccount","WithdrawSolData","FundTokenData","FundSolData"],"sources":["../../src/instruction/instruction.ts"],"sourcesContent":["import {\n    PublicKey,\n    SystemProgram,\n    SYSVAR_RENT_PUBKEY,\n    TransactionInstruction,\n} from \"@solana/web3.js\";\nimport {\n    ASSOCIATED_TOKEN_PROGRAM_ID,\n    TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\nimport {\n    DepositSolData,\n    DepositTokenData,\n    FundSolData,\n    FundTokenData,\n    InitializeData,\n    SwapFromSolData,\n    SwapToSolData,\n    WithdrawSolData,\n    WithdrawTokenData,\n} from \"./data\";\nimport { AccountMetaFactory } from \"../utils\";\nimport { DCA_PROGRAM_ID } from \"../constants\"\nimport BN from \"bn.js\";\n\n/**\n * The DCA program instruction factory class. \n */\nexport class DcaInstruction {\n\n    /**\n     * Generate transaction instruction that deposit token to DCA vault\n     */\n    static depositToken(\n        source: PublicKey,\n        vault: PublicKey,\n        mint: PublicKey,\n        nativeMint: PublicKey,\n        sourceTokenAccount: PublicKey,\n        vaultTokenAccount: PublicKey,\n        vaultNativeMintAccount: PublicKey,\n        dcaAccount: PublicKey,\n        amount: BN\n    ) {\n        const data = new DepositTokenData(amount).encode();\n        const keys = [\n            AccountMetaFactory.newWritable(source, true),\n            AccountMetaFactory.newWritable(vault, false),\n            AccountMetaFactory.newReadonly(TOKEN_PROGRAM_ID, false),\n            AccountMetaFactory.newWritable(mint, false),\n            AccountMetaFactory.newWritable(nativeMint, false),\n            AccountMetaFactory.newReadonly(SystemProgram.programId, false),\n            AccountMetaFactory.newReadonly(SYSVAR_RENT_PUBKEY, false),\n            AccountMetaFactory.newWritable(sourceTokenAccount, false),\n            AccountMetaFactory.newWritable(vaultTokenAccount, false),\n            AccountMetaFactory.newWritable(vaultNativeMintAccount, false),\n            AccountMetaFactory.newReadonly(ASSOCIATED_TOKEN_PROGRAM_ID, false),\n            AccountMetaFactory.newWritable(dcaAccount, true),\n        ];\n        return new TransactionInstruction({\n            keys: keys,\n            programId: DCA_PROGRAM_ID,\n            data: data\n        });\n    }\n\n    /**\n    * Generate transaction instruction that deposit native token to DCA vault\n    */\n    static depositSol(\n        source: PublicKey,\n        vault: PublicKey,\n        mint: PublicKey,\n        nativeMint: PublicKey,\n        sourceTokenAccount: PublicKey,\n        vaultNativeMintAccount: PublicKey,\n        vaultTokenAccount: PublicKey,\n        dcaAccount: PublicKey,\n        amount: BN\n    ) {\n        const data = new DepositSolData(amount).encode();\n        const keys = [\n            AccountMetaFactory.newWritable(source, true),\n            AccountMetaFactory.newWritable(vault, false),\n            AccountMetaFactory.newReadonly(TOKEN_PROGRAM_ID, false),\n            AccountMetaFactory.newWritable(mint, false),\n            AccountMetaFactory.newWritable(nativeMint, false),\n            AccountMetaFactory.newReadonly(SystemProgram.programId, false),\n            AccountMetaFactory.newReadonly(SYSVAR_RENT_PUBKEY, false),\n            AccountMetaFactory.newWritable(sourceTokenAccount, false),\n            AccountMetaFactory.newWritable(vaultNativeMintAccount, false),\n            AccountMetaFactory.newWritable(vaultTokenAccount, false),\n            AccountMetaFactory.newReadonly(ASSOCIATED_TOKEN_PROGRAM_ID, false),\n            AccountMetaFactory.newWritable(dcaAccount, true),\n        ]\n        return new TransactionInstruction({\n            keys: keys,\n            programId: DCA_PROGRAM_ID,\n            data: data\n        });\n    }\n\n    /**\n     * Generate transaction instruction that intialize the swap process\n     */\n    static initialize(\n        source: PublicKey,\n        vault: PublicKey,\n        dcaAccount: PublicKey,\n        startTime: BN,\n        dcaAmount: BN,\n        dcaTime: BN,\n        minimumAmountOut: BN\n    ) {\n        const data = new InitializeData(\n            startTime,\n            dcaAmount,\n            dcaTime,\n            minimumAmountOut\n        ).encode();\n        const keys = [\n            AccountMetaFactory.newWritable(source, true),\n            AccountMetaFactory.newWritable(vault, false),\n            AccountMetaFactory.newWritable(dcaAccount, false),\n        ];\n\n        return new TransactionInstruction({\n            keys: keys,\n            programId: DCA_PROGRAM_ID,\n            data: data\n        })\n    }\n\n    /**\n     * Generate transaction instruction that swap token to sol\n     */\n    static swapToSol(\n        liquidityProgramId: PublicKey,\n        amm: PublicKey,\n        ammAuthority: PublicKey,\n        ammOpenOrder: PublicKey,\n        ammTargetOrder: PublicKey,\n        poolCoinToken: PublicKey,\n        poolPcToken: PublicKey,\n        serumMarketProgramId: PublicKey,\n        serumMarket: PublicKey,\n        serumBids: PublicKey,\n        serumAsk: PublicKey,\n        serumEventQueue: PublicKey,\n        serumCoinVault: PublicKey,\n        serumPcVault: PublicKey,\n        serumVaultSigner: PublicKey,\n        vault: PublicKey,\n        vaultNativeMintAccount: PublicKey,\n        vaultTokenAccount: PublicKey,\n        mint: PublicKey,\n        source: PublicKey,\n        dcaAccount: PublicKey,\n        nativeMint: PublicKey,\n        minimumAmountOut: BN\n    ) {\n        const data = new SwapToSolData(minimumAmountOut).encode();\n        const keys = [\n            // amm liquidity pool (raydium)\n            AccountMetaFactory.newReadonly(liquidityProgramId, false),\n            AccountMetaFactory.newWritable(amm, false),\n            AccountMetaFactory.newReadonly(ammAuthority, false),\n            AccountMetaFactory.newWritable(ammOpenOrder, false),\n            AccountMetaFactory.newWritable(ammTargetOrder, false),\n            AccountMetaFactory.newWritable(poolCoinToken, false),\n            AccountMetaFactory.newWritable(poolPcToken, false),\n\n            // serum market\n            AccountMetaFactory.newReadonly(serumMarketProgramId, false),\n            AccountMetaFactory.newWritable(serumMarket, false),\n            AccountMetaFactory.newWritable(serumBids, false),\n            AccountMetaFactory.newWritable(serumAsk, false),\n            AccountMetaFactory.newWritable(serumEventQueue, false),\n            AccountMetaFactory.newWritable(serumCoinVault, false),\n            AccountMetaFactory.newWritable(serumPcVault, false),\n            AccountMetaFactory.newReadonly(serumVaultSigner, false),\n\n            // users  (raydium)\n            AccountMetaFactory.newWritable(vaultTokenAccount, false),\n            AccountMetaFactory.newWritable(vault, false),\n            AccountMetaFactory.newWritable(vaultNativeMintAccount, false),\n\n            // (dca)\n            AccountMetaFactory.newWritable(mint, false),\n            AccountMetaFactory.newWritable(source, false),\n            AccountMetaFactory.newWritable(dcaAccount, false),\n            AccountMetaFactory.newWritable(nativeMint, false),\n            AccountMetaFactory.newReadonly(TOKEN_PROGRAM_ID, false),\n        ];\n        return new TransactionInstruction({\n            keys: keys,\n            programId: DCA_PROGRAM_ID,\n            data: data\n        });\n    }\n\n    /**\n     * Generate transaction instruction that swap token from sol\n     */\n    static swapFromSol(\n        liquidityProgramId: PublicKey,\n        amm: PublicKey,\n        ammAuthority: PublicKey,\n        ammOpenOrder: PublicKey,\n        ammTargetOrder: PublicKey,\n        poolCoinToken: PublicKey,\n        poolPcToken: PublicKey,\n        serumMarketProgramId: PublicKey,\n        serumMarket: PublicKey,\n        serumBids: PublicKey,\n        serumAsk: PublicKey,\n        serumEventQueue: PublicKey,\n        serumCoinVault: PublicKey,\n        serumPcVault: PublicKey,\n        serumVaultSigner: PublicKey,\n        vault: PublicKey,\n        vaultNativeMintAccount: PublicKey,\n        vaultTokenAccount: PublicKey,\n        mint: PublicKey,\n        source: PublicKey,\n        dcaAccount: PublicKey,\n        nativeMint: PublicKey,\n        minimumAmountOut: BN\n    ) {\n        const data = new SwapFromSolData(minimumAmountOut).encode();\n        const keys = [\n            // amm liquidity pool (raydium)\n            AccountMetaFactory.newReadonly(liquidityProgramId, false),\n            AccountMetaFactory.newWritable(amm, false),\n            AccountMetaFactory.newReadonly(ammAuthority, false),\n            AccountMetaFactory.newWritable(ammOpenOrder, false),\n            AccountMetaFactory.newWritable(ammTargetOrder, false),\n            AccountMetaFactory.newWritable(poolCoinToken, false),\n            AccountMetaFactory.newWritable(poolPcToken, false),\n\n            // serum market\n            AccountMetaFactory.newReadonly(serumMarketProgramId, false),\n            AccountMetaFactory.newWritable(serumMarket, false),\n            AccountMetaFactory.newWritable(serumBids, false),\n            AccountMetaFactory.newWritable(serumAsk, false),\n            AccountMetaFactory.newWritable(serumEventQueue, false),\n            AccountMetaFactory.newWritable(serumCoinVault, false),\n            AccountMetaFactory.newWritable(serumPcVault, false),\n            AccountMetaFactory.newReadonly(serumVaultSigner, false),\n\n            // users  (raydium)\n            AccountMetaFactory.newWritable(vault, false),\n            AccountMetaFactory.newWritable(vaultNativeMintAccount, false),\n            AccountMetaFactory.newWritable(vaultTokenAccount, false),\n\n            // (dca)\n            AccountMetaFactory.newWritable(mint, false),\n            AccountMetaFactory.newWritable(source, false),\n            AccountMetaFactory.newWritable(dcaAccount, false),\n            AccountMetaFactory.newWritable(nativeMint, false),\n            AccountMetaFactory.newReadonly(TOKEN_PROGRAM_ID, false),\n        ];\n        return new TransactionInstruction({\n            keys: keys,\n            programId: DCA_PROGRAM_ID,\n            data: data\n        });\n    }\n\n    /**\n     * Generate Transaction Instruction that withdraws non-native token from DCA vault\n     */\n    static withdrawToken(\n        source: PublicKey,\n        vault: PublicKey,\n        mint: PublicKey,\n        sourceTokenAccount: PublicKey,\n        vaultTokenAccount: PublicKey,\n        dcaAccount: PublicKey,\n        transferAmount: BN\n    ) {\n        const data = new WithdrawTokenData(transferAmount).encode();\n        const keys = [\n            AccountMetaFactory.newWritable(source, true),\n            AccountMetaFactory.newWritable(vault, false),\n            AccountMetaFactory.newReadonly(TOKEN_PROGRAM_ID, false),\n            AccountMetaFactory.newWritable(mint, false),\n            AccountMetaFactory.newReadonly(SystemProgram.programId, false),\n            AccountMetaFactory.newReadonly(SYSVAR_RENT_PUBKEY, false),\n            AccountMetaFactory.newWritable(sourceTokenAccount, false),\n            AccountMetaFactory.newWritable(vaultTokenAccount, false),\n            AccountMetaFactory.newReadonly(ASSOCIATED_TOKEN_PROGRAM_ID, false),\n            AccountMetaFactory.newWritable(dcaAccount, false),\n        ];\n        return new TransactionInstruction({\n            keys: keys,\n            programId: DCA_PROGRAM_ID,\n            data: data\n        })\n    }\n\n    /**\n     * Generate Transaction Instruction that withdraws native token from DCA vault\n     */\n    static withdrawSol(\n        source: PublicKey,\n        vault: PublicKey,\n        mint: PublicKey,\n        sourceTokenAccount: PublicKey,\n        vaultTokenAccount: PublicKey,\n        dcaAccount: PublicKey,\n        nativeMint: PublicKey,\n        vaultNativeMintAccount: PublicKey,\n        sourceNativeMintAccount: PublicKey,\n        transferAmount: BN\n    ) {\n        const data = new WithdrawSolData(transferAmount).encode();\n        const keys = [\n            AccountMetaFactory.newWritable(source, true),\n            AccountMetaFactory.newWritable(vault, false),\n            AccountMetaFactory.newReadonly(TOKEN_PROGRAM_ID, false),\n            AccountMetaFactory.newWritable(mint, false),\n            AccountMetaFactory.newReadonly(SystemProgram.programId, false),\n            AccountMetaFactory.newReadonly(SYSVAR_RENT_PUBKEY, false),\n            AccountMetaFactory.newWritable(sourceTokenAccount, false),\n            AccountMetaFactory.newWritable(vaultTokenAccount, false),\n            AccountMetaFactory.newReadonly(ASSOCIATED_TOKEN_PROGRAM_ID, false),\n            AccountMetaFactory.newWritable(dcaAccount, false),\n            AccountMetaFactory.newWritable(nativeMint, false),\n            AccountMetaFactory.newWritable(vaultNativeMintAccount, false),\n            AccountMetaFactory.newWritable(sourceNativeMintAccount, false),\n        ];\n        return new TransactionInstruction({\n            keys: keys,\n            programId: DCA_PROGRAM_ID,\n            data: data\n        })\n    }\n\n\n    /**\n     * Generate transaction instruction that fund token in initialized dca\n     */\n    static fundToken(\n        source: PublicKey,\n        vault: PublicKey,\n        mint: PublicKey,\n        sourceTokenAccount: PublicKey,\n        vaultTokenAccount: PublicKey,\n        dcaAccount: PublicKey,\n        transferAmount: BN\n    ) {\n        const data = new FundTokenData(transferAmount).encode();\n        const keys = [\n            AccountMetaFactory.newWritable(source, true),\n            AccountMetaFactory.newWritable(vault, false),\n            AccountMetaFactory.newReadonly(TOKEN_PROGRAM_ID, false),\n            AccountMetaFactory.newWritable(mint, false),\n            AccountMetaFactory.newReadonly(SystemProgram.programId, false),\n            AccountMetaFactory.newReadonly(SYSVAR_RENT_PUBKEY, false),\n            AccountMetaFactory.newWritable(sourceTokenAccount, false),\n            AccountMetaFactory.newWritable(vaultTokenAccount, false),\n            AccountMetaFactory.newReadonly(ASSOCIATED_TOKEN_PROGRAM_ID, false),\n            AccountMetaFactory.newWritable(dcaAccount, false),\n        ];\n        return new TransactionInstruction({\n            keys: keys,\n            programId: DCA_PROGRAM_ID,\n            data: data\n        })\n    }\n\n    /**\n     * Generate transaction instruction that sol to intialized dca process\n     */\n    static fundSol(\n        source: PublicKey,\n        vault: PublicKey,\n        mint: PublicKey,\n        nativeMint: PublicKey,\n        sourceTokenAccount: PublicKey,\n        vaultNativeMintAccount: PublicKey,\n        vaultTokenAccount: PublicKey,\n        dcaAccount: PublicKey,\n        transferAmount: BN\n    ) {\n        const data = new FundSolData(transferAmount).encode();\n        const keys = [\n            AccountMetaFactory.newWritable(source, true),\n            AccountMetaFactory.newWritable(vault, false),\n            AccountMetaFactory.newReadonly(TOKEN_PROGRAM_ID, false),\n            AccountMetaFactory.newWritable(mint, false),\n            AccountMetaFactory.newWritable(nativeMint, false),\n            AccountMetaFactory.newReadonly(SystemProgram.programId, false),\n            AccountMetaFactory.newReadonly(SYSVAR_RENT_PUBKEY, false),\n            AccountMetaFactory.newWritable(sourceTokenAccount, false),\n            AccountMetaFactory.newWritable(vaultNativeMintAccount, false),\n            AccountMetaFactory.newWritable(vaultTokenAccount, false),\n            AccountMetaFactory.newReadonly(ASSOCIATED_TOKEN_PROGRAM_ID, false),\n            AccountMetaFactory.newWritable(dcaAccount, false),\n        ];\n        return new TransactionInstruction({\n            keys: keys,\n            programId: DCA_PROGRAM_ID,\n            data: data\n        })\n    }\n\n\n}"],"mappings":"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"}