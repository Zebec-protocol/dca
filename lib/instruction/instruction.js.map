{"version":3,"file":"instruction.js","names":["DcaInstruction","source","vault","tokenMint","sourceTokenAccount","vaultTokenAccount","amount","data","DepositTokenData","encode","keys","AccountMetaFactory","newWritable","newReadonly","TOKEN_PROGRAM_ID","SystemProgram","programId","SYSVAR_RENT_PUBKEY","ASSOCIATED_TOKEN_PROGRAM_ID","TransactionInstruction","DCA_PROGRAM_ID","tokenMintFrom","tokenMintTo","vaultTokenAccountFrom","vaultTokenAccountTo","dcaAccount","startTime","dcaAmount","frequency","InitializeData","liquidityProgramId","ammAccount","ammAuthority","ammOpenOrder","ammTargetOrder","poolCoinTokenAccount","poolPcTokenAccount","serumMarketProgramId","serumMarket","serumBids","serumAsk","serumEventQueue","serumCoinVault","serumPcVault","serumVaultSigner","minimumAmountOut","SwapData","transferAmount","WithdrawTokenData"],"sources":["../../src/instruction/instruction.ts"],"sourcesContent":["import BN from \"bn.js\";\n\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport { PublicKey, SystemProgram, SYSVAR_RENT_PUBKEY, TransactionInstruction } from \"@solana/web3.js\";\n\nimport { DCA_PROGRAM_ID } from \"../constants\";\nimport { AccountMetaFactory } from \"../utils\";\nimport { DepositTokenData, InitializeData, SwapData, WithdrawTokenData } from \"./data\";\n\n/**\n * The DCA program instruction factory class.\n */\nexport class DcaInstruction {\n\t/**\n\t * Generate transaction instruction that deposit into DCA vault\n\t */\n\tstatic depositToken(\n\t\tsource: PublicKey,\n\t\tvault: PublicKey,\n\t\ttokenMint: PublicKey,\n\t\tsourceTokenAccount: PublicKey,\n\t\tvaultTokenAccount: PublicKey,\n\t\tamount: BN,\n\t) {\n\t\tconst data = new DepositTokenData(amount).encode();\n\t\tconst keys = [\n\t\t\tAccountMetaFactory.newWritable(source, true),\n\t\t\tAccountMetaFactory.newWritable(vault, false),\n\t\t\tAccountMetaFactory.newReadonly(TOKEN_PROGRAM_ID, false),\n\t\t\tAccountMetaFactory.newWritable(tokenMint, false),\n\t\t\tAccountMetaFactory.newReadonly(SystemProgram.programId, false),\n\t\t\tAccountMetaFactory.newReadonly(SYSVAR_RENT_PUBKEY, false),\n\t\t\tAccountMetaFactory.newWritable(sourceTokenAccount, false),\n\t\t\tAccountMetaFactory.newWritable(vaultTokenAccount, false),\n\t\t\tAccountMetaFactory.newReadonly(ASSOCIATED_TOKEN_PROGRAM_ID, false),\n\t\t];\n\t\treturn new TransactionInstruction({\n\t\t\tkeys: keys,\n\t\t\tprogramId: DCA_PROGRAM_ID,\n\t\t\tdata: data,\n\t\t});\n\t}\n\n\t/**\n\t * Generate transaction instruction to intialize the dca process\n\t */\n\tstatic initialize(\n\t\tsource: PublicKey,\n\t\tvault: PublicKey,\n\t\ttokenMintFrom: PublicKey,\n\t\ttokenMintTo: PublicKey,\n\t\tvaultTokenAccountFrom: PublicKey,\n\t\tvaultTokenAccountTo: PublicKey,\n\t\tdcaAccount: PublicKey,\n\t\tstartTime: BN,\n\t\tdcaAmount: BN,\n\t\tfrequency: BN,\n\t) {\n\t\tconst data = new InitializeData(startTime, dcaAmount, frequency).encode();\n\t\tconst keys = [\n\t\t\tAccountMetaFactory.newWritable(source, true),\n\t\t\tAccountMetaFactory.newWritable(vault, false),\n\t\t\tAccountMetaFactory.newWritable(tokenMintFrom, false),\n\t\t\tAccountMetaFactory.newWritable(tokenMintTo, false),\n\t\t\tAccountMetaFactory.newWritable(vaultTokenAccountFrom, false),\n\t\t\tAccountMetaFactory.newWritable(vaultTokenAccountTo, false),\n\t\t\tAccountMetaFactory.newWritable(dcaAccount, true),\n\t\t\tAccountMetaFactory.newReadonly(SystemProgram.programId, false),\n\t\t\tAccountMetaFactory.newReadonly(SYSVAR_RENT_PUBKEY, false),\n\t\t\tAccountMetaFactory.newReadonly(TOKEN_PROGRAM_ID, false),\n\t\t\tAccountMetaFactory.newReadonly(ASSOCIATED_TOKEN_PROGRAM_ID, false),\n\t\t];\n\t\treturn new TransactionInstruction({\n\t\t\tkeys: keys,\n\t\t\tprogramId: DCA_PROGRAM_ID,\n\t\t\tdata: data,\n\t\t});\n\t}\n\n\t/**\n\t * Generate transaction instruction to swap\n\t */\n\tstatic swap(\n\t\tliquidityProgramId: PublicKey,\n\t\tammAccount: PublicKey,\n\t\tammAuthority: PublicKey,\n\t\tammOpenOrder: PublicKey,\n\t\tammTargetOrder: PublicKey,\n\t\tpoolCoinTokenAccount: PublicKey,\n\t\tpoolPcTokenAccount: PublicKey,\n\t\tserumMarketProgramId: PublicKey,\n\t\tserumMarket: PublicKey,\n\t\tserumBids: PublicKey,\n\t\tserumAsk: PublicKey,\n\t\tserumEventQueue: PublicKey,\n\t\tserumCoinVault: PublicKey,\n\t\tserumPcVault: PublicKey,\n\t\tserumVaultSigner: PublicKey,\n\t\tvault: PublicKey,\n\t\tvaultTokenAccountFrom: PublicKey,\n\t\tvaultTokenAccountTo: PublicKey,\n\t\ttokenMintFrom: PublicKey,\n\t\ttokenMintTo: PublicKey,\n\t\tsource: PublicKey,\n\t\tdcaAccount: PublicKey,\n\t\tminimumAmountOut: BN,\n\t) {\n\t\tconst data = new SwapData(minimumAmountOut).encode();\n\t\tconst keys = [\n\t\t\tAccountMetaFactory.newReadonly(liquidityProgramId, false),\n\t\t\tAccountMetaFactory.newWritable(ammAccount, false),\n\t\t\tAccountMetaFactory.newReadonly(ammAuthority, false),\n\t\t\tAccountMetaFactory.newWritable(ammOpenOrder, false),\n\t\t\tAccountMetaFactory.newWritable(ammTargetOrder, false),\n\t\t\tAccountMetaFactory.newWritable(poolCoinTokenAccount, false),\n\t\t\tAccountMetaFactory.newWritable(poolPcTokenAccount, false),\n\t\t\tAccountMetaFactory.newReadonly(serumMarketProgramId, false),\n\t\t\tAccountMetaFactory.newWritable(serumMarket, false),\n\t\t\tAccountMetaFactory.newWritable(serumBids, false),\n\t\t\tAccountMetaFactory.newWritable(serumAsk, false),\n\t\t\tAccountMetaFactory.newWritable(serumEventQueue, false),\n\t\t\tAccountMetaFactory.newWritable(serumCoinVault, false),\n\t\t\tAccountMetaFactory.newWritable(serumPcVault, false),\n\t\t\tAccountMetaFactory.newReadonly(serumVaultSigner, false),\n\t\t\tAccountMetaFactory.newWritable(vault, false),\n\t\t\tAccountMetaFactory.newWritable(vaultTokenAccountFrom, false),\n\t\t\tAccountMetaFactory.newWritable(vaultTokenAccountTo, false),\n\t\t\tAccountMetaFactory.newWritable(tokenMintFrom, false),\n\t\t\tAccountMetaFactory.newWritable(tokenMintTo, false),\n\t\t\tAccountMetaFactory.newWritable(source, false),\n\t\t\tAccountMetaFactory.newWritable(dcaAccount, false),\n\t\t\tAccountMetaFactory.newReadonly(TOKEN_PROGRAM_ID, false),\n\t\t];\n\t\treturn new TransactionInstruction({\n\t\t\tkeys: keys,\n\t\t\tprogramId: DCA_PROGRAM_ID,\n\t\t\tdata: data,\n\t\t});\n\t}\n\n\t/**\n\t * Generate Transaction Instruction to withdraw token from DCA vault\n\t */\n\tstatic withdrawToken(\n\t\tsource: PublicKey,\n\t\tvault: PublicKey,\n\t\ttokenMint: PublicKey,\n\t\tsourceTokenAccount: PublicKey,\n\t\tvaultTokenAccount: PublicKey,\n\t\ttransferAmount: BN,\n\t) {\n\t\tconst data = new WithdrawTokenData(transferAmount).encode();\n\t\tconst keys = [\n\t\t\tAccountMetaFactory.newWritable(source, true),\n\t\t\tAccountMetaFactory.newWritable(vault, false),\n\t\t\tAccountMetaFactory.newReadonly(TOKEN_PROGRAM_ID, false),\n\t\t\tAccountMetaFactory.newWritable(tokenMint, false),\n\t\t\tAccountMetaFactory.newReadonly(SystemProgram.programId, false),\n\t\t\tAccountMetaFactory.newReadonly(SYSVAR_RENT_PUBKEY, false),\n\t\t\tAccountMetaFactory.newWritable(sourceTokenAccount, false),\n\t\t\tAccountMetaFactory.newWritable(vaultTokenAccount, false),\n\t\t\tAccountMetaFactory.newReadonly(ASSOCIATED_TOKEN_PROGRAM_ID, false),\n\t\t];\n\t\treturn new TransactionInstruction({\n\t\t\tkeys: keys,\n\t\t\tprogramId: DCA_PROGRAM_ID,\n\t\t\tdata: data,\n\t\t});\n\t}\n}\n"],"mappings":"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"}