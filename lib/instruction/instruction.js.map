{"version":3,"file":"instruction.js","names":["DcaInstruction","source","vault","mint","nativeMint","sourceTokenAccount","vaultTokenAccount","vaultNativeMintAccount","dcaAccount","amount","data","DepositTokenData","encode","keys","AccountMetaFactory","newWritable","newReadonly","TOKEN_PROGRAM_ID","SystemProgram","programId","SYSVAR_RENT_PUBKEY","ASSOCIATED_TOKEN_PROGRAM_ID","TransactionInstruction","DCA_PROGRAM_ID","DepositSolData","startTime","dcaAmount","dcaTime","minimumAmountOut","InitializeData","liquidityProgramId","amm","ammAuthority","ammOpenOrder","ammTargetOrder","poolCoinToken","poolPcToken","serumMarketProgramId","serumMarket","serumBids","serumAsk","serumEventQueue","serumCoinVault","serumPcVault","serumVaultSigner","SwapToSolData","SwapFromSolData","transferAmount","WithdrawTokenData","sourceNativeMintAccount","WithdrawSolData","FundTokenData","FundSolData"],"sources":["../../src/instruction/instruction.ts"],"sourcesContent":["import BN from \"bn.js\";\n\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport { PublicKey, SystemProgram, SYSVAR_RENT_PUBKEY, TransactionInstruction } from \"@solana/web3.js\";\n\nimport { DCA_PROGRAM_ID } from \"../constants\";\nimport { AccountMetaFactory } from \"../utils\";\nimport {\n\tDepositSolData,\n\tDepositTokenData,\n\tFundSolData,\n\tFundTokenData,\n\tInitializeData,\n\tSwapFromSolData,\n\tSwapToSolData,\n\tWithdrawSolData,\n\tWithdrawTokenData,\n} from \"./data\";\n\n/**\n * The DCA program instruction factory class.\n */\nexport class DcaInstruction {\n\t/**\n\t * Generate transaction instruction that deposit token to DCA vault\n\t */\n\tstatic depositToken(\n\t\tsource: PublicKey,\n\t\tvault: PublicKey,\n\t\tmint: PublicKey,\n\t\tnativeMint: PublicKey,\n\t\tsourceTokenAccount: PublicKey,\n\t\tvaultTokenAccount: PublicKey,\n\t\tvaultNativeMintAccount: PublicKey,\n\t\tdcaAccount: PublicKey,\n\t\tamount: BN,\n\t) {\n\t\tconst data = new DepositTokenData(amount).encode();\n\t\tconst keys = [\n\t\t\tAccountMetaFactory.newWritable(source, true),\n\t\t\tAccountMetaFactory.newWritable(vault, false),\n\t\t\tAccountMetaFactory.newReadonly(TOKEN_PROGRAM_ID, false),\n\t\t\tAccountMetaFactory.newWritable(mint, false),\n\t\t\tAccountMetaFactory.newWritable(nativeMint, false),\n\t\t\tAccountMetaFactory.newReadonly(SystemProgram.programId, false),\n\t\t\tAccountMetaFactory.newReadonly(SYSVAR_RENT_PUBKEY, false),\n\t\t\tAccountMetaFactory.newWritable(sourceTokenAccount, false),\n\t\t\tAccountMetaFactory.newWritable(vaultTokenAccount, false),\n\t\t\tAccountMetaFactory.newWritable(vaultNativeMintAccount, false),\n\t\t\tAccountMetaFactory.newReadonly(ASSOCIATED_TOKEN_PROGRAM_ID, false),\n\t\t\tAccountMetaFactory.newWritable(dcaAccount, true),\n\t\t];\n\t\treturn new TransactionInstruction({\n\t\t\tkeys: keys,\n\t\t\tprogramId: DCA_PROGRAM_ID,\n\t\t\tdata: data,\n\t\t});\n\t}\n\n\t/**\n\t * Generate transaction instruction that deposit native token to DCA vault\n\t */\n\tstatic depositSol(\n\t\tsource: PublicKey,\n\t\tvault: PublicKey,\n\t\tmint: PublicKey,\n\t\tnativeMint: PublicKey,\n\t\tsourceTokenAccount: PublicKey,\n\t\tvaultNativeMintAccount: PublicKey,\n\t\tvaultTokenAccount: PublicKey,\n\t\tdcaAccount: PublicKey,\n\t\tamount: BN,\n\t) {\n\t\tconst data = new DepositSolData(amount).encode();\n\t\tconst keys = [\n\t\t\tAccountMetaFactory.newWritable(source, true),\n\t\t\tAccountMetaFactory.newWritable(vault, false),\n\t\t\tAccountMetaFactory.newReadonly(TOKEN_PROGRAM_ID, false),\n\t\t\tAccountMetaFactory.newWritable(mint, false),\n\t\t\tAccountMetaFactory.newWritable(nativeMint, false),\n\t\t\tAccountMetaFactory.newReadonly(SystemProgram.programId, false),\n\t\t\tAccountMetaFactory.newReadonly(SYSVAR_RENT_PUBKEY, false),\n\t\t\tAccountMetaFactory.newWritable(sourceTokenAccount, false),\n\t\t\tAccountMetaFactory.newWritable(vaultNativeMintAccount, false),\n\t\t\tAccountMetaFactory.newWritable(vaultTokenAccount, false),\n\t\t\tAccountMetaFactory.newReadonly(ASSOCIATED_TOKEN_PROGRAM_ID, false),\n\t\t\tAccountMetaFactory.newWritable(dcaAccount, true),\n\t\t];\n\t\treturn new TransactionInstruction({\n\t\t\tkeys: keys,\n\t\t\tprogramId: DCA_PROGRAM_ID,\n\t\t\tdata: data,\n\t\t});\n\t}\n\n\t/**\n\t * Generate transaction instruction that intialize the swap process\n\t */\n\tstatic initialize(\n\t\tsource: PublicKey,\n\t\tvault: PublicKey,\n\t\tdcaAccount: PublicKey,\n\t\tstartTime: BN,\n\t\tdcaAmount: BN,\n\t\tdcaTime: BN,\n\t\tminimumAmountOut: BN,\n\t) {\n\t\tconst data = new InitializeData(startTime, dcaAmount, dcaTime, minimumAmountOut).encode();\n\t\tconst keys = [\n\t\t\tAccountMetaFactory.newWritable(source, true),\n\t\t\tAccountMetaFactory.newWritable(vault, false),\n\t\t\tAccountMetaFactory.newWritable(dcaAccount, false),\n\t\t];\n\n\t\treturn new TransactionInstruction({\n\t\t\tkeys: keys,\n\t\t\tprogramId: DCA_PROGRAM_ID,\n\t\t\tdata: data,\n\t\t});\n\t}\n\n\t/**\n\t * Generate transaction instruction that swap token to sol\n\t */\n\tstatic swapToSol(\n\t\tliquidityProgramId: PublicKey,\n\t\tamm: PublicKey,\n\t\tammAuthority: PublicKey,\n\t\tammOpenOrder: PublicKey,\n\t\tammTargetOrder: PublicKey,\n\t\tpoolCoinToken: PublicKey,\n\t\tpoolPcToken: PublicKey,\n\t\tserumMarketProgramId: PublicKey,\n\t\tserumMarket: PublicKey,\n\t\tserumBids: PublicKey,\n\t\tserumAsk: PublicKey,\n\t\tserumEventQueue: PublicKey,\n\t\tserumCoinVault: PublicKey,\n\t\tserumPcVault: PublicKey,\n\t\tserumVaultSigner: PublicKey,\n\t\tvault: PublicKey,\n\t\tvaultNativeMintAccount: PublicKey,\n\t\tvaultTokenAccount: PublicKey,\n\t\tmint: PublicKey,\n\t\tsource: PublicKey,\n\t\tdcaAccount: PublicKey,\n\t\tnativeMint: PublicKey,\n\t\tminimumAmountOut: BN,\n\t) {\n\t\tconst data = new SwapToSolData(minimumAmountOut).encode();\n\t\tconst keys = [\n\t\t\t// amm liquidity pool (raydium)\n\t\t\tAccountMetaFactory.newReadonly(liquidityProgramId, false),\n\t\t\tAccountMetaFactory.newWritable(amm, false),\n\t\t\tAccountMetaFactory.newReadonly(ammAuthority, false),\n\t\t\tAccountMetaFactory.newWritable(ammOpenOrder, false),\n\t\t\tAccountMetaFactory.newWritable(ammTargetOrder, false),\n\t\t\tAccountMetaFactory.newWritable(poolCoinToken, false),\n\t\t\tAccountMetaFactory.newWritable(poolPcToken, false),\n\n\t\t\t// serum market\n\t\t\tAccountMetaFactory.newReadonly(serumMarketProgramId, false),\n\t\t\tAccountMetaFactory.newWritable(serumMarket, false),\n\t\t\tAccountMetaFactory.newWritable(serumBids, false),\n\t\t\tAccountMetaFactory.newWritable(serumAsk, false),\n\t\t\tAccountMetaFactory.newWritable(serumEventQueue, false),\n\t\t\tAccountMetaFactory.newWritable(serumCoinVault, false),\n\t\t\tAccountMetaFactory.newWritable(serumPcVault, false),\n\t\t\tAccountMetaFactory.newReadonly(serumVaultSigner, false),\n\n\t\t\t// users  (raydium)\n\t\t\tAccountMetaFactory.newWritable(vaultTokenAccount, false),\n\t\t\tAccountMetaFactory.newWritable(vault, false),\n\t\t\tAccountMetaFactory.newWritable(vaultNativeMintAccount, false),\n\n\t\t\t// (dca)\n\t\t\tAccountMetaFactory.newWritable(mint, false),\n\t\t\tAccountMetaFactory.newWritable(source, false),\n\t\t\tAccountMetaFactory.newWritable(dcaAccount, false),\n\t\t\tAccountMetaFactory.newWritable(nativeMint, false),\n\t\t\tAccountMetaFactory.newReadonly(TOKEN_PROGRAM_ID, false),\n\t\t];\n\t\treturn new TransactionInstruction({\n\t\t\tkeys: keys,\n\t\t\tprogramId: DCA_PROGRAM_ID,\n\t\t\tdata: data,\n\t\t});\n\t}\n\n\t/**\n\t * Generate transaction instruction that swap token from sol\n\t */\n\tstatic swapFromSol(\n\t\tliquidityProgramId: PublicKey,\n\t\tamm: PublicKey,\n\t\tammAuthority: PublicKey,\n\t\tammOpenOrder: PublicKey,\n\t\tammTargetOrder: PublicKey,\n\t\tpoolCoinToken: PublicKey,\n\t\tpoolPcToken: PublicKey,\n\t\tserumMarketProgramId: PublicKey,\n\t\tserumMarket: PublicKey,\n\t\tserumBids: PublicKey,\n\t\tserumAsk: PublicKey,\n\t\tserumEventQueue: PublicKey,\n\t\tserumCoinVault: PublicKey,\n\t\tserumPcVault: PublicKey,\n\t\tserumVaultSigner: PublicKey,\n\t\tvault: PublicKey,\n\t\tvaultNativeMintAccount: PublicKey,\n\t\tvaultTokenAccount: PublicKey,\n\t\tmint: PublicKey,\n\t\tsource: PublicKey,\n\t\tdcaAccount: PublicKey,\n\t\tnativeMint: PublicKey,\n\t\tminimumAmountOut: BN,\n\t) {\n\t\tconst data = new SwapFromSolData(minimumAmountOut).encode();\n\t\tconst keys = [\n\t\t\t// amm liquidity pool (raydium)\n\t\t\tAccountMetaFactory.newReadonly(liquidityProgramId, false),\n\t\t\tAccountMetaFactory.newWritable(amm, false),\n\t\t\tAccountMetaFactory.newReadonly(ammAuthority, false),\n\t\t\tAccountMetaFactory.newWritable(ammOpenOrder, false),\n\t\t\tAccountMetaFactory.newWritable(ammTargetOrder, false),\n\t\t\tAccountMetaFactory.newWritable(poolCoinToken, false),\n\t\t\tAccountMetaFactory.newWritable(poolPcToken, false),\n\n\t\t\t// serum market\n\t\t\tAccountMetaFactory.newReadonly(serumMarketProgramId, false),\n\t\t\tAccountMetaFactory.newWritable(serumMarket, false),\n\t\t\tAccountMetaFactory.newWritable(serumBids, false),\n\t\t\tAccountMetaFactory.newWritable(serumAsk, false),\n\t\t\tAccountMetaFactory.newWritable(serumEventQueue, false),\n\t\t\tAccountMetaFactory.newWritable(serumCoinVault, false),\n\t\t\tAccountMetaFactory.newWritable(serumPcVault, false),\n\t\t\tAccountMetaFactory.newReadonly(serumVaultSigner, false),\n\n\t\t\t// users  (raydium)\n\t\t\tAccountMetaFactory.newWritable(vault, false),\n\t\t\tAccountMetaFactory.newWritable(vaultNativeMintAccount, false),\n\t\t\tAccountMetaFactory.newWritable(vaultTokenAccount, false),\n\n\t\t\t// (dca)\n\t\t\tAccountMetaFactory.newWritable(mint, false),\n\t\t\tAccountMetaFactory.newWritable(source, false),\n\t\t\tAccountMetaFactory.newWritable(dcaAccount, false),\n\t\t\tAccountMetaFactory.newWritable(nativeMint, false),\n\t\t\tAccountMetaFactory.newReadonly(TOKEN_PROGRAM_ID, false),\n\t\t];\n\t\treturn new TransactionInstruction({\n\t\t\tkeys: keys,\n\t\t\tprogramId: DCA_PROGRAM_ID,\n\t\t\tdata: data,\n\t\t});\n\t}\n\n\t/**\n\t * Generate Transaction Instruction that withdraws non-native token from DCA vault\n\t */\n\tstatic withdrawToken(\n\t\tsource: PublicKey,\n\t\tvault: PublicKey,\n\t\tmint: PublicKey,\n\t\tsourceTokenAccount: PublicKey,\n\t\tvaultTokenAccount: PublicKey,\n\t\tdcaAccount: PublicKey,\n\t\ttransferAmount: BN,\n\t) {\n\t\tconst data = new WithdrawTokenData(transferAmount).encode();\n\t\tconst keys = [\n\t\t\tAccountMetaFactory.newWritable(source, true),\n\t\t\tAccountMetaFactory.newWritable(vault, false),\n\t\t\tAccountMetaFactory.newReadonly(TOKEN_PROGRAM_ID, false),\n\t\t\tAccountMetaFactory.newWritable(mint, false),\n\t\t\tAccountMetaFactory.newReadonly(SystemProgram.programId, false),\n\t\t\tAccountMetaFactory.newReadonly(SYSVAR_RENT_PUBKEY, false),\n\t\t\tAccountMetaFactory.newWritable(sourceTokenAccount, false),\n\t\t\tAccountMetaFactory.newWritable(vaultTokenAccount, false),\n\t\t\tAccountMetaFactory.newReadonly(ASSOCIATED_TOKEN_PROGRAM_ID, false),\n\t\t\tAccountMetaFactory.newWritable(dcaAccount, false),\n\t\t];\n\t\treturn new TransactionInstruction({\n\t\t\tkeys: keys,\n\t\t\tprogramId: DCA_PROGRAM_ID,\n\t\t\tdata: data,\n\t\t});\n\t}\n\n\t/**\n\t * Generate Transaction Instruction that withdraws native token from DCA vault\n\t */\n\tstatic withdrawSol(\n\t\tsource: PublicKey,\n\t\tvault: PublicKey,\n\t\tmint: PublicKey,\n\t\tsourceTokenAccount: PublicKey,\n\t\tvaultTokenAccount: PublicKey,\n\t\tdcaAccount: PublicKey,\n\t\tnativeMint: PublicKey,\n\t\tvaultNativeMintAccount: PublicKey,\n\t\tsourceNativeMintAccount: PublicKey,\n\t\ttransferAmount: BN,\n\t) {\n\t\tconst data = new WithdrawSolData(transferAmount).encode();\n\t\tconst keys = [\n\t\t\tAccountMetaFactory.newWritable(source, true),\n\t\t\tAccountMetaFactory.newWritable(vault, false),\n\t\t\tAccountMetaFactory.newReadonly(TOKEN_PROGRAM_ID, false),\n\t\t\tAccountMetaFactory.newWritable(mint, false),\n\t\t\tAccountMetaFactory.newReadonly(SystemProgram.programId, false),\n\t\t\tAccountMetaFactory.newReadonly(SYSVAR_RENT_PUBKEY, false),\n\t\t\tAccountMetaFactory.newWritable(sourceTokenAccount, false),\n\t\t\tAccountMetaFactory.newWritable(vaultTokenAccount, false),\n\t\t\tAccountMetaFactory.newReadonly(ASSOCIATED_TOKEN_PROGRAM_ID, false),\n\t\t\tAccountMetaFactory.newWritable(dcaAccount, false),\n\t\t\tAccountMetaFactory.newWritable(nativeMint, false),\n\t\t\tAccountMetaFactory.newWritable(vaultNativeMintAccount, false),\n\t\t\tAccountMetaFactory.newWritable(sourceNativeMintAccount, false),\n\t\t];\n\t\treturn new TransactionInstruction({\n\t\t\tkeys: keys,\n\t\t\tprogramId: DCA_PROGRAM_ID,\n\t\t\tdata: data,\n\t\t});\n\t}\n\n\t/**\n\t * Generate transaction instruction that fund token in initialized dca\n\t */\n\tstatic fundToken(\n\t\tsource: PublicKey,\n\t\tvault: PublicKey,\n\t\tmint: PublicKey,\n\t\tsourceTokenAccount: PublicKey,\n\t\tvaultTokenAccount: PublicKey,\n\t\tdcaAccount: PublicKey,\n\t\ttransferAmount: BN,\n\t) {\n\t\tconst data = new FundTokenData(transferAmount).encode();\n\t\tconst keys = [\n\t\t\tAccountMetaFactory.newWritable(source, true),\n\t\t\tAccountMetaFactory.newWritable(vault, false),\n\t\t\tAccountMetaFactory.newReadonly(TOKEN_PROGRAM_ID, false),\n\t\t\tAccountMetaFactory.newWritable(mint, false),\n\t\t\tAccountMetaFactory.newReadonly(SystemProgram.programId, false),\n\t\t\tAccountMetaFactory.newReadonly(SYSVAR_RENT_PUBKEY, false),\n\t\t\tAccountMetaFactory.newWritable(sourceTokenAccount, false),\n\t\t\tAccountMetaFactory.newWritable(vaultTokenAccount, false),\n\t\t\tAccountMetaFactory.newReadonly(ASSOCIATED_TOKEN_PROGRAM_ID, false),\n\t\t\tAccountMetaFactory.newWritable(dcaAccount, false),\n\t\t];\n\t\treturn new TransactionInstruction({\n\t\t\tkeys: keys,\n\t\t\tprogramId: DCA_PROGRAM_ID,\n\t\t\tdata: data,\n\t\t});\n\t}\n\n\t/**\n\t * Generate transaction instruction that sol to intialized dca process\n\t */\n\tstatic fundSol(\n\t\tsource: PublicKey,\n\t\tvault: PublicKey,\n\t\tmint: PublicKey,\n\t\tnativeMint: PublicKey,\n\t\tsourceTokenAccount: PublicKey,\n\t\tvaultNativeMintAccount: PublicKey,\n\t\tvaultTokenAccount: PublicKey,\n\t\tdcaAccount: PublicKey,\n\t\ttransferAmount: BN,\n\t) {\n\t\tconst data = new FundSolData(transferAmount).encode();\n\t\tconst keys = [\n\t\t\tAccountMetaFactory.newWritable(source, true),\n\t\t\tAccountMetaFactory.newWritable(vault, false),\n\t\t\tAccountMetaFactory.newReadonly(TOKEN_PROGRAM_ID, false),\n\t\t\tAccountMetaFactory.newWritable(mint, false),\n\t\t\tAccountMetaFactory.newWritable(nativeMint, false),\n\t\t\tAccountMetaFactory.newReadonly(SystemProgram.programId, false),\n\t\t\tAccountMetaFactory.newReadonly(SYSVAR_RENT_PUBKEY, false),\n\t\t\tAccountMetaFactory.newWritable(sourceTokenAccount, false),\n\t\t\tAccountMetaFactory.newWritable(vaultNativeMintAccount, false),\n\t\t\tAccountMetaFactory.newWritable(vaultTokenAccount, false),\n\t\t\tAccountMetaFactory.newReadonly(ASSOCIATED_TOKEN_PROGRAM_ID, false),\n\t\t\tAccountMetaFactory.newWritable(dcaAccount, false),\n\t\t];\n\t\treturn new TransactionInstruction({\n\t\t\tkeys: keys,\n\t\t\tprogramId: DCA_PROGRAM_ID,\n\t\t\tdata: data,\n\t\t});\n\t}\n}\n"],"mappings":"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"}