{"version":3,"file":"online-client.js","names":["DcaOnlineClient","params","connection","commitment","preflightCommitment","_wallet","wallet","txn","publicKey","WalletNotConnectedError","_connection","getLatestBlockhash","blockhash","recentBlockhash","lastValidBlockHeight","signTransaction","signedTxn","sendRawTransaction","serialize","_preflightCommitment","skipPreflight","signature","confirmTransaction","_commitment","owner","mint","amount","makeDepositTokenTransaction","transaction","dcaAccount","signAndSendTransaction","status","data","makeDepositSolTransaction","startTime","dcaAmount","dcaTime","makeInitializeTransaction","makeWithdrawTokenTransaction","makeWithdrawSolTransaction","makeSwapFromSolTransaction","makeSwapToSolTransaction","makeFundTokenTransaction","makeFundSolTransaction","DcaClient"],"sources":["../../src/clients/online-client.ts"],"sourcesContent":["import { WalletNotConnectedError } from \"@solana/wallet-adapter-base\";\nimport { Commitment, Connection, PublicKey, Transaction } from \"@solana/web3.js\";\nimport BigNumber from \"bignumber.js\";\nimport { DcaClient, IWalletAdapter } from \"./base\";\n\nexport class DcaOnlineClient extends DcaClient {\n    private _wallet: IWalletAdapter;\n    constructor(params: {\n        wallet: IWalletAdapter,\n        connection: Connection,\n        commitment: Commitment,\n        preflightCommitment: Commitment\n    }) {\n        super({\n            connection: params.connection,\n            commitment: params.commitment,\n            preflightCommitment: params.preflightCommitment\n        });\n        this._wallet = params.wallet;\n    }\n\n    private async signAndSendTransaction(txn: Transaction): Promise<string> {\n        try {\n            if (!this._wallet.publicKey) {\n                throw new WalletNotConnectedError(\"No wallet is connected.\");\n            }\n            const blockhash = await this._connection.getLatestBlockhash();\n            txn.recentBlockhash = blockhash.blockhash;\n            txn.lastValidBlockHeight = blockhash.lastValidBlockHeight;\n            const signedTxn = await this._wallet.signTransaction(txn);\n            const signature = await this._connection.sendRawTransaction(\n                signedTxn.serialize(),\n                {\n                    preflightCommitment: this._preflightCommitment,\n                    skipPreflight: false,\n                });\n            await this._connection.confirmTransaction(\n                {\n                    blockhash: blockhash.blockhash,\n                    lastValidBlockHeight: blockhash.lastValidBlockHeight,\n                    signature: signature\n                },\n                this._commitment\n            );\n            return signature;\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    /**\n      * Deposit non-native token in dca program vault\n      */\n    async depositToken(owner: PublicKey, mint: PublicKey, amount: BigNumber) {\n        try {\n            const { transaction, dcaAccount } = await this.makeDepositTokenTransaction(owner, mint, amount);\n\n            const signature = await this.signAndSendTransaction(transaction);\n\n            return {\n                status: \"success\",\n                data: {\n                    signature: signature,\n                    dcaAccount: dcaAccount\n                }\n            }\n        } catch (e) {\n            throw e;\n        }\n    }\n\n    /**\n     * Deposit sol in dca vault\n     */\n    async depositSol(owner: PublicKey, mint: PublicKey, amount: BigNumber) {\n        try {\n            const { transaction, dcaAccount } = await this.makeDepositSolTransaction(owner, mint, amount);\n\n            const signature = await this.signAndSendTransaction(transaction);\n\n            return {\n                status: \"success\",\n                data: {\n                    signature: signature,\n                    dcaAccount: dcaAccount\n                }\n            }\n        } catch (e) {\n            throw e;\n        }\n    }\n\n    /**\n     * Intialize dca process\n     */\n    async initialize(owner: PublicKey, mint: PublicKey, dcaAccount: PublicKey, startTime: BigNumber, dcaAmount: BigNumber, dcaTime: BigNumber) {\n        try {\n            const transaction = await this.makeInitializeTransaction(owner, mint, dcaAccount, startTime, dcaAmount, dcaTime);\n\n            const signature = await this.signAndSendTransaction(transaction);\n\n            return {\n                status: \"success\",\n                data: {\n                    signature: signature,\n                }\n            }\n        } catch (e) {\n            throw e;\n        }\n    }\n\n    /**\n     * Withdraw non-native token from vault\n     */\n    async withdrawToken(owner: PublicKey, mint: PublicKey, dcaAccount: PublicKey, amount: BigNumber) {\n        try {\n            const transaction = await this.makeWithdrawTokenTransaction(owner, mint, dcaAccount, amount);\n\n            const signature = await this.signAndSendTransaction(transaction);\n\n            return {\n                status: \"success\",\n                data: {\n                    signature: signature,\n                }\n            }\n        } catch (e) {\n            throw e;\n        }\n    }\n\n    /**\n     * Withdraw native token from vault\n     */\n    async withdrawSol(owner: PublicKey, mint: PublicKey, dcaAccount: PublicKey, amount: BigNumber) {\n        try {\n            const transaction = await this.makeWithdrawSolTransaction(owner, mint, dcaAccount, amount);\n\n            const signature = await this.signAndSendTransaction(transaction);\n\n            return {\n                status: \"success\",\n                data: {\n                    signature: signature,\n                }\n            }\n        } catch (e) {\n            throw e;\n        }\n    }\n\n    /**\n     * Swap token from sol\n     */\n    async swapFromSol(owner: PublicKey, mint: PublicKey, dcaAccount: PublicKey) {\n        try {\n            const transaction = await this.makeSwapFromSolTransaction(owner, mint, dcaAccount);\n\n            const signature = await this.signAndSendTransaction(transaction);\n\n            return {\n                status: \"success\",\n                data: {\n                    signature: signature,\n                }\n            }\n        } catch (e) {\n            throw e;\n        }\n    }\n\n    /**\n     * Swap Token to Sol\n     */\n    async swapToSol(owner: PublicKey, mint: PublicKey, dcaAccount: PublicKey) {\n        const transaction = await this.makeSwapToSolTransaction(owner, mint, dcaAccount);\n\n        const signature = await this.signAndSendTransaction(transaction);\n\n        return {\n            status: \"success\",\n            data: {\n                signature: signature,\n            },\n        }\n    }\n\n    /**\n     * Fund non-native token to existing vault\n     */\n    async fundToken(owner: PublicKey, mint: PublicKey, dcaAccount: PublicKey, amount: BigNumber) {\n        try {\n            const transaction = await this.makeFundTokenTransaction(owner, mint, dcaAccount, amount);\n\n            const signature = await this.signAndSendTransaction(transaction);\n\n            return {\n                status: \"success\",\n                data: {\n                    signature: signature,\n                }\n            }\n        } catch (e) {\n            throw e;\n        }\n    }\n\n    /**\n     * Fund native token to existing vault\n     */\n    async fundSol(owner: PublicKey, mint: PublicKey, dcaAccount: PublicKey, amount: BigNumber) {\n        try {\n            const transaction = await this.makeFundSolTransaction(owner, mint, dcaAccount, amount);\n\n            const signature = this.signAndSendTransaction(transaction);\n\n            return {\n                status: \"success\",\n                data: {\n                    signature: signature,\n                }\n            }\n        } catch (e) {\n            throw e;\n        }\n    }\n\n}"],"mappings":"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"}