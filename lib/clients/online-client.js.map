{"version":3,"file":"online-client.js","names":["DcaOnlineClient","params","connection","commitment","preflightCommitment","_wallet","wallet","txn","signers","publicKey","WalletNotConnectedError","_connection","getLatestBlockhash","blockhash","recentBlockhash","lastValidBlockHeight","feePayer","partialSign","signTransaction","signedTxn","sendRawTransaction","serialize","_preflightCommitment","skipPreflight","signature","confirmTransaction","_commitment","owner","mint","amount","makeDepositTokenTransaction","transaction","signAndSendTransaction","status","data","tokenMintFrom","tokenMintTo","startTime","dcaAmount","frequency","makeInitializeTransaction","dcaAccount","makeWithdrawTokenTransaction","makeSwapTransaction","DcaClient"],"sources":["../../src/clients/online-client.ts"],"sourcesContent":["import BN from \"bn.js\";\n\nimport { WalletNotConnectedError } from \"@solana/wallet-adapter-base\";\nimport { Commitment, Connection, PublicKey, Signer, Transaction } from \"@solana/web3.js\";\n\nimport { Amount, MintAmount } from \"../models\";\nimport { DcaClient, IWalletAdapter } from \"./base\";\n\nexport class DcaOnlineClient extends DcaClient {\n\tprivate _wallet: IWalletAdapter;\n\tconstructor(params: {\n\t\twallet: IWalletAdapter;\n\t\tconnection: Connection;\n\t\tcommitment: Commitment;\n\t\tpreflightCommitment: Commitment;\n\t}) {\n\t\tsuper({\n\t\t\tconnection: params.connection,\n\t\t\tcommitment: params.commitment,\n\t\t\tpreflightCommitment: params.preflightCommitment,\n\t\t});\n\t\tthis._wallet = params.wallet;\n\t}\n\n\tprivate async signAndSendTransaction(txn: Transaction, signers?: Signer[]): Promise<string> {\n\t\ttry {\n\t\t\tif (!this._wallet.publicKey) {\n\t\t\t\tthrow new WalletNotConnectedError(\"No wallet is connected.\");\n\t\t\t}\n\t\t\tconst blockhash = await this._connection.getLatestBlockhash();\n\t\t\ttxn.recentBlockhash = blockhash.blockhash;\n\t\t\ttxn.lastValidBlockHeight = blockhash.lastValidBlockHeight;\n\t\t\ttxn.feePayer = this._wallet.publicKey;\n\t\t\tif (signers) {\n\t\t\t\ttxn.partialSign(...signers);\n\t\t\t}\n\t\t\tconst signedTxn = await this._wallet.signTransaction(txn);\n\t\t\tconst signature = await this._connection.sendRawTransaction(signedTxn.serialize(), {\n\t\t\t\tpreflightCommitment: this._preflightCommitment,\n\t\t\t\tskipPreflight: false,\n\t\t\t});\n\t\t\tawait this._connection.confirmTransaction(\n\t\t\t\t{\n\t\t\t\t\tblockhash: blockhash.blockhash,\n\t\t\t\t\tlastValidBlockHeight: blockhash.lastValidBlockHeight,\n\t\t\t\t\tsignature: signature,\n\t\t\t\t},\n\t\t\t\tthis._commitment,\n\t\t\t);\n\t\t\treturn signature;\n\t\t} catch (error) {\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t/**\n\t * Deposit non-native token in dca program vault\n\t */\n\tasync depositToken(owner: PublicKey, mint: PublicKey, amount: Amount | MintAmount) {\n\t\ttry {\n\t\t\tconst { transaction } = await this.makeDepositTokenTransaction(owner, mint, amount);\n\n\t\t\tconst signature = await this.signAndSendTransaction(transaction);\n\n\t\t\treturn {\n\t\t\t\tstatus: \"success\",\n\t\t\t\tdata: {\n\t\t\t\t\tsignature: signature,\n\t\t\t\t},\n\t\t\t};\n\t\t} catch (e) {\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\t/**\n\t * Intialize dca process\n\t */\n\tasync initialize(\n\t\towner: PublicKey,\n\t\ttokenMintFrom: PublicKey,\n\t\ttokenMintTo: PublicKey,\n\t\tstartTime: BN,\n\t\tdcaAmount: Amount | MintAmount,\n\t\tfrequency: BN,\n\t) {\n\t\ttry {\n\t\t\tconst { transaction, dcaAccount } = await this.makeInitializeTransaction(\n\t\t\t\towner,\n\t\t\t\ttokenMintFrom,\n\t\t\t\ttokenMintTo,\n\t\t\t\tstartTime,\n\t\t\t\tdcaAmount,\n\t\t\t\tfrequency,\n\t\t\t);\n\n\t\t\tconst signature = await this.signAndSendTransaction(transaction, [dcaAccount]);\n\n\t\t\treturn {\n\t\t\t\tstatus: \"success\",\n\t\t\t\tdata: {\n\t\t\t\t\tsignature: signature,\n\t\t\t\t\tdcaAccount: dcaAccount.publicKey,\n\t\t\t\t},\n\t\t\t};\n\t\t} catch (e) {\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\t/**\n\t * Withdraw non-native token from vault\n\t */\n\tasync withdrawToken(owner: PublicKey, mint: PublicKey, amount: Amount | MintAmount) {\n\t\ttry {\n\t\t\tconst { transaction } = await this.makeWithdrawTokenTransaction(owner, mint, amount);\n\n\t\t\tconst signature = await this.signAndSendTransaction(transaction);\n\n\t\t\treturn {\n\t\t\t\tstatus: \"success\",\n\t\t\t\tdata: {\n\t\t\t\t\tsignature: signature,\n\t\t\t\t},\n\t\t\t};\n\t\t} catch (e) {\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\t/**\n\t * Swap token from sol\n\t */\n\tasync swap(owner: PublicKey, tokenMintFrom: PublicKey, tokenMintTo: PublicKey, dcaAccount: PublicKey) {\n\t\ttry {\n\t\t\tconst { transaction } = await this.makeSwapTransaction(owner, tokenMintFrom, tokenMintTo, dcaAccount);\n\n\t\t\tconst signature = await this.signAndSendTransaction(transaction);\n\n\t\t\treturn {\n\t\t\t\tstatus: \"success\",\n\t\t\t\tdata: {\n\t\t\t\t\tsignature: signature,\n\t\t\t\t},\n\t\t\t};\n\t\t} catch (e) {\n\t\t\tthrow e;\n\t\t}\n\t}\n}\n"],"mappings":"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"}