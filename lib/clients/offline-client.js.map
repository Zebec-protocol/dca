{"version":3,"file":"offline-client.js","names":["DcaOfflineClient","params","connection","commitment","preflightCommitment","_payer","payer","txn","signers","_connection","getLatestBlockhash","blockhash","recentBlockhash","lastValidBlockHeight","sendTransaction","_commitment","skipPreflight","signature","confirmTransaction","owner","mint","amount","makeDepositTokenTransaction","transaction","dcaAccount","status","data","makeDepositSolTransaction","startTime","dcaAmount","dcaTime","makeInitializeTransaction","makeWithdrawTokenTransaction","makeWithdrawSolTransaction","makeSwapFromSolTransaction","makeSwapToSolTransaction","makeFundTokenTransaction","makeFundSolTransaction","DcaClient"],"sources":["../../src/clients/offline-client.ts"],"sourcesContent":["import { Commitment, Connection, Keypair, PublicKey, Signer, Transaction } from \"@solana/web3.js\";\nimport BigNumber from \"bignumber.js\";\nimport { DcaClient } from \"./base\";\n\n\nexport class DcaOfflineClient extends DcaClient {\n    private _payer: Keypair;\n\n    constructor(params: {\n        connection: Connection,\n        commitment: Commitment,\n        preflightCommitment: Commitment\n        payer: Keypair\n    }) {\n        super({\n            connection: params.connection,\n            commitment: params.commitment,\n            preflightCommitment: params.preflightCommitment\n        });\n        this._payer = params.payer;\n    }\n\n    private async sendTransaction(txn: Transaction, signers: Signer[]): Promise<string> {\n        try {\n            const blockhash = await this._connection.getLatestBlockhash();\n            txn.recentBlockhash = blockhash.blockhash;\n            txn.lastValidBlockHeight = blockhash.lastValidBlockHeight;\n            const signature = await this._connection.sendTransaction(\n                txn,\n                signers,\n                {\n                    preflightCommitment: this._commitment,\n                    skipPreflight: false\n                }\n            );\n            await this._connection.confirmTransaction(\n                {\n                    blockhash: blockhash.blockhash,\n                    lastValidBlockHeight: blockhash.lastValidBlockHeight,\n                    signature: signature\n                },\n                this._commitment\n            );\n            return signature;\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    /**\n      * Deposit non-native token in dca program vault\n      */\n    async depositToken(owner: PublicKey, mint: PublicKey, amount: BigNumber) {\n        try {\n            const { transaction, dcaAccount } = await this.makeDepositTokenTransaction(owner, mint, amount);\n\n            const signature = await this.sendTransaction(transaction, [this._payer, dcaAccount]);\n\n            return {\n                status: \"success\",\n                data: {\n                    signature: signature,\n                    dcaAccount: dcaAccount\n                }\n            }\n        } catch (e) {\n            throw e;\n        }\n    }\n\n    /**\n     * Deposit sol in dca vault\n     */\n    async depositSol(owner: PublicKey, mint: PublicKey, amount: BigNumber) {\n        try {\n            const { transaction, dcaAccount } = await this.makeDepositSolTransaction(owner, mint, amount);\n\n            const signature = await this.sendTransaction(transaction, [this._payer, dcaAccount]);\n\n            return {\n                status: \"success\",\n                data: {\n                    signature: signature,\n                    dcaAccount: dcaAccount\n                }\n            }\n        } catch (e) {\n            throw e;\n        }\n    }\n\n    /**\n     * Intialize dca process\n     */\n    async initialize(owner: PublicKey, mint: PublicKey, dcaAccount: PublicKey, startTime: BigNumber, dcaAmount: BigNumber, dcaTime: BigNumber) {\n        try {\n            const transaction = await this.makeInitializeTransaction(owner, mint, dcaAccount, startTime, dcaAmount, dcaTime);\n\n            const signature = await this.sendTransaction(transaction, [this._payer]);\n\n            return {\n                status: \"success\",\n                data: {\n                    signature: signature,\n                }\n            }\n        } catch (e) {\n            throw e;\n        }\n    }\n\n    /**\n     * Withdraw non-native token from vault\n     */\n    async withdrawToken(owner: PublicKey, mint: PublicKey, dcaAccount: PublicKey, amount: BigNumber) {\n        try {\n            const transaction = await this.makeWithdrawTokenTransaction(owner, mint, dcaAccount, amount);\n\n            const signature = await this.sendTransaction(transaction, [this._payer]);\n\n            return {\n                status: \"success\",\n                data: {\n                    signature: signature,\n                }\n            }\n        } catch (e) {\n            throw e;\n        }\n    }\n\n    /**\n     * Withdraw native token from vault\n     */\n    async withdrawSol(owner: PublicKey, mint: PublicKey, dcaAccount: PublicKey, amount: BigNumber) {\n        try {\n            const transaction = await this.makeWithdrawSolTransaction(owner, mint, dcaAccount, amount);\n\n            const signature = await this.sendTransaction(transaction, [this._payer]);\n\n            return {\n                status: \"success\",\n                data: {\n                    signature: signature,\n                }\n            }\n        } catch (e) {\n            throw e;\n        }\n    }\n\n    /**\n     * Swap token from sol\n     */\n    async swapFromSol(owner: PublicKey, mint: PublicKey, dcaAccount: PublicKey) {\n        try {\n            const transaction = await this.makeSwapFromSolTransaction(owner, mint, dcaAccount);\n\n            const signature = await this.sendTransaction(transaction, [this._payer]);\n\n            return {\n                status: \"success\",\n                data: {\n                    signature: signature,\n                }\n            }\n        } catch (e) {\n            throw e;\n        }\n    }\n\n    /**\n     * Swap Token to Sol\n     */\n    async swapToSol(owner: PublicKey, mint: PublicKey, dcaAccount: PublicKey) {\n        const transaction = await this.makeSwapToSolTransaction(owner, mint, dcaAccount);\n\n        const signature = await this.sendTransaction(transaction, [this._payer]);\n\n        return {\n            status: \"success\",\n            data: {\n                signature: signature,\n            },\n        }\n    }\n\n    /**\n     * Fund non-native token to existing vault\n     */\n    async fundToken(owner: PublicKey, mint: PublicKey, dcaAccount: PublicKey, amount: BigNumber) {\n        try {\n            const transaction = await this.makeFundTokenTransaction(owner, mint, dcaAccount, amount);\n\n            const signature = await this.sendTransaction(transaction, [this._payer]);\n\n            return {\n                status: \"success\",\n                data: {\n                    signature: signature,\n                }\n            }\n        } catch (e) {\n            throw e;\n        }\n    }\n\n    /**\n     * Fund native token to existing vault\n     */\n    async fundSol(owner: PublicKey, mint: PublicKey, dcaAccount: PublicKey, amount: BigNumber) {\n        try {\n            const transaction = await this.makeFundSolTransaction(owner, mint, dcaAccount, amount);\n\n            const signature = this.sendTransaction(transaction, [this._payer]);\n\n            return {\n                status: \"success\",\n                data: {\n                    signature: signature,\n                }\n            }\n        } catch (e) {\n            throw e;\n        }\n    }\n}"],"mappings":"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"}