{"version":3,"file":"offline-client.js","names":["DcaOfflineClient","params","connection","commitment","preflightCommitment","_payer","payer","txn","signers","_connection","getLatestBlockhash","blockhash","recentBlockhash","lastValidBlockHeight","sign","sendRawTransaction","serialize","_commitment","skipPreflight","signature","confirmTransaction","owner","mint","amount","makeDepositTokenTransaction","transaction","dcaAccount","sendTransaction","status","data","publicKey","makeDepositSolTransaction","startTime","dcaAmount","dcaTime","makeInitializeTransaction","makeWithdrawTokenTransaction","makeWithdrawSolTransaction","makeSwapFromSolTransaction","makeSwapToSolTransaction","makeFundTokenTransaction","makeFundSolTransaction","DcaClient"],"sources":["../../src/clients/offline-client.ts"],"sourcesContent":["import BigNumber from \"bignumber.js\";\n\nimport { Commitment, Connection, PublicKey, Signer, Transaction } from \"@solana/web3.js\";\n\nimport { DcaClient } from \"./base\";\n\nexport class DcaOfflineClient extends DcaClient {\n\tprivate _payer: Signer;\n\n\tconstructor(params: {\n\t\tconnection: Connection;\n\t\tcommitment: Commitment;\n\t\tpreflightCommitment: Commitment;\n\t\tpayer: Signer;\n\t}) {\n\t\tsuper({\n\t\t\tconnection: params.connection,\n\t\t\tcommitment: params.commitment,\n\t\t\tpreflightCommitment: params.preflightCommitment,\n\t\t});\n\t\tthis._payer = params.payer;\n\t}\n\n\tprivate async sendTransaction(txn: Transaction, signers: Signer[]): Promise<string> {\n\t\ttry {\n\t\t\tconst blockhash = await this._connection.getLatestBlockhash();\n\t\t\ttxn.recentBlockhash = blockhash.blockhash;\n\t\t\ttxn.lastValidBlockHeight = blockhash.lastValidBlockHeight;\n\t\t\ttxn.sign(...signers);\n\t\t\tconst signature = await this._connection.sendRawTransaction(txn.serialize(), {\n\t\t\t\tpreflightCommitment: this._commitment,\n\t\t\t\tskipPreflight: false,\n\t\t\t});\n\t\t\tawait this._connection.confirmTransaction(\n\t\t\t\t{\n\t\t\t\t\tblockhash: blockhash.blockhash,\n\t\t\t\t\tlastValidBlockHeight: blockhash.lastValidBlockHeight,\n\t\t\t\t\tsignature: signature,\n\t\t\t\t},\n\t\t\t\tthis._commitment,\n\t\t\t);\n\t\t\treturn signature;\n\t\t} catch (error) {\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t/**\n\t * Deposit non-native token in dca program vault\n\t */\n\tasync depositToken(owner: PublicKey, mint: PublicKey, amount: BigNumber) {\n\t\ttry {\n\t\t\tconst { transaction, dcaAccount } = await this.makeDepositTokenTransaction(owner, mint, amount);\n\n\t\t\tconst signature = await this.sendTransaction(transaction, [this._payer, dcaAccount]);\n\n\t\t\treturn {\n\t\t\t\tstatus: \"success\",\n\t\t\t\tdata: {\n\t\t\t\t\tsignature: signature,\n\t\t\t\t\tdcaAccount: dcaAccount.publicKey,\n\t\t\t\t},\n\t\t\t};\n\t\t} catch (e) {\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\t/**\n\t * Deposit sol in dca vault\n\t */\n\tasync depositSol(owner: PublicKey, mint: PublicKey, amount: BigNumber) {\n\t\ttry {\n\t\t\tconst { transaction, dcaAccount } = await this.makeDepositSolTransaction(owner, mint, amount);\n\n\t\t\tconst signature = await this.sendTransaction(transaction, [this._payer, dcaAccount]);\n\n\t\t\treturn {\n\t\t\t\tstatus: \"success\",\n\t\t\t\tdata: {\n\t\t\t\t\tsignature: signature,\n\t\t\t\t\tdcaAccount: dcaAccount.publicKey,\n\t\t\t\t},\n\t\t\t};\n\t\t} catch (e) {\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\t/**\n\t * Intialize dca process\n\t */\n\tasync initialize(\n\t\towner: PublicKey,\n\t\tmint: PublicKey,\n\t\tdcaAccount: PublicKey,\n\t\tstartTime: BigNumber,\n\t\tdcaAmount: BigNumber,\n\t\tdcaTime: BigNumber,\n\t) {\n\t\ttry {\n\t\t\tconst transaction = await this.makeInitializeTransaction(owner, mint, dcaAccount, startTime, dcaAmount, dcaTime);\n\n\t\t\tconst signature = await this.sendTransaction(transaction, [this._payer]);\n\n\t\t\treturn {\n\t\t\t\tstatus: \"success\",\n\t\t\t\tdata: {\n\t\t\t\t\tsignature: signature,\n\t\t\t\t},\n\t\t\t};\n\t\t} catch (e) {\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\t/**\n\t * Withdraw non-native token from vault\n\t */\n\tasync withdrawToken(owner: PublicKey, mint: PublicKey, dcaAccount: PublicKey, amount: BigNumber) {\n\t\ttry {\n\t\t\tconst transaction = await this.makeWithdrawTokenTransaction(owner, mint, dcaAccount, amount);\n\n\t\t\tconst signature = await this.sendTransaction(transaction, [this._payer]);\n\n\t\t\treturn {\n\t\t\t\tstatus: \"success\",\n\t\t\t\tdata: {\n\t\t\t\t\tsignature: signature,\n\t\t\t\t},\n\t\t\t};\n\t\t} catch (e) {\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\t/**\n\t * Withdraw native token from vault\n\t */\n\tasync withdrawSol(owner: PublicKey, mint: PublicKey, dcaAccount: PublicKey, amount: BigNumber) {\n\t\ttry {\n\t\t\tconst transaction = await this.makeWithdrawSolTransaction(owner, mint, dcaAccount, amount);\n\n\t\t\tconst signature = await this.sendTransaction(transaction, [this._payer]);\n\n\t\t\treturn {\n\t\t\t\tstatus: \"success\",\n\t\t\t\tdata: {\n\t\t\t\t\tsignature: signature,\n\t\t\t\t},\n\t\t\t};\n\t\t} catch (e) {\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\t/**\n\t * Swap token from sol\n\t */\n\tasync swapFromSol(owner: PublicKey, mint: PublicKey, dcaAccount: PublicKey) {\n\t\ttry {\n\t\t\tconst transaction = await this.makeSwapFromSolTransaction(owner, mint, dcaAccount);\n\n\t\t\tconst signature = await this.sendTransaction(transaction, [this._payer]);\n\n\t\t\treturn {\n\t\t\t\tstatus: \"success\",\n\t\t\t\tdata: {\n\t\t\t\t\tsignature: signature,\n\t\t\t\t},\n\t\t\t};\n\t\t} catch (e) {\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\t/**\n\t * Swap Token to Sol\n\t */\n\tasync swapToSol(owner: PublicKey, mint: PublicKey, dcaAccount: PublicKey) {\n\t\tconst transaction = await this.makeSwapToSolTransaction(owner, mint, dcaAccount);\n\n\t\tconst signature = await this.sendTransaction(transaction, [this._payer]);\n\n\t\treturn {\n\t\t\tstatus: \"success\",\n\t\t\tdata: {\n\t\t\t\tsignature: signature,\n\t\t\t},\n\t\t};\n\t}\n\n\t/**\n\t * Fund non-native token to existing vault\n\t */\n\tasync fundToken(owner: PublicKey, mint: PublicKey, dcaAccount: PublicKey, amount: BigNumber) {\n\t\ttry {\n\t\t\tconst transaction = await this.makeFundTokenTransaction(owner, mint, dcaAccount, amount);\n\n\t\t\tconst signature = await this.sendTransaction(transaction, [this._payer]);\n\n\t\t\treturn {\n\t\t\t\tstatus: \"success\",\n\t\t\t\tdata: {\n\t\t\t\t\tsignature: signature,\n\t\t\t\t},\n\t\t\t};\n\t\t} catch (e) {\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\t/**\n\t * Fund native token to existing vault\n\t */\n\tasync fundSol(owner: PublicKey, mint: PublicKey, dcaAccount: PublicKey, amount: BigNumber) {\n\t\ttry {\n\t\t\tconst transaction = await this.makeFundSolTransaction(owner, mint, dcaAccount, amount);\n\n\t\t\tconst signature = await this.sendTransaction(transaction, [this._payer]);\n\n\t\t\treturn {\n\t\t\t\tstatus: \"success\",\n\t\t\t\tdata: {\n\t\t\t\t\tsignature: signature,\n\t\t\t\t},\n\t\t\t};\n\t\t} catch (e) {\n\t\t\tthrow e;\n\t\t}\n\t}\n}\n"],"mappings":"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"}