{"version":3,"file":"offline-client.js","names":["DcaOfflineClient","params","connection","commitment","preflightCommitment","_payer","payer","txn","signers","_connection","getLatestBlockhash","blockhash","recentBlockhash","lastValidBlockHeight","feePayer","publicKey","sendTransaction","_commitment","skipPreflight","signature","confirmTransaction","owner","mint","amount","makeDepositTokenTransaction","transaction","status","data","tokenMintFrom","tokenMintTo","startTime","dcaAmount","frequency","makeInitializeTransaction","dcaAccount","makeWithdrawTokenTransaction","makeSwapTransaction","DcaClient"],"sources":["../../src/clients/offline-client.ts"],"sourcesContent":["import BN from \"bn.js\";\n\nimport { Commitment, Connection, PublicKey, Signer, Transaction } from \"@solana/web3.js\";\n\nimport { Amount, MintAmount } from \"../models\";\nimport { DcaClient } from \"./base\";\n\nexport class DcaOfflineClient extends DcaClient {\n\tprivate _payer: Signer;\n\n\tconstructor(params: {\n\t\tconnection: Connection;\n\t\tcommitment: Commitment;\n\t\tpreflightCommitment: Commitment;\n\t\tpayer: Signer;\n\t}) {\n\t\tsuper({\n\t\t\tconnection: params.connection,\n\t\t\tcommitment: params.commitment,\n\t\t\tpreflightCommitment: params.preflightCommitment,\n\t\t});\n\t\tthis._payer = params.payer;\n\t}\n\n\tprivate async sendTransaction(txn: Transaction, signers: Signer[]): Promise<string> {\n\t\ttry {\n\t\t\tconst blockhash = await this._connection.getLatestBlockhash();\n\t\t\ttxn.recentBlockhash = blockhash.blockhash;\n\t\t\ttxn.lastValidBlockHeight = blockhash.lastValidBlockHeight;\n\t\t\ttxn.feePayer = this._payer.publicKey;\n\n\t\t\tconst signature = await this._connection.sendTransaction(txn, signers, {\n\t\t\t\tpreflightCommitment: this._commitment,\n\t\t\t\tskipPreflight: false,\n\t\t\t});\n\t\t\tawait this._connection.confirmTransaction(\n\t\t\t\t{\n\t\t\t\t\tblockhash: blockhash.blockhash,\n\t\t\t\t\tlastValidBlockHeight: blockhash.lastValidBlockHeight,\n\t\t\t\t\tsignature: signature,\n\t\t\t\t},\n\t\t\t\tthis._commitment,\n\t\t\t);\n\t\t\treturn signature;\n\t\t} catch (error) {\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t/**\n\t * Deposit non-native token in dca program vault\n\t */\n\tasync depositToken(owner: PublicKey, mint: PublicKey, amount: Amount | MintAmount) {\n\t\ttry {\n\t\t\tconst { transaction } = await this.makeDepositTokenTransaction(owner, mint, amount);\n\n\t\t\tconst signature = await this.sendTransaction(transaction, [this._payer]);\n\n\t\t\treturn {\n\t\t\t\tstatus: \"success\",\n\t\t\t\tdata: {\n\t\t\t\t\tsignature: signature,\n\t\t\t\t},\n\t\t\t};\n\t\t} catch (e) {\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\t/**\n\t * Intialize dca process\n\t */\n\tasync initialize(\n\t\towner: PublicKey,\n\t\ttokenMintFrom: PublicKey,\n\t\ttokenMintTo: PublicKey,\n\t\tstartTime: BN,\n\t\tdcaAmount: Amount | MintAmount,\n\t\tfrequency: BN,\n\t) {\n\t\ttry {\n\t\t\tconst { transaction, dcaAccount } = await this.makeInitializeTransaction(\n\t\t\t\towner,\n\t\t\t\ttokenMintFrom,\n\t\t\t\ttokenMintTo,\n\t\t\t\tstartTime,\n\t\t\t\tdcaAmount,\n\t\t\t\tfrequency,\n\t\t\t);\n\n\t\t\tconst signature = await this.sendTransaction(transaction, [this._payer, dcaAccount]);\n\n\t\t\treturn {\n\t\t\t\tstatus: \"success\",\n\t\t\t\tdata: {\n\t\t\t\t\tsignature: signature,\n\t\t\t\t\tdcaAccount: dcaAccount.publicKey,\n\t\t\t\t},\n\t\t\t};\n\t\t} catch (e) {\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\t/**\n\t * Withdraw non-native token from vault\n\t */\n\tasync withdrawToken(owner: PublicKey, mint: PublicKey, amount: Amount | MintAmount) {\n\t\ttry {\n\t\t\tconst { transaction } = await this.makeWithdrawTokenTransaction(owner, mint, amount);\n\n\t\t\tconst signature = await this.sendTransaction(transaction, [this._payer]);\n\n\t\t\treturn {\n\t\t\t\tstatus: \"success\",\n\t\t\t\tdata: {\n\t\t\t\t\tsignature: signature,\n\t\t\t\t},\n\t\t\t};\n\t\t} catch (e) {\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\t/**\n\t * Swap token from sol\n\t */\n\tasync swap(owner: PublicKey, tokenMintFrom: PublicKey, tokenMintTo: PublicKey, dcaAccount: PublicKey) {\n\t\ttry {\n\t\t\tconst { transaction } = await this.makeSwapTransaction(owner, tokenMintFrom, tokenMintTo, dcaAccount);\n\n\t\t\tconst signature = await this.sendTransaction(transaction, [this._payer]);\n\n\t\t\treturn {\n\t\t\t\tstatus: \"success\",\n\t\t\t\tdata: {\n\t\t\t\t\tsignature: signature,\n\t\t\t\t},\n\t\t\t};\n\t\t} catch (e) {\n\t\t\tthrow e;\n\t\t}\n\t}\n}\n"],"mappings":"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"}