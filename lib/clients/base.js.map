{"version":3,"file":"base.js","names":["DcaClient","params","_commitment","commitment","_connection","connection","_preflightCommitment","preflightCommitment","owner","mint","amount","dcaAccount","Keypair","generate","findVaultAddress","publicKey","vault","findAssociatedTokenAddress","ownerTokenAccount","vaultTokenAccount","NATIVE_MINT","vaultNativeMintAddress","getMintInfo","mintInfo","_amount","convertToLamports","decimals","txn","Transaction","add","DcaInstruction","depositToken","feePayer","transaction","vaultAddress","depositSol","flag","startTime","dcaAmount","dcaTime","_startTime","BN","toFixed","_dcaTime","_dcaAmount","DcaFlag","minimumAmountOut","initialize","vaultTokenAddress","transferAmount","withdrawToken","ownerNativeMintAccount","withdrawSol","vaultNativeMintAccount","findPoolIdByBaseAndQuoteMint","poolKeyId","fetchPoolKeys","PublicKey","poolKeys","Liquidity","fetchInfo","poolInfo","DcaAccount","getDcaAccountInfo","dcaInfo","toString","Error","console","log","uiAmount","BigNumber","div","LAMPORTS_PER_SOL","baseDecimals","amountIn","TokenAmount","Token","baseMint","currencyOut","quoteMint","quoteDecimals","slippage","Percent","computeAmountOut","minAmountOut","raw","toArray","swapFromSol","programId","id","authority","openOrders","targetOrders","baseVault","quoteVault","marketProgramId","marketId","marketBids","marketAsks","marketEventQueue","marketBaseVault","marketQuoteVault","marketAuthority","swapToSol","fundToken","fundSol"],"sources":["../../src/clients/base.ts"],"sourcesContent":["import BigNumber from \"bignumber.js\";\nimport BN from \"bn.js\";\n\nimport { Liquidity, Percent, Token, TokenAmount } from \"@raydium-io/raydium-sdk\";\nimport { NATIVE_MINT } from \"@solana/spl-token\";\nimport { Commitment, Connection, Keypair, LAMPORTS_PER_SOL, PublicKey, Transaction } from \"@solana/web3.js\";\n\nimport { DcaInstruction } from \"../instruction\";\nimport { DcaAccount, DcaFlag } from \"../models/dca-account\";\nimport {\n\tconvertToLamports,\n\tfetchPoolKeys,\n\tfindAssociatedTokenAddress,\n\tfindPoolIdByBaseAndQuoteMint,\n\tfindVaultAddress,\n\tgetMintInfo,\n} from \"../utils\";\n\nexport interface IWalletAdapter {\n\tpublicKey: PublicKey;\n\tsignTransaction(transaction: Transaction): Promise<Transaction>;\n\tsignAllTransactions(transactions: Transaction[]): Promise<Transaction[]>;\n}\n\nexport abstract class DcaClient {\n\tprotected _connection: Connection;\n\tprotected _commitment: Commitment;\n\tprotected _preflightCommitment: Commitment;\n\n\tconstructor(params: { connection: Connection; commitment: Commitment; preflightCommitment: Commitment }) {\n\t\tthis._commitment = params.commitment;\n\t\tthis._connection = params.connection;\n\t\tthis._preflightCommitment = params.preflightCommitment;\n\t}\n\n\tprotected async makeDepositTokenTransaction(owner: PublicKey, mint: PublicKey, amount: BigNumber) {\n\t\ttry {\n\t\t\tlet dcaAccount = Keypair.generate();\n\t\t\tconst vault = await findVaultAddress(owner, dcaAccount.publicKey);\n\t\t\tconst ownerTokenAccount = await findAssociatedTokenAddress(owner, mint);\n\t\t\tconst vaultTokenAccount = await findAssociatedTokenAddress(vault, mint);\n\t\t\tconst vaultNativeMintAddress = await findAssociatedTokenAddress(vault, NATIVE_MINT);\n\n\t\t\tconst mintInfo = await getMintInfo(this._connection, mint);\n\t\t\tconst _amount = convertToLamports(amount, mintInfo.decimals);\n\n\t\t\tlet txn = new Transaction().add(\n\t\t\t\tDcaInstruction.depositToken(\n\t\t\t\t\towner,\n\t\t\t\t\tvault,\n\t\t\t\t\tmint,\n\t\t\t\t\tNATIVE_MINT,\n\t\t\t\t\townerTokenAccount,\n\t\t\t\t\tvaultTokenAccount,\n\t\t\t\t\tvaultNativeMintAddress,\n\t\t\t\t\tdcaAccount.publicKey,\n\t\t\t\t\t_amount,\n\t\t\t\t),\n\t\t\t);\n\t\t\ttxn.feePayer = owner;\n\n\t\t\treturn {\n\t\t\t\ttransaction: txn,\n\t\t\t\tdcaAccount: dcaAccount,\n\t\t\t};\n\t\t} catch (e) {\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\tprotected async makeDepositSolTransaction(owner: PublicKey, mint: PublicKey, amount: BigNumber) {\n\t\ttry {\n\t\t\tlet dcaAccount = Keypair.generate();\n\t\t\tconst vaultAddress = await findVaultAddress(owner, dcaAccount.publicKey);\n\t\t\tconst ownerTokenAccount = await findAssociatedTokenAddress(owner, mint);\n\t\t\tconst vaultTokenAccount = await findAssociatedTokenAddress(vaultAddress, mint);\n\t\t\tconst vaultNativeMintAddress = await findAssociatedTokenAddress(vaultAddress, NATIVE_MINT);\n\n\t\t\tconst _amount = convertToLamports(amount);\n\n\t\t\tlet txn = new Transaction().add(\n\t\t\t\tDcaInstruction.depositSol(\n\t\t\t\t\towner,\n\t\t\t\t\tvaultAddress,\n\t\t\t\t\tmint,\n\t\t\t\t\tNATIVE_MINT,\n\t\t\t\t\townerTokenAccount,\n\t\t\t\t\tvaultNativeMintAddress,\n\t\t\t\t\tvaultTokenAccount,\n\t\t\t\t\tdcaAccount.publicKey,\n\t\t\t\t\t_amount,\n\t\t\t\t),\n\t\t\t);\n\t\t\ttxn.feePayer = owner;\n\n\t\t\treturn {\n\t\t\t\ttransaction: txn,\n\t\t\t\tdcaAccount: dcaAccount,\n\t\t\t};\n\t\t} catch (e) {\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\tprotected async makeInitializeTransaction(\n\t\towner: PublicKey,\n\t\tmint: PublicKey,\n\t\tdcaAccount: PublicKey,\n\t\tflag: DcaFlag,\n\t\tstartTime: BigNumber,\n\t\tdcaAmount: BigNumber,\n\t\tdcaTime: BigNumber,\n\t) {\n\t\ttry {\n\t\t\tconst vault = await findVaultAddress(owner, dcaAccount);\n\t\t\tconst _startTime = new BN(startTime.toFixed());\n\t\t\tconst _dcaTime = new BN(dcaTime.toFixed());\n\t\t\tlet _dcaAmount = new BN(0);\n\t\t\tif (flag == DcaFlag[\"MINT-SOL\"]) {\n\t\t\t\tconst mintInfo = await getMintInfo(this._connection, mint);\n\t\t\t\t_dcaAmount = convertToLamports(dcaAmount, mintInfo.decimals);\n\t\t\t} else {\n\t\t\t\t_dcaAmount = convertToLamports(dcaAmount);\n\t\t\t}\n\t\t\tconst minimumAmountOut = _dcaAmount;\n\n\t\t\tlet txn = new Transaction().add(\n\t\t\t\tDcaInstruction.initialize(owner, vault, dcaAccount, _startTime, _dcaAmount, _dcaTime, minimumAmountOut),\n\t\t\t);\n\n\t\t\treturn txn;\n\t\t} catch (e) {\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\tprotected async makeWithdrawTokenTransaction(\n\t\towner: PublicKey,\n\t\tmint: PublicKey,\n\t\tdcaAccount: PublicKey,\n\t\tamount: BigNumber,\n\t) {\n\t\ttry {\n\t\t\tconst vaultAddress = await findVaultAddress(owner, dcaAccount);\n\t\t\tconst ownerTokenAccount = await findAssociatedTokenAddress(owner, mint);\n\t\t\tconst vaultTokenAddress = await findAssociatedTokenAddress(vaultAddress, mint);\n\t\t\tconst mintInfo = await getMintInfo(this._connection, mint);\n\t\t\tconst transferAmount = convertToLamports(amount, mintInfo.decimals);\n\n\t\t\tlet txn = new Transaction().add(\n\t\t\t\tDcaInstruction.withdrawToken(\n\t\t\t\t\towner,\n\t\t\t\t\tvaultAddress,\n\t\t\t\t\tmint,\n\t\t\t\t\townerTokenAccount,\n\t\t\t\t\tvaultTokenAddress,\n\t\t\t\t\tdcaAccount,\n\t\t\t\t\ttransferAmount,\n\t\t\t\t),\n\t\t\t);\n\n\t\t\treturn txn;\n\t\t} catch (e) {\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\tprotected async makeWithdrawSolTransaction(\n\t\towner: PublicKey,\n\t\tmint: PublicKey,\n\t\tdcaAccount: PublicKey,\n\t\tamount: BigNumber,\n\t) {\n\t\ttry {\n\t\t\tconst vaultAddress = await findVaultAddress(owner, dcaAccount);\n\t\t\tconst ownerTokenAccount = await findAssociatedTokenAddress(owner, mint);\n\t\t\tconst ownerNativeMintAccount = await findAssociatedTokenAddress(owner, NATIVE_MINT);\n\t\t\tconst vaultTokenAddress = await findAssociatedTokenAddress(vaultAddress, mint);\n\t\t\tconst vaultNativeMintAddress = await findAssociatedTokenAddress(vaultAddress, NATIVE_MINT);\n\t\t\tconst transferAmount = convertToLamports(amount);\n\n\t\t\tlet txn = new Transaction().add(\n\t\t\t\tDcaInstruction.withdrawSol(\n\t\t\t\t\towner,\n\t\t\t\t\tvaultAddress,\n\t\t\t\t\tmint,\n\t\t\t\t\townerTokenAccount,\n\t\t\t\t\tvaultTokenAddress,\n\t\t\t\t\tdcaAccount,\n\t\t\t\t\tNATIVE_MINT,\n\t\t\t\t\tvaultNativeMintAddress,\n\t\t\t\t\townerNativeMintAccount,\n\t\t\t\t\ttransferAmount,\n\t\t\t\t),\n\t\t\t);\n\n\t\t\treturn txn;\n\t\t} catch (e) {\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\tprotected async makeSwapFromSolTransaction(owner: PublicKey, mint: PublicKey, dcaAccount: PublicKey) {\n\t\ttry {\n\t\t\tconst vault = await findVaultAddress(owner, dcaAccount);\n\t\t\tconst vaultNativeMintAccount = await findAssociatedTokenAddress(vault, NATIVE_MINT);\n\t\t\tconst vaultTokenAccount = await findAssociatedTokenAddress(vault, mint);\n\t\t\tconst poolKeyId = await findPoolIdByBaseAndQuoteMint(NATIVE_MINT, mint);\n\t\t\tconst poolKeys = await fetchPoolKeys(this._connection, new PublicKey(poolKeyId));\n\t\t\tconst poolInfo = await Liquidity.fetchInfo({\n\t\t\t\tconnection: this._connection,\n\t\t\t\tpoolKeys,\n\t\t\t});\n\t\t\tconst dcaInfo = await DcaAccount.getDcaAccountInfo(this._connection, dcaAccount);\n\t\t\tif (dcaInfo.dcaAmount.toString() === \"0\") {\n\t\t\t\tthrow new Error(\"Dca amount is zero\");\n\t\t\t}\n\t\t\tconsole.log(dcaInfo.dcaAmount.toString());\n\t\t\tconst uiAmount = new BigNumber(dcaInfo.dcaAmount.toString()).div(new BigNumber(LAMPORTS_PER_SOL));\n\t\t\tconsole.log(uiAmount.toFixed());\n\t\t\tconsole.log(poolInfo.baseDecimals);\n\t\t\tconst amountIn = new TokenAmount(new Token(poolKeys.baseMint, poolInfo.baseDecimals), uiAmount.toFixed(), false);\n\t\t\tconst currencyOut = new Token(poolKeys.quoteMint, poolInfo.quoteDecimals);\n\t\t\tconst slippage = new Percent(3, 100);\n\t\t\tconst { minAmountOut } = Liquidity.computeAmountOut({\n\t\t\t\tpoolKeys,\n\t\t\t\tpoolInfo,\n\t\t\t\tamountIn,\n\t\t\t\tcurrencyOut,\n\t\t\t\tslippage,\n\t\t\t});\n\n\t\t\tconsole.log(minAmountOut.raw.toArray());\n\n\t\t\tlet txn = new Transaction().add(\n\t\t\t\tDcaInstruction.swapFromSol(\n\t\t\t\t\tpoolKeys.programId, // liquidityProgramId\n\t\t\t\t\tpoolKeys.id, // ammAddress\n\t\t\t\t\tpoolKeys.authority, // ammAuthorityAddress\n\t\t\t\t\tpoolKeys.openOrders, // ammOpenOrderAddress\n\t\t\t\t\tpoolKeys.targetOrders, // ammTargetOrderAddress\n\t\t\t\t\tpoolKeys.baseVault, // poolCoinTokenAddress\n\t\t\t\t\tpoolKeys.quoteVault, // poolPcTokenAddress\n\t\t\t\t\tpoolKeys.marketProgramId, // serumMarketProgramId\n\t\t\t\t\tpoolKeys.marketId, // serumMarketAddress\n\t\t\t\t\tpoolKeys.marketBids, // serumBidsAddress\n\t\t\t\t\tpoolKeys.marketAsks, // serumAskAddress\n\t\t\t\t\tpoolKeys.marketEventQueue, // serumEventQueueAddress\n\t\t\t\t\tpoolKeys.marketBaseVault, // serumCoinVaultAddress\n\t\t\t\t\tpoolKeys.marketQuoteVault, // serumVaultAddress\n\t\t\t\t\tpoolKeys.marketAuthority, // serumVaultSigner\n\t\t\t\t\tvault,\n\t\t\t\t\tvaultNativeMintAccount,\n\t\t\t\t\tvaultTokenAccount,\n\t\t\t\t\tmint,\n\t\t\t\t\towner,\n\t\t\t\t\tdcaAccount,\n\t\t\t\t\tNATIVE_MINT,\n\t\t\t\t\tminAmountOut.raw,\n\t\t\t\t),\n\t\t\t);\n\n\t\t\treturn txn;\n\t\t} catch (e) {\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\tprotected async makeSwapToSolTransaction(owner: PublicKey, mint: PublicKey, dcaAccount: PublicKey) {\n\t\tconst vault = await findVaultAddress(owner, dcaAccount);\n\t\tconst vaultTokenAccount = await findAssociatedTokenAddress(vault, mint);\n\t\tconst vaultNativeMintAccount = await findAssociatedTokenAddress(vault, NATIVE_MINT);\n\t\tconst poolKeyId = await findPoolIdByBaseAndQuoteMint(mint, NATIVE_MINT);\n\t\tconst poolKeys = await fetchPoolKeys(this._connection, new PublicKey(poolKeyId));\n\t\tconst poolInfo = await Liquidity.fetchInfo({\n\t\t\tconnection: this._connection,\n\t\t\tpoolKeys,\n\t\t});\n\t\tconst dcaInfo = await DcaAccount.getDcaAccountInfo(this._connection, dcaAccount);\n\t\tif (dcaInfo.dcaAmount.toString() === \"0\") {\n\t\t\tthrow new Error(\"Dca amount is zero\");\n\t\t}\n\t\tconst mintInfo = await getMintInfo(this._connection, mint);\n\t\tconst uiAmount = new BigNumber(dcaInfo.dcaAmount.toString()).div(new BigNumber(10 ** mintInfo.decimals));\n\t\tconst amountIn = new TokenAmount(new Token(poolKeys.baseMint, poolInfo.baseDecimals), uiAmount.toString(), false);\n\t\tconst currencyOut = new Token(poolKeys.quoteMint, poolInfo.quoteDecimals);\n\t\tconst slippage = new Percent(3, 100);\n\t\tconst { minAmountOut } = Liquidity.computeAmountOut({\n\t\t\tpoolKeys,\n\t\t\tpoolInfo,\n\t\t\tamountIn,\n\t\t\tcurrencyOut,\n\t\t\tslippage,\n\t\t});\n\t\tconsole.log(minAmountOut.raw.toArray());\n\n\t\tlet txn = new Transaction().add(\n\t\t\tDcaInstruction.swapToSol(\n\t\t\t\tpoolKeys.programId,\n\t\t\t\tpoolKeys.id, // ammAddress\n\t\t\t\tpoolKeys.authority, // ammAuthorityAddress\n\t\t\t\tpoolKeys.openOrders, // ammOpenOrderAddress\n\t\t\t\tpoolKeys.targetOrders, // ammTargetOrderAddress\n\t\t\t\tpoolKeys.baseVault, // poolCoinTokenAddress\n\t\t\t\tpoolKeys.quoteVault, // poolPcTokenAddress\n\t\t\t\tpoolKeys.marketProgramId, // serumMarketProgramId\n\t\t\t\tpoolKeys.marketId, // serumMarketAddress\n\t\t\t\tpoolKeys.marketBids, // serumBidsAddress\n\t\t\t\tpoolKeys.marketAsks, // serumAskAddress\n\t\t\t\tpoolKeys.marketEventQueue, // serumEventQueueAddress\n\t\t\t\tpoolKeys.marketBaseVault, // serumCoinVaultAddress\n\t\t\t\tpoolKeys.marketQuoteVault, // serumVaultAddress\n\t\t\t\tpoolKeys.marketAuthority, // serumVaultSigner\n\t\t\t\tvault,\n\t\t\t\tvaultNativeMintAccount,\n\t\t\t\tvaultTokenAccount,\n\t\t\t\tmint,\n\t\t\t\towner,\n\t\t\t\tdcaAccount,\n\t\t\t\tNATIVE_MINT,\n\t\t\t\tminAmountOut.raw,\n\t\t\t),\n\t\t);\n\n\t\treturn txn;\n\t}\n\n\tprotected async makeFundTokenTransaction(\n\t\towner: PublicKey,\n\t\tmint: PublicKey,\n\t\tdcaAccount: PublicKey,\n\t\tamount: BigNumber,\n\t) {\n\t\ttry {\n\t\t\tconst vault = await findVaultAddress(owner, dcaAccount);\n\t\t\tconst ownerTokenAccount = await findAssociatedTokenAddress(owner, mint);\n\t\t\tconst vaultTokenAccount = await findAssociatedTokenAddress(vault, mint);\n\t\t\tconst mintInfo = await getMintInfo(this._connection, mint);\n\t\t\tconst transferAmount = convertToLamports(amount, mintInfo.decimals);\n\n\t\t\tlet txn = new Transaction().add(\n\t\t\t\tDcaInstruction.fundToken(owner, vault, mint, ownerTokenAccount, vaultTokenAccount, dcaAccount, transferAmount),\n\t\t\t);\n\n\t\t\treturn txn;\n\t\t} catch (e) {\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\tprotected async makeFundSolTransaction(owner: PublicKey, mint: PublicKey, dcaAccount: PublicKey, amount: BigNumber) {\n\t\ttry {\n\t\t\tconst vault = await findVaultAddress(owner, dcaAccount);\n\t\t\tconst ownerTokenAccount = await findAssociatedTokenAddress(owner, mint);\n\t\t\tconst vaultTokenAccount = await findAssociatedTokenAddress(vault, mint);\n\t\t\tconst vaultNativeMintAccount = await findAssociatedTokenAddress(vault, NATIVE_MINT);\n\t\t\tconst transferAmount = convertToLamports(amount);\n\n\t\t\tlet txn = new Transaction().add(\n\t\t\t\tDcaInstruction.fundSol(\n\t\t\t\t\towner,\n\t\t\t\t\tvault,\n\t\t\t\t\tmint,\n\t\t\t\t\tNATIVE_MINT,\n\t\t\t\t\townerTokenAccount,\n\t\t\t\t\tvaultNativeMintAccount,\n\t\t\t\t\tvaultTokenAccount,\n\t\t\t\t\tdcaAccount,\n\t\t\t\t\ttransferAmount,\n\t\t\t\t),\n\t\t\t);\n\n\t\t\treturn txn;\n\t\t} catch (e) {\n\t\t\tthrow e;\n\t\t}\n\t}\n}\n"],"mappings":";;;;;;;;;AAAA;;AACA;;AAEA;;AACA;;AACA;;AAEA;;AACA;;AACA;;;;+CARA,oJ;;;;;;;;;;;;;;IAuBsBA,S;EAKrB,mBAAYC,MAAZ,EAAyG;IAAA;;IAAA;;IAAA;;IAAA;;IACxG,KAAKC,WAAL,GAAmBD,MAAM,CAACE,UAA1B;IACA,KAAKC,WAAL,GAAmBH,MAAM,CAACI,UAA1B;IACA,KAAKC,oBAAL,GAA4BL,MAAM,CAACM,mBAAnC;EACA;;;;;oGAED,iBAA4CC,KAA5C,EAA8DC,IAA9D,EAA+EC,MAA/E;QAAA;;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAEMC,UAFN,GAEmBC,YAAA,CAAQC,QAAR,EAFnB;gBAAA;gBAAA,OAGsB,IAAAC,uBAAA,EAAiBN,KAAjB,EAAwBG,UAAU,CAACI,SAAnC,CAHtB;;cAAA;gBAGQC,KAHR;gBAAA;gBAAA,OAIkC,IAAAC,iCAAA,EAA2BT,KAA3B,EAAkCC,IAAlC,CAJlC;;cAAA;gBAIQS,iBAJR;gBAAA;gBAAA,OAKkC,IAAAD,iCAAA,EAA2BD,KAA3B,EAAkCP,IAAlC,CALlC;;cAAA;gBAKQU,iBALR;gBAAA;gBAAA,OAMuC,IAAAF,iCAAA,EAA2BD,KAA3B,EAAkCI,qBAAlC,CANvC;;cAAA;gBAMQC,sBANR;gBAAA;gBAAA,OAQyB,IAAAC,kBAAA,EAAY,KAAKlB,WAAjB,EAA8BK,IAA9B,CARzB;;cAAA;gBAQQc,QARR;gBASQC,OATR,GASkB,IAAAC,wBAAA,EAAkBf,MAAlB,EAA0Ba,QAAQ,CAACG,QAAnC,CATlB;gBAWMC,GAXN,GAWY,IAAIC,gBAAJ,GAAkBC,GAAlB,CACTC,2BAAA,CAAeC,YAAf,CACCvB,KADD,EAECQ,KAFD,EAGCP,IAHD,EAICW,qBAJD,EAKCF,iBALD,EAMCC,iBAND,EAOCE,sBAPD,EAQCV,UAAU,CAACI,SARZ,EASCS,OATD,CADS,CAXZ;gBAwBEG,GAAG,CAACK,QAAJ,GAAexB,KAAf;gBAxBF,iCA0BS;kBACNyB,WAAW,EAAEN,GADP;kBAENhB,UAAU,EAAEA;gBAFN,CA1BT;;cAAA;gBAAA;gBAAA;gBAAA;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,C;;;;;;;;;;;kGAmCA,kBAA0CH,KAA1C,EAA4DC,IAA5D,EAA6EC,MAA7E;QAAA;;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAEMC,UAFN,GAEmBC,YAAA,CAAQC,QAAR,EAFnB;gBAAA;gBAAA,OAG6B,IAAAC,uBAAA,EAAiBN,KAAjB,EAAwBG,UAAU,CAACI,SAAnC,CAH7B;;cAAA;gBAGQmB,YAHR;gBAAA;gBAAA,OAIkC,IAAAjB,iCAAA,EAA2BT,KAA3B,EAAkCC,IAAlC,CAJlC;;cAAA;gBAIQS,iBAJR;gBAAA;gBAAA,OAKkC,IAAAD,iCAAA,EAA2BiB,YAA3B,EAAyCzB,IAAzC,CALlC;;cAAA;gBAKQU,iBALR;gBAAA;gBAAA,OAMuC,IAAAF,iCAAA,EAA2BiB,YAA3B,EAAyCd,qBAAzC,CANvC;;cAAA;gBAMQC,sBANR;gBAQQG,OARR,GAQkB,IAAAC,wBAAA,EAAkBf,MAAlB,CARlB;gBAUMiB,GAVN,GAUY,IAAIC,gBAAJ,GAAkBC,GAAlB,CACTC,2BAAA,CAAeK,UAAf,CACC3B,KADD,EAEC0B,YAFD,EAGCzB,IAHD,EAICW,qBAJD,EAKCF,iBALD,EAMCG,sBAND,EAOCF,iBAPD,EAQCR,UAAU,CAACI,SARZ,EASCS,OATD,CADS,CAVZ;gBAuBEG,GAAG,CAACK,QAAJ,GAAexB,KAAf;gBAvBF,kCAyBS;kBACNyB,WAAW,EAAEN,GADP;kBAENhB,UAAU,EAAEA;gBAFN,CAzBT;;cAAA;gBAAA;gBAAA;gBAAA;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,C;;;;;;;;;;;kGAkCA,kBACCH,KADD,EAECC,IAFD,EAGCE,UAHD,EAICyB,IAJD,EAKCC,SALD,EAMCC,SAND,EAOCC,OAPD;QAAA;;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA;gBAAA,OAUsB,IAAAzB,uBAAA,EAAiBN,KAAjB,EAAwBG,UAAxB,CAVtB;;cAAA;gBAUQK,KAVR;gBAWQwB,UAXR,GAWqB,IAAIC,WAAJ,CAAOJ,SAAS,CAACK,OAAV,EAAP,CAXrB;gBAYQC,QAZR,GAYmB,IAAIF,WAAJ,CAAOF,OAAO,CAACG,OAAR,EAAP,CAZnB;gBAaME,UAbN,GAamB,IAAIH,WAAJ,CAAO,CAAP,CAbnB;;gBAAA,MAcML,IAAI,IAAIS,mBAAA,CAAQ,UAAR,CAdd;kBAAA;kBAAA;gBAAA;;gBAAA;gBAAA,OAe0B,IAAAvB,kBAAA,EAAY,KAAKlB,WAAjB,EAA8BK,IAA9B,CAf1B;;cAAA;gBAeSc,QAfT;gBAgBGqB,UAAU,GAAG,IAAAnB,wBAAA,EAAkBa,SAAlB,EAA6Bf,QAAQ,CAACG,QAAtC,CAAb;gBAhBH;gBAAA;;cAAA;gBAkBGkB,UAAU,GAAG,IAAAnB,wBAAA,EAAkBa,SAAlB,CAAb;;cAlBH;gBAoBQQ,gBApBR,GAoB2BF,UApB3B;gBAsBMjB,GAtBN,GAsBY,IAAIC,gBAAJ,GAAkBC,GAAlB,CACTC,2BAAA,CAAeiB,UAAf,CAA0BvC,KAA1B,EAAiCQ,KAAjC,EAAwCL,UAAxC,EAAoD6B,UAApD,EAAgEI,UAAhE,EAA4ED,QAA5E,EAAsFG,gBAAtF,CADS,CAtBZ;gBAAA,kCA0BSnB,GA1BT;;cAAA;gBAAA;gBAAA;gBAAA;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,C;;;;;;;;;;;qGAgCA,kBACCnB,KADD,EAECC,IAFD,EAGCE,UAHD,EAICD,MAJD;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA;gBAAA,OAO6B,IAAAI,uBAAA,EAAiBN,KAAjB,EAAwBG,UAAxB,CAP7B;;cAAA;gBAOQuB,YAPR;gBAAA;gBAAA,OAQkC,IAAAjB,iCAAA,EAA2BT,KAA3B,EAAkCC,IAAlC,CARlC;;cAAA;gBAQQS,iBARR;gBAAA;gBAAA,OASkC,IAAAD,iCAAA,EAA2BiB,YAA3B,EAAyCzB,IAAzC,CATlC;;cAAA;gBASQuC,iBATR;gBAAA;gBAAA,OAUyB,IAAA1B,kBAAA,EAAY,KAAKlB,WAAjB,EAA8BK,IAA9B,CAVzB;;cAAA;gBAUQc,QAVR;gBAWQ0B,cAXR,GAWyB,IAAAxB,wBAAA,EAAkBf,MAAlB,EAA0Ba,QAAQ,CAACG,QAAnC,CAXzB;gBAaMC,GAbN,GAaY,IAAIC,gBAAJ,GAAkBC,GAAlB,CACTC,2BAAA,CAAeoB,aAAf,CACC1C,KADD,EAEC0B,YAFD,EAGCzB,IAHD,EAICS,iBAJD,EAKC8B,iBALD,EAMCrC,UAND,EAOCsC,cAPD,CADS,CAbZ;gBAAA,kCAyBStB,GAzBT;;cAAA;gBAAA;gBAAA;gBAAA;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,C;;;;;;;;;;;mGA+BA,kBACCnB,KADD,EAECC,IAFD,EAGCE,UAHD,EAICD,MAJD;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA;gBAAA,OAO6B,IAAAI,uBAAA,EAAiBN,KAAjB,EAAwBG,UAAxB,CAP7B;;cAAA;gBAOQuB,YAPR;gBAAA;gBAAA,OAQkC,IAAAjB,iCAAA,EAA2BT,KAA3B,EAAkCC,IAAlC,CARlC;;cAAA;gBAQQS,iBARR;gBAAA;gBAAA,OASuC,IAAAD,iCAAA,EAA2BT,KAA3B,EAAkCY,qBAAlC,CATvC;;cAAA;gBASQ+B,sBATR;gBAAA;gBAAA,OAUkC,IAAAlC,iCAAA,EAA2BiB,YAA3B,EAAyCzB,IAAzC,CAVlC;;cAAA;gBAUQuC,iBAVR;gBAAA;gBAAA,OAWuC,IAAA/B,iCAAA,EAA2BiB,YAA3B,EAAyCd,qBAAzC,CAXvC;;cAAA;gBAWQC,sBAXR;gBAYQ4B,cAZR,GAYyB,IAAAxB,wBAAA,EAAkBf,MAAlB,CAZzB;gBAcMiB,GAdN,GAcY,IAAIC,gBAAJ,GAAkBC,GAAlB,CACTC,2BAAA,CAAesB,WAAf,CACC5C,KADD,EAEC0B,YAFD,EAGCzB,IAHD,EAICS,iBAJD,EAKC8B,iBALD,EAMCrC,UAND,EAOCS,qBAPD,EAQCC,sBARD,EASC8B,sBATD,EAUCF,cAVD,CADS,CAdZ;gBAAA,kCA6BStB,GA7BT;;cAAA;gBAAA;gBAAA;gBAAA;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,C;;;;;;;;;;;mGAmCA,kBAA2CnB,KAA3C,EAA6DC,IAA7D,EAA8EE,UAA9E;QAAA;;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA;gBAAA,OAEsB,IAAAG,uBAAA,EAAiBN,KAAjB,EAAwBG,UAAxB,CAFtB;;cAAA;gBAEQK,KAFR;gBAAA;gBAAA,OAGuC,IAAAC,iCAAA,EAA2BD,KAA3B,EAAkCI,qBAAlC,CAHvC;;cAAA;gBAGQiC,sBAHR;gBAAA;gBAAA,OAIkC,IAAApC,iCAAA,EAA2BD,KAA3B,EAAkCP,IAAlC,CAJlC;;cAAA;gBAIQU,iBAJR;gBAAA;gBAAA,OAK0B,IAAAmC,mCAAA,EAA6BlC,qBAA7B,EAA0CX,IAA1C,CAL1B;;cAAA;gBAKQ8C,SALR;gBAAA;gBAAA,OAMyB,IAAAC,oBAAA,EAAc,KAAKpD,WAAnB,EAAgC,IAAIqD,cAAJ,CAAcF,SAAd,CAAhC,CANzB;;cAAA;gBAMQG,QANR;gBAAA;gBAAA,OAOyBC,qBAAA,CAAUC,SAAV,CAAoB;kBAC1CvD,UAAU,EAAE,KAAKD,WADyB;kBAE1CsD,QAAQ,EAARA;gBAF0C,CAApB,CAPzB;;cAAA;gBAOQG,QAPR;gBAAA;gBAAA,OAWwBC,sBAAA,CAAWC,iBAAX,CAA6B,KAAK3D,WAAlC,EAA+CO,UAA/C,CAXxB;;cAAA;gBAWQqD,OAXR;;gBAAA,MAYMA,OAAO,CAAC1B,SAAR,CAAkB2B,QAAlB,OAAiC,GAZvC;kBAAA;kBAAA;gBAAA;;gBAAA,MAaS,IAAIC,KAAJ,CAAU,oBAAV,CAbT;;cAAA;gBAeEC,OAAO,CAACC,GAAR,CAAYJ,OAAO,CAAC1B,SAAR,CAAkB2B,QAAlB,EAAZ;gBACMI,QAhBR,GAgBmB,IAAIC,kBAAJ,CAAcN,OAAO,CAAC1B,SAAR,CAAkB2B,QAAlB,EAAd,EAA4CM,GAA5C,CAAgD,IAAID,kBAAJ,CAAcE,qBAAd,CAAhD,CAhBnB;gBAiBEL,OAAO,CAACC,GAAR,CAAYC,QAAQ,CAAC3B,OAAT,EAAZ;gBACAyB,OAAO,CAACC,GAAR,CAAYP,QAAQ,CAACY,YAArB;gBACMC,QAnBR,GAmBmB,IAAIC,uBAAJ,CAAgB,IAAIC,iBAAJ,CAAUlB,QAAQ,CAACmB,QAAnB,EAA6BhB,QAAQ,CAACY,YAAtC,CAAhB,EAAqEJ,QAAQ,CAAC3B,OAAT,EAArE,EAAyF,KAAzF,CAnBnB;gBAoBQoC,WApBR,GAoBsB,IAAIF,iBAAJ,CAAUlB,QAAQ,CAACqB,SAAnB,EAA8BlB,QAAQ,CAACmB,aAAvC,CApBtB;gBAqBQC,QArBR,GAqBmB,IAAIC,mBAAJ,CAAY,CAAZ,EAAe,GAAf,CArBnB;gBAAA,wBAsB2BvB,qBAAA,CAAUwB,gBAAV,CAA2B;kBACnDzB,QAAQ,EAARA,QADmD;kBAEnDG,QAAQ,EAARA,QAFmD;kBAGnDa,QAAQ,EAARA,QAHmD;kBAInDI,WAAW,EAAXA,WAJmD;kBAKnDG,QAAQ,EAARA;gBALmD,CAA3B,CAtB3B,EAsBUG,YAtBV,yBAsBUA,YAtBV;gBA8BEjB,OAAO,CAACC,GAAR,CAAYgB,YAAY,CAACC,GAAb,CAAiBC,OAAjB,EAAZ;gBAEI3D,GAhCN,GAgCY,IAAIC,gBAAJ,GAAkBC,GAAlB,CACTC,2BAAA,CAAeyD,WAAf,CACC7B,QAAQ,CAAC8B,SADV,EACqB;gBACpB9B,QAAQ,CAAC+B,EAFV,EAEc;gBACb/B,QAAQ,CAACgC,SAHV,EAGqB;gBACpBhC,QAAQ,CAACiC,UAJV,EAIsB;gBACrBjC,QAAQ,CAACkC,YALV,EAKwB;gBACvBlC,QAAQ,CAACmC,SANV,EAMqB;gBACpBnC,QAAQ,CAACoC,UAPV,EAOsB;gBACrBpC,QAAQ,CAACqC,eARV,EAQ2B;gBAC1BrC,QAAQ,CAACsC,QATV,EASoB;gBACnBtC,QAAQ,CAACuC,UAVV,EAUsB;gBACrBvC,QAAQ,CAACwC,UAXV,EAWsB;gBACrBxC,QAAQ,CAACyC,gBAZV,EAY4B;gBAC3BzC,QAAQ,CAAC0C,eAbV,EAa2B;gBAC1B1C,QAAQ,CAAC2C,gBAdV,EAc4B;gBAC3B3C,QAAQ,CAAC4C,eAfV,EAe2B;gBAC1BtF,KAhBD,EAiBCqC,sBAjBD,EAkBClC,iBAlBD,EAmBCV,IAnBD,EAoBCD,KApBD,EAqBCG,UArBD,EAsBCS,qBAtBD,EAuBCgE,YAAY,CAACC,GAvBd,CADS,CAhCZ;gBAAA,kCA4DS1D,GA5DT;;cAAA;gBAAA;gBAAA;gBAAA;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,C;;;;;;;;;;;iGAkEA,kBAAyCnB,KAAzC,EAA2DC,IAA3D,EAA4EE,UAA5E;QAAA;;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OACqB,IAAAG,uBAAA,EAAiBN,KAAjB,EAAwBG,UAAxB,CADrB;;cAAA;gBACOK,KADP;gBAAA;gBAAA,OAEiC,IAAAC,iCAAA,EAA2BD,KAA3B,EAAkCP,IAAlC,CAFjC;;cAAA;gBAEOU,iBAFP;gBAAA;gBAAA,OAGsC,IAAAF,iCAAA,EAA2BD,KAA3B,EAAkCI,qBAAlC,CAHtC;;cAAA;gBAGOiC,sBAHP;gBAAA;gBAAA,OAIyB,IAAAC,mCAAA,EAA6B7C,IAA7B,EAAmCW,qBAAnC,CAJzB;;cAAA;gBAIOmC,SAJP;gBAAA;gBAAA,OAKwB,IAAAC,oBAAA,EAAc,KAAKpD,WAAnB,EAAgC,IAAIqD,cAAJ,CAAcF,SAAd,CAAhC,CALxB;;cAAA;gBAKOG,QALP;gBAAA;gBAAA,OAMwBC,qBAAA,CAAUC,SAAV,CAAoB;kBAC1CvD,UAAU,EAAE,KAAKD,WADyB;kBAE1CsD,QAAQ,EAARA;gBAF0C,CAApB,CANxB;;cAAA;gBAMOG,QANP;gBAAA;gBAAA,OAUuBC,sBAAA,CAAWC,iBAAX,CAA6B,KAAK3D,WAAlC,EAA+CO,UAA/C,CAVvB;;cAAA;gBAUOqD,OAVP;;gBAAA,MAWKA,OAAO,CAAC1B,SAAR,CAAkB2B,QAAlB,OAAiC,GAXtC;kBAAA;kBAAA;gBAAA;;gBAAA,MAYQ,IAAIC,KAAJ,CAAU,oBAAV,CAZR;;cAAA;gBAAA;gBAAA,OAcwB,IAAA5C,kBAAA,EAAY,KAAKlB,WAAjB,EAA8BK,IAA9B,CAdxB;;cAAA;gBAcOc,QAdP;gBAeO8C,QAfP,GAekB,IAAIC,kBAAJ,CAAcN,OAAO,CAAC1B,SAAR,CAAkB2B,QAAlB,EAAd,EAA4CM,GAA5C,CAAgD,IAAID,kBAAJ,UAAc,EAAd,EAAoB/C,QAAQ,CAACG,QAA7B,EAAhD,CAflB;gBAgBOgD,QAhBP,GAgBkB,IAAIC,uBAAJ,CAAgB,IAAIC,iBAAJ,CAAUlB,QAAQ,CAACmB,QAAnB,EAA6BhB,QAAQ,CAACY,YAAtC,CAAhB,EAAqEJ,QAAQ,CAACJ,QAAT,EAArE,EAA0F,KAA1F,CAhBlB;gBAiBOa,WAjBP,GAiBqB,IAAIF,iBAAJ,CAAUlB,QAAQ,CAACqB,SAAnB,EAA8BlB,QAAQ,CAACmB,aAAvC,CAjBrB;gBAkBOC,QAlBP,GAkBkB,IAAIC,mBAAJ,CAAY,CAAZ,EAAe,GAAf,CAlBlB;gBAAA,yBAmB0BvB,qBAAA,CAAUwB,gBAAV,CAA2B;kBACnDzB,QAAQ,EAARA,QADmD;kBAEnDG,QAAQ,EAARA,QAFmD;kBAGnDa,QAAQ,EAARA,QAHmD;kBAInDI,WAAW,EAAXA,WAJmD;kBAKnDG,QAAQ,EAARA;gBALmD,CAA3B,CAnB1B,EAmBSG,YAnBT,0BAmBSA,YAnBT;gBA0BCjB,OAAO,CAACC,GAAR,CAAYgB,YAAY,CAACC,GAAb,CAAiBC,OAAjB,EAAZ;gBAEI3D,GA5BL,GA4BW,IAAIC,gBAAJ,GAAkBC,GAAlB,CACTC,2BAAA,CAAeyE,SAAf,CACC7C,QAAQ,CAAC8B,SADV,EAEC9B,QAAQ,CAAC+B,EAFV,EAEc;gBACb/B,QAAQ,CAACgC,SAHV,EAGqB;gBACpBhC,QAAQ,CAACiC,UAJV,EAIsB;gBACrBjC,QAAQ,CAACkC,YALV,EAKwB;gBACvBlC,QAAQ,CAACmC,SANV,EAMqB;gBACpBnC,QAAQ,CAACoC,UAPV,EAOsB;gBACrBpC,QAAQ,CAACqC,eARV,EAQ2B;gBAC1BrC,QAAQ,CAACsC,QATV,EASoB;gBACnBtC,QAAQ,CAACuC,UAVV,EAUsB;gBACrBvC,QAAQ,CAACwC,UAXV,EAWsB;gBACrBxC,QAAQ,CAACyC,gBAZV,EAY4B;gBAC3BzC,QAAQ,CAAC0C,eAbV,EAa2B;gBAC1B1C,QAAQ,CAAC2C,gBAdV,EAc4B;gBAC3B3C,QAAQ,CAAC4C,eAfV,EAe2B;gBAC1BtF,KAhBD,EAiBCqC,sBAjBD,EAkBClC,iBAlBD,EAmBCV,IAnBD,EAoBCD,KApBD,EAqBCG,UArBD,EAsBCS,qBAtBD,EAuBCgE,YAAY,CAACC,GAvBd,CADS,CA5BX;gBAAA,kCAwDQ1D,GAxDR;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,C;;;;;;;;;;;iGA2DA,kBACCnB,KADD,EAECC,IAFD,EAGCE,UAHD,EAICD,MAJD;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA;gBAAA,OAOsB,IAAAI,uBAAA,EAAiBN,KAAjB,EAAwBG,UAAxB,CAPtB;;cAAA;gBAOQK,KAPR;gBAAA;gBAAA,OAQkC,IAAAC,iCAAA,EAA2BT,KAA3B,EAAkCC,IAAlC,CARlC;;cAAA;gBAQQS,iBARR;gBAAA;gBAAA,OASkC,IAAAD,iCAAA,EAA2BD,KAA3B,EAAkCP,IAAlC,CATlC;;cAAA;gBASQU,iBATR;gBAAA;gBAAA,OAUyB,IAAAG,kBAAA,EAAY,KAAKlB,WAAjB,EAA8BK,IAA9B,CAVzB;;cAAA;gBAUQc,QAVR;gBAWQ0B,cAXR,GAWyB,IAAAxB,wBAAA,EAAkBf,MAAlB,EAA0Ba,QAAQ,CAACG,QAAnC,CAXzB;gBAaMC,GAbN,GAaY,IAAIC,gBAAJ,GAAkBC,GAAlB,CACTC,2BAAA,CAAe0E,SAAf,CAAyBhG,KAAzB,EAAgCQ,KAAhC,EAAuCP,IAAvC,EAA6CS,iBAA7C,EAAgEC,iBAAhE,EAAmFR,UAAnF,EAA+FsC,cAA/F,CADS,CAbZ;gBAAA,kCAiBStB,GAjBT;;cAAA;gBAAA;gBAAA;gBAAA;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,C;;;;;;;;;;;+FAuBA,kBAAuCnB,KAAvC,EAAyDC,IAAzD,EAA0EE,UAA1E,EAAiGD,MAAjG;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA;gBAAA,OAEsB,IAAAI,uBAAA,EAAiBN,KAAjB,EAAwBG,UAAxB,CAFtB;;cAAA;gBAEQK,KAFR;gBAAA;gBAAA,OAGkC,IAAAC,iCAAA,EAA2BT,KAA3B,EAAkCC,IAAlC,CAHlC;;cAAA;gBAGQS,iBAHR;gBAAA;gBAAA,OAIkC,IAAAD,iCAAA,EAA2BD,KAA3B,EAAkCP,IAAlC,CAJlC;;cAAA;gBAIQU,iBAJR;gBAAA;gBAAA,OAKuC,IAAAF,iCAAA,EAA2BD,KAA3B,EAAkCI,qBAAlC,CALvC;;cAAA;gBAKQiC,sBALR;gBAMQJ,cANR,GAMyB,IAAAxB,wBAAA,EAAkBf,MAAlB,CANzB;gBAQMiB,GARN,GAQY,IAAIC,gBAAJ,GAAkBC,GAAlB,CACTC,2BAAA,CAAe2E,OAAf,CACCjG,KADD,EAECQ,KAFD,EAGCP,IAHD,EAICW,qBAJD,EAKCF,iBALD,EAMCmC,sBAND,EAOClC,iBAPD,EAQCR,UARD,EASCsC,cATD,CADS,CARZ;gBAAA,kCAsBStB,GAtBT;;cAAA;gBAAA;gBAAA;gBAAA;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,C"}