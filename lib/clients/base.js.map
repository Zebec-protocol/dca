{"version":3,"file":"base.js","names":["DcaClient","params","_commitment","commitment","_connection","connection","_preflightCommitment","preflightCommitment","owner","mint","amount","dcaAccount","Keypair","generate","findVaultAddress","publicKey","vault","findAssociatedTokenAddress","ownerTokenAccount","vaultTokenAccount","NATIVE_MINT","vaultNativeMintAddress","getMintInfo","mintInfo","_amount","convertToLamports","decimals","txn","Transaction","add","DcaInstruction","depositToken","partialSign","feePayer","transaction","vaultAddress","depositSol","startTime","dcaAmount","dcaTime","_startTime","BN","toFixed","_dcaTime","_dcaAmount","minimumAmountOut","initialize","vaultTokenAddress","transferAmount","withdrawToken","ownerNativeMintAccount","withdrawSol","vaultNativeMintAccount","findPoolIdByBaseAndQuoteMint","poolKeyId","fetchPoolKeys","PublicKey","poolKeys","Liquidity","fetchInfo","poolInfo","DcaAccount","getDcaAccountInfo","dcaInfo","toString","Error","BigNumber","div","LAMPORTS_PER_SOL","amountIn","TokenAmount","Token","baseMint","baseDecimals","currencyOut","quoteMint","quoteDecimals","slippage","Percent","computeAmountOut","amountOut","minAmountOut","currentPrice","executionPrice","priceImpact","fee","swapFromSol","programId","id","authority","openOrders","targetOrders","baseVault","quoteVault","marketProgramId","marketId","marketBids","marketAsks","marketEventQueue","marketBaseVault","marketQuoteVault","marketAuthority","raw","swapToSol","fundToken","fundSol"],"sources":["../../src/clients/base.ts"],"sourcesContent":["import {\n    Commitment,\n    Connection,\n    Keypair,\n    LAMPORTS_PER_SOL,\n    PublicKey,\n    Transaction\n} from \"@solana/web3.js\";\nimport { NATIVE_MINT } from \"@solana/spl-token\";\nimport {\n    EventEmitter,\n    SignerWalletAdapterProps,\n    WalletAdapterEvents,\n    WalletAdapterProps,\n} from \"@solana/wallet-adapter-base\";\nimport BigNumber from \"bignumber.js\";\nimport { BN } from \"bn.js\";\nimport {\n    Liquidity,\n    Percent,\n    Token,\n    TokenAmount\n} from \"@raydium-io/raydium-sdk\";\nimport {\n    fetchPoolKeys,\n    findAssociatedTokenAddress,\n    findPoolIdByBaseAndQuoteMint,\n    findVaultAddress,\n    getMintInfo,\n    convertToLamports\n} from \"../utils\";\nimport { DcaInstruction } from \"../instruction\";\nimport { DcaAccount } from \"../models/dca-account\";\n\nexport interface IWalletAdapter extends WalletAdapterProps, EventEmitter<WalletAdapterEvents>, SignerWalletAdapterProps { }\n\nexport abstract class DcaClient {\n    protected _connection: Connection;\n    protected _commitment: Commitment;\n    protected _preflightCommitment: Commitment;\n\n    constructor(params: {\n        connection: Connection,\n        commitment: Commitment,\n        preflightCommitment: Commitment\n    }) {\n        this._commitment = params.commitment;\n        this._connection = params.connection;\n        this._preflightCommitment = params.preflightCommitment;\n    }\n\n    protected async makeDepositTokenTransaction(owner: PublicKey, mint: PublicKey, amount: BigNumber) {\n        try {\n            let dcaAccount = Keypair.generate();\n            const vault = await findVaultAddress(owner, dcaAccount.publicKey);\n            const ownerTokenAccount = await findAssociatedTokenAddress(owner, mint);\n            const vaultTokenAccount = await findAssociatedTokenAddress(vault, mint);\n            const vaultNativeMintAddress = await findAssociatedTokenAddress(vault, NATIVE_MINT);\n\n            const mintInfo = await getMintInfo(this._connection, mint);\n            const _amount = convertToLamports(amount, mintInfo.decimals);\n\n            let txn = new Transaction()\n                .add(DcaInstruction.depositToken(\n                    owner,\n                    vault,\n                    mint,\n                    NATIVE_MINT,\n                    ownerTokenAccount,\n                    vaultTokenAccount,\n                    vaultNativeMintAddress,\n                    dcaAccount.publicKey,\n                    _amount\n                ));\n            txn.partialSign(dcaAccount);\n            txn.feePayer = owner;\n\n            return {\n                transaction: txn,\n                dcaAccount: dcaAccount\n            };\n        } catch (e) {\n            throw e;\n        }\n    }\n\n    protected async makeDepositSolTransaction(owner: PublicKey, mint: PublicKey, amount: BigNumber) {\n        try {\n            let dcaAccount = Keypair.generate();\n            const vaultAddress = await findVaultAddress(owner, dcaAccount.publicKey);\n            const ownerTokenAccount = await findAssociatedTokenAddress(owner, mint);\n            const vaultTokenAccount = await findAssociatedTokenAddress(vaultAddress, mint);\n            const vaultNativeMintAddress = await findAssociatedTokenAddress(vaultAddress, NATIVE_MINT);\n\n            const _amount = convertToLamports(amount);\n\n            let txn = new Transaction()\n                .add(DcaInstruction.depositSol(\n                    owner,\n                    vaultAddress,\n                    mint,\n                    NATIVE_MINT,\n                    ownerTokenAccount,\n                    vaultNativeMintAddress,\n                    vaultTokenAccount,\n                    dcaAccount.publicKey,\n                    _amount\n                ));\n            txn.partialSign(dcaAccount);\n            txn.feePayer = owner;\n\n            return {\n                transaction: txn,\n                dcaAccount: dcaAccount\n            };\n        } catch (e) {\n            throw e;\n        }\n    }\n\n    protected async makeInitializeTransaction(owner: PublicKey, mint: PublicKey, dcaAccount: PublicKey, startTime: BigNumber, dcaAmount: BigNumber, dcaTime: BigNumber) {\n        try {\n            const vault = await findVaultAddress(owner, dcaAccount);\n            const _startTime = new BN(startTime.toFixed());\n            const _dcaTime = new BN(dcaTime.toFixed());\n            const mintInfo = await getMintInfo(this._connection, mint);\n            const _dcaAmount = convertToLamports(dcaAmount, mintInfo.decimals);\n            const minimumAmountOut = convertToLamports(dcaAmount, mintInfo.decimals);\n\n            let txn = new Transaction()\n                .add(DcaInstruction.initialize(\n                    owner,\n                    vault,\n                    dcaAccount,\n                    _startTime,\n                    _dcaAmount,\n                    _dcaTime,\n                    minimumAmountOut\n                ));\n\n            return txn;\n        } catch (e) {\n            throw e;\n        }\n    }\n\n    protected async makeWithdrawTokenTransaction(owner: PublicKey, mint: PublicKey, dcaAccount: PublicKey, amount: BigNumber) {\n        try {\n            const vaultAddress = await findVaultAddress(owner, dcaAccount);\n            const ownerTokenAccount = await findAssociatedTokenAddress(owner, mint);\n            const vaultTokenAddress = await findAssociatedTokenAddress(vaultAddress, mint);\n            const mintInfo = await getMintInfo(this._connection, mint);\n            const transferAmount = convertToLamports(amount, mintInfo.decimals);\n\n            let txn = new Transaction()\n                .add(DcaInstruction.withdrawToken(\n                    owner,\n                    vaultAddress,\n                    mint,\n                    ownerTokenAccount,\n                    vaultTokenAddress,\n                    dcaAccount,\n                    transferAmount\n                ));\n\n            return txn;\n        } catch (e) {\n            throw e;\n        }\n    }\n\n    protected async makeWithdrawSolTransaction(owner: PublicKey, mint: PublicKey, dcaAccount: PublicKey, amount: BigNumber) {\n        try {\n            const vaultAddress = await findVaultAddress(owner, dcaAccount);\n            const ownerTokenAccount = await findAssociatedTokenAddress(owner, mint);\n            const ownerNativeMintAccount = await findAssociatedTokenAddress(owner, NATIVE_MINT);\n            const vaultTokenAddress = await findAssociatedTokenAddress(vaultAddress, mint);\n            const vaultNativeMintAddress = await findAssociatedTokenAddress(vaultAddress, NATIVE_MINT);\n            const transferAmount = convertToLamports(amount);\n\n            let txn = new Transaction()\n                .add(DcaInstruction.withdrawSol(\n                    owner,\n                    vaultAddress,\n                    mint,\n                    ownerTokenAccount,\n                    vaultTokenAddress,\n                    dcaAccount,\n                    NATIVE_MINT,\n                    vaultNativeMintAddress,\n                    ownerNativeMintAccount,\n                    transferAmount\n                ));\n\n            return txn;\n        } catch (e) {\n            throw e;\n        }\n    }\n\n    protected async makeSwapFromSolTransaction(owner: PublicKey, mint: PublicKey, dcaAccount: PublicKey) {\n        try {\n            const vault = await findVaultAddress(owner, dcaAccount);\n            const vaultNativeMintAccount = await findAssociatedTokenAddress(vault, NATIVE_MINT)\n            const vaultTokenAccount = await findAssociatedTokenAddress(vault, mint)\n            const poolKeyId = await findPoolIdByBaseAndQuoteMint(NATIVE_MINT, mint);\n            const poolKeys = await fetchPoolKeys(\n                this._connection,\n                new PublicKey(poolKeyId)\n            );\n            const poolInfo = await Liquidity.fetchInfo({ connection: this._connection, poolKeys });\n            const dcaInfo = await DcaAccount.getDcaAccountInfo(this._connection, dcaAccount);\n            if (dcaInfo.dcaAmount.toString() === \"0\") {\n                throw new Error(\"Dca amout is zero\")\n            }\n            const amount = new BigNumber(dcaInfo.dcaAmount.toString())\n                .div(new BigNumber(LAMPORTS_PER_SOL));\n            const amountIn = new TokenAmount(\n                new Token(\n                    poolKeys.baseMint,\n                    poolInfo.baseDecimals\n                ),\n                amount.toFixed(),\n                false\n            )\n            const currencyOut = new Token(poolKeys.quoteMint, poolInfo.quoteDecimals);\n            const slippage = new Percent(5, 100);\n            const { amountOut, minAmountOut, currentPrice, executionPrice, priceImpact, fee }\n                = Liquidity.computeAmountOut({ poolKeys, poolInfo, amountIn, currencyOut, slippage, });\n\n            let txn = new Transaction()\n                .add(DcaInstruction.swapFromSol(\n                    poolKeys.programId,         // liquidityProgramId\n                    poolKeys.id,                // ammAddress\n                    poolKeys.authority,         // ammAuthorityAddress\n                    poolKeys.openOrders,        // ammOpenOrderAddress\n                    poolKeys.targetOrders,      // ammTargetOrderAddress\n                    poolKeys.baseVault,         // poolCoinTokenAddress\n                    poolKeys.quoteVault,        // poolPcTokenAddress\n                    poolKeys.marketProgramId,   // serumMarketProgramId\n                    poolKeys.marketId,          // serumMarketAddress\n                    poolKeys.marketBids,        // serumBidsAddress\n                    poolKeys.marketAsks,        // serumAskAddress\n                    poolKeys.marketEventQueue,  // serumEventQueueAddress\n                    poolKeys.marketBaseVault,   // serumCoinVaultAddress\n                    poolKeys.marketQuoteVault,  // serumVaultAddress\n                    poolKeys.marketAuthority,   // serumVaultSigner\n                    vault,\n                    vaultNativeMintAccount,\n                    vaultTokenAccount,\n                    mint,\n                    owner,\n                    dcaAccount,\n                    NATIVE_MINT,\n                    minAmountOut.raw\n                ));\n\n            return txn;\n        } catch (e) {\n            throw e;\n        }\n    }\n\n    protected async makeSwapToSolTransaction(owner: PublicKey, mint: PublicKey, dcaAccount: PublicKey) {\n        const vault = await findVaultAddress(owner, dcaAccount);\n        const vaultTokenAccount = await findAssociatedTokenAddress(vault, mint);\n        const vaultNativeMintAccount = await findAssociatedTokenAddress(vault, NATIVE_MINT);\n        const poolKeyId = await findPoolIdByBaseAndQuoteMint(mint, NATIVE_MINT);\n        const poolKeys = await fetchPoolKeys(\n            this._connection,\n            new PublicKey(poolKeyId)\n        );\n        const poolInfo = await Liquidity.fetchInfo({ connection: this._connection, poolKeys });\n        const dcaInfo = await DcaAccount.getDcaAccountInfo(this._connection, dcaAccount);\n        if (dcaInfo.dcaAmount.toString() === \"0\") {\n            throw new Error(\"Dca amount is zero\")\n        }\n        const mintInfo = await getMintInfo(this._connection, mint);\n        const amount = new BigNumber(dcaInfo.dcaAmount.toString())\n            .div(new BigNumber(10 ** mintInfo.decimals));\n        const amountIn = new TokenAmount(\n            new Token(\n                poolKeys.baseMint,\n                poolInfo.baseDecimals\n            ),\n            amount.toString(),\n            false\n        )\n        const currencyOut = new Token(poolKeys.quoteMint, poolInfo.quoteDecimals);\n        const slippage = new Percent(5, 100);\n        const { amountOut, minAmountOut, currentPrice, executionPrice, priceImpact, fee }\n            = Liquidity.computeAmountOut({ poolKeys, poolInfo, amountIn, currencyOut, slippage, });\n\n        let txn = new Transaction()\n            .add(DcaInstruction.swapToSol(\n                poolKeys.programId,\n                poolKeys.id,                // ammAddress\n                poolKeys.authority,         // ammAuthorityAddress\n                poolKeys.openOrders,        // ammOpenOrderAddress\n                poolKeys.targetOrders,      // ammTargetOrderAddress\n                poolKeys.baseVault,         // poolCoinTokenAddress\n                poolKeys.quoteVault,        // poolPcTokenAddress\n                poolKeys.marketProgramId,   // serumMarketProgramId\n                poolKeys.marketId,          // serumMarketAddress\n                poolKeys.marketBids,        // serumBidsAddress\n                poolKeys.marketAsks,        // serumAskAddress\n                poolKeys.marketEventQueue,  // serumEventQueueAddress\n                poolKeys.marketBaseVault,   // serumCoinVaultAddress\n                poolKeys.marketQuoteVault,  // serumVaultAddress\n                poolKeys.marketAuthority,   // serumVaultSigner\n                vault,\n                vaultNativeMintAccount,\n                vaultTokenAccount,\n                mint,\n                owner,\n                dcaAccount,\n                NATIVE_MINT,\n                minAmountOut.raw\n            ));\n\n        return txn;\n    }\n\n    protected async makeFundTokenTransaction(owner: PublicKey, mint: PublicKey, dcaAccount: PublicKey, amount: BigNumber) {\n        try {\n            const vault = await findVaultAddress(owner, dcaAccount);\n            const ownerTokenAccount = await findAssociatedTokenAddress(owner, mint);\n            const vaultTokenAccount = await findAssociatedTokenAddress(vault, mint);\n            const mintInfo = await getMintInfo(this._connection, mint);\n            const transferAmount = convertToLamports(amount, mintInfo.decimals);\n\n            let txn = new Transaction()\n                .add(DcaInstruction.fundToken(\n                    owner,\n                    vault,\n                    mint,\n                    ownerTokenAccount,\n                    vaultTokenAccount,\n                    dcaAccount,\n                    transferAmount\n                ));\n\n            return txn;\n        } catch (e) {\n            throw e;\n        }\n    }\n\n    protected async makeFundSolTransaction(owner: PublicKey, mint: PublicKey, dcaAccount: PublicKey, amount: BigNumber) {\n        try {\n            const vault = await findVaultAddress(owner, dcaAccount);\n            const ownerTokenAccount = await findAssociatedTokenAddress(owner, mint);\n            const vaultTokenAccount = await findAssociatedTokenAddress(vault, mint);\n            const vaultNativeMintAccount = await findAssociatedTokenAddress(vault, NATIVE_MINT);\n            const transferAmount = convertToLamports(amount);\n\n            let txn = new Transaction()\n                .add(DcaInstruction.fundSol(\n                    owner,\n                    vault,\n                    mint,\n                    NATIVE_MINT,\n                    ownerTokenAccount,\n                    vaultNativeMintAccount,\n                    vaultTokenAccount,\n                    dcaAccount,\n                    transferAmount\n                ));\n\n            return txn;\n        } catch (e) {\n            throw e;\n        }\n    }\n}\n"],"mappings":"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"}