{"version":3,"file":"base.js","names":["DcaClient","params","_commitment","commitment","_connection","connection","_preflightCommitment","preflightCommitment","source","tokenMint","amount","findVaultAddress","vault","findAssociatedTokenAddress","sourceTokenAccount","vaultTokenAccount","txn","Transaction","add","DcaInstruction","depositToken","transaction","tokenMintFrom","tokenMintTo","startTime","dcaAmount","frequency","dcaAccount","Keypair","generate","vaultTokenAccountFrom","vaultTokenAccountTo","initialize","publicKey","withdrawToken","CONNECTION","findPoolIdByBaseAndQuoteMintDevnet","poolKeyId","fetchPoolKeysDevnet","PublicKey","poolKeys","findPoolIdByBaseAndQuoteMint","fetchPoolKeys","Liquidity","fetchInfo","poolInfo","DcaAccount","getDcaAccountInfo","dcaInfo","toString","Error","amountIn","TokenAmount","Token","baseMint","baseDecimals","currencyOut","quoteMint","quoteDecimals","slippage","Percent","computeAmountOut","minAmountOut","swap","programId","id","authority","openOrders","targetOrders","baseVault","quoteVault","marketProgramId","marketId","marketBids","marketAsks","marketEventQueue","marketBaseVault","marketQuoteVault","marketAuthority","raw"],"sources":["../../src/clients/base.ts"],"sourcesContent":["import BN from \"bn.js\";\n\nimport { Liquidity, LiquidityPoolKeysV4, Percent, Token, TokenAmount } from \"@raydium-io/raydium-sdk\";\nimport { Commitment, Connection, Keypair, PublicKey, Transaction } from \"@solana/web3.js\";\n\nimport { CONNECTION } from \"../constants\";\nimport { DcaInstruction } from \"../instruction\";\nimport { Amount, DcaAccount, MintAmount } from \"../models\";\nimport {\n\tfetchPoolKeys,\n\tfetchPoolKeysDevnet,\n\tfindAssociatedTokenAddress,\n\tfindPoolIdByBaseAndQuoteMint,\n\tfindPoolIdByBaseAndQuoteMintDevnet,\n\tfindVaultAddress,\n} from \"../utils\";\n\nexport interface IWalletAdapter {\n\tpublicKey: PublicKey;\n\tsignTransaction(transaction: Transaction): Promise<Transaction>;\n\tsignAllTransactions(transactions: Transaction[]): Promise<Transaction[]>;\n}\n\nexport abstract class DcaClient {\n\tprotected _connection: Connection;\n\tprotected _commitment: Commitment;\n\tprotected _preflightCommitment: Commitment;\n\n\tconstructor(params: { connection: Connection; commitment: Commitment; preflightCommitment: Commitment }) {\n\t\tthis._commitment = params.commitment;\n\t\tthis._connection = params.connection;\n\t\tthis._preflightCommitment = params.preflightCommitment;\n\t}\n\n\tprotected async makeDepositTokenTransaction(source: PublicKey, tokenMint: PublicKey, amount: Amount | MintAmount) {\n\t\ttry {\n\t\t\tconst vault = await findVaultAddress(source);\n\t\t\tconst sourceTokenAccount = await findAssociatedTokenAddress(source, tokenMint);\n\t\t\tconst vaultTokenAccount = await findAssociatedTokenAddress(vault, tokenMint);\n\n\t\t\tlet txn = new Transaction().add(\n\t\t\t\tDcaInstruction.depositToken(source, vault, tokenMint, sourceTokenAccount, vaultTokenAccount, amount),\n\t\t\t);\n\n\t\t\treturn {\n\t\t\t\ttransaction: txn,\n\t\t\t};\n\t\t} catch (e) {\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\tprotected async makeInitializeTransaction(\n\t\tsource: PublicKey,\n\t\ttokenMintFrom: PublicKey,\n\t\ttokenMintTo: PublicKey,\n\t\tstartTime: BN,\n\t\tdcaAmount: Amount | MintAmount,\n\t\tfrequency: BN,\n\t) {\n\t\ttry {\n\t\t\tconst dcaAccount = Keypair.generate();\n\t\t\tconst vault = await findVaultAddress(source);\n\t\t\tconst vaultTokenAccountFrom = await findAssociatedTokenAddress(vault, tokenMintFrom);\n\t\t\tconst vaultTokenAccountTo = await findAssociatedTokenAddress(vault, tokenMintTo);\n\t\t\tlet txn = new Transaction().add(\n\t\t\t\tDcaInstruction.initialize(\n\t\t\t\t\tsource,\n\t\t\t\t\tvault,\n\t\t\t\t\ttokenMintFrom,\n\t\t\t\t\ttokenMintTo,\n\t\t\t\t\tvaultTokenAccountFrom,\n\t\t\t\t\tvaultTokenAccountTo,\n\t\t\t\t\tdcaAccount.publicKey,\n\t\t\t\t\tstartTime,\n\t\t\t\t\tdcaAmount,\n\t\t\t\t\tfrequency,\n\t\t\t\t),\n\t\t\t);\n\n\t\t\treturn {\n\t\t\t\ttransaction: txn,\n\t\t\t\tdcaAccount: dcaAccount,\n\t\t\t};\n\t\t} catch (e) {\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\tprotected async makeWithdrawTokenTransaction(source: PublicKey, tokenMint: PublicKey, amount: Amount | MintAmount) {\n\t\ttry {\n\t\t\tconst vault = await findVaultAddress(source);\n\t\t\tconst sourceTokenAccount = await findAssociatedTokenAddress(source, tokenMint);\n\t\t\tconst vaultTokenAccount = await findAssociatedTokenAddress(vault, tokenMint);\n\n\t\t\tlet txn = new Transaction().add(\n\t\t\t\tDcaInstruction.withdrawToken(source, vault, tokenMint, sourceTokenAccount, vaultTokenAccount, amount),\n\t\t\t);\n\n\t\t\treturn {\n\t\t\t\ttransaction: txn,\n\t\t\t};\n\t\t} catch (e) {\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\tprotected async makeSwapTransaction(\n\t\tsource: PublicKey,\n\t\ttokenMintFrom: PublicKey,\n\t\ttokenMintTo: PublicKey,\n\t\tdcaAccount: PublicKey,\n\t) {\n\t\ttry {\n\t\t\tconst vault = await findVaultAddress(source);\n\t\t\tconst vaultTokenAccountFrom = await findAssociatedTokenAddress(vault, tokenMintFrom);\n\t\t\tconst vaultTokenAccountTo = await findAssociatedTokenAddress(vault, tokenMintTo);\n\n\t\t\tlet poolKeys: LiquidityPoolKeysV4;\n\t\t\tif (this._connection == CONNECTION[\"devnet\"]) {\n\t\t\t\tconst poolKeyId = await findPoolIdByBaseAndQuoteMintDevnet(tokenMintFrom, tokenMintTo);\n\t\t\t\tpoolKeys = await fetchPoolKeysDevnet(this._connection, new PublicKey(poolKeyId));\n\t\t\t} else {\n\t\t\t\tconst poolKeyId = await findPoolIdByBaseAndQuoteMint(tokenMintFrom, tokenMintTo);\n\t\t\t\tpoolKeys = await fetchPoolKeys(this._connection, new PublicKey(poolKeyId));\n\t\t\t}\n\t\t\tconst poolInfo = await Liquidity.fetchInfo({\n\t\t\t\tconnection: this._connection,\n\t\t\t\tpoolKeys,\n\t\t\t});\n\t\t\tconst dcaInfo = await DcaAccount.getDcaAccountInfo(this._connection, dcaAccount);\n\t\t\tif (dcaInfo.dcaAmount.toString() === \"0\") {\n\t\t\t\tthrow new Error(\"Dca amount is zero\");\n\t\t\t}\n\t\t\t// const uiAmount = new BigNumber(dcaInfo.dcaAmount.toString()).div(new BigNumber(LAMPORTS_PER_SOL));\n\t\t\tconst amountIn = new TokenAmount(new Token(poolKeys.baseMint, poolInfo.baseDecimals), dcaInfo.dcaAmount, true);\n\t\t\tconst currencyOut = new Token(poolKeys.quoteMint, poolInfo.quoteDecimals);\n\t\t\tconst slippage = new Percent(1, 100);\n\t\t\tconst { minAmountOut } = Liquidity.computeAmountOut({\n\t\t\t\tpoolKeys,\n\t\t\t\tpoolInfo,\n\t\t\t\tamountIn,\n\t\t\t\tcurrencyOut,\n\t\t\t\tslippage,\n\t\t\t});\n\n\t\t\tlet txn = new Transaction().add(\n\t\t\t\tDcaInstruction.swap(\n\t\t\t\t\tpoolKeys.programId, // liquidityProgramId\n\t\t\t\t\tpoolKeys.id, // ammAddress\n\t\t\t\t\tpoolKeys.authority, // ammAuthorityAddress\n\t\t\t\t\tpoolKeys.openOrders, // ammOpenOrderAddress\n\t\t\t\t\tpoolKeys.targetOrders, // ammTargetOrderAddress\n\t\t\t\t\tpoolKeys.baseVault, // poolCoinTokenAddress\n\t\t\t\t\tpoolKeys.quoteVault, // poolPcTokenAddress\n\t\t\t\t\tpoolKeys.marketProgramId, // serumMarketProgramId\n\t\t\t\t\tpoolKeys.marketId, // serumMarketAddress\n\t\t\t\t\tpoolKeys.marketBids, // serumBidsAddress\n\t\t\t\t\tpoolKeys.marketAsks, // serumAskAddress\n\t\t\t\t\tpoolKeys.marketEventQueue, // serumEventQueueAddress\n\t\t\t\t\tpoolKeys.marketBaseVault, // serumCoinVaultAddress\n\t\t\t\t\tpoolKeys.marketQuoteVault, // serumVaultAddress\n\t\t\t\t\tpoolKeys.marketAuthority, // serumVaultSigner\n\t\t\t\t\tvault,\n\t\t\t\t\tvaultTokenAccountFrom,\n\t\t\t\t\tvaultTokenAccountTo,\n\t\t\t\t\ttokenMintFrom,\n\t\t\t\t\ttokenMintTo,\n\t\t\t\t\tsource,\n\t\t\t\t\tdcaAccount,\n\t\t\t\t\tminAmountOut.raw,\n\t\t\t\t),\n\t\t\t);\n\n\t\t\treturn {\n\t\t\t\ttransaction: txn,\n\t\t\t};\n\t\t} catch (e) {\n\t\t\tthrow e;\n\t\t}\n\t}\n}\n"],"mappings":"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"}