{"version":3,"file":"dca-account.js","names":["DcaAccount","param","_totalAmount","totalAmount","_authority","PublicKey","authority","_mintAddress","mintAddress","_startTime","startTime","_dcaAmount","dcaAmount","_dcaTime","dcaTime","_flag","flag","_state","state","_minimumAmountOut","minimumAmountOut","data","deserializeUnchecked","dcaAccountSchema","connection","address","commitment","programId","DCA_PROGRAM_ID","getAccountInfo","info","Error","owner","equals","dcaAcount","decodeUnchecked","Map","kind","fields"],"sources":["../../src/models/dca-account.ts"],"sourcesContent":["import { Commitment, Connection, PublicKey } from \"@solana/web3.js\";\nimport BN from \"bn.js\";\nimport { deserializeUnchecked } from \"borsh\";\nimport { DCA_PROGRAM_ID } from \"../constants\";\n\n\n/**\n * The class for the dca account state in DCA program\n */\nexport class DcaAccount {\n    private _totalAmount: BN;\n    private _authority: PublicKey;\n    private _mintAddress: PublicKey;\n    private _startTime: BN;\n    private _dcaAmount: BN;\n    private _dcaTime: BN;\n    private _flag: number;\n    private _state: boolean;\n    private _minimumAmountOut: BN;\n\n    constructor(param: {\n        totalAmount: BN,\n        authority: Uint8Array,\n        mintAddress: Uint8Array,\n        startTime: BN,\n        dcaAmount: BN,\n        dcaTime: BN,\n        flag: number,\n        state: number,\n        minimumAmountOut: BN\n    }) {\n        this._totalAmount = param.totalAmount;\n        this._authority = new PublicKey(param.authority);\n        this._mintAddress = new PublicKey(param.mintAddress);\n        this._startTime = param.startTime;\n        this._dcaAmount = param.dcaAmount;\n        this._dcaTime = param.dcaTime;\n        this._flag = param.flag;\n        this._state = param.state === 1;\n        this._minimumAmountOut = param.minimumAmountOut;\n    }\n\n    /**\n     * The total amount of currency or token which will be used for dca process.\n     */\n    public get totalAmount(): BN {\n        return this._totalAmount;\n    }\n\n    /**\n     * The address of authority who deposit and initiates the dca process.\n     */\n    public get authority(): PublicKey {\n        return this._authority;\n    }\n\n    /**\n     * The token mint address which is used to swap from or to sol (native mint).\n     */\n    public get mintAddress(): PublicKey {\n        return this._mintAddress;\n    }\n\n    /**\n     * The unix timestamp from which the last swap is performed.\n     */\n    public get startTime(): BN {\n        return this._startTime;\n    }\n\n    /**\n     * The amount of currency or token to be used for the swap from the total amount at a time.\n     */\n    public get dcaAmount(): BN {\n        return this._dcaAmount;\n    }\n\n    /**\n     * The time interval or span between to consecutive swap process. The value should be in seconds. \n     */\n    public get dcaTime(): BN {\n        return this._dcaTime;\n    }\n\n    /**\n     * The state signifies whether the dca process has been initialized or not.\n     */\n    public get state(): boolean {\n        return this._state;\n    }\n\n    /**\n     * The flag tells whether to swap from sol to mint or mint to sol.\n     */\n    public get flag(): number {\n        return this._flag;\n    }\n\n    /**\n     * The minimum amount out expected from the swap.\n     */\n    public get minimumAmountOut(): BN {\n        return this._minimumAmountOut;\n    }\n\n    /**\n     * Decode buffer data to DcaAccount Object\n     */\n    static decodeUnchecked(data: Buffer) {\n        return deserializeUnchecked(dcaAccountSchema, this, data);\n    }\n\n    /**\n     * Get Dca account info of given address\n     */\n    static async getDcaAccountInfo(connection: Connection, address: PublicKey, commitment?: Commitment, programId = DCA_PROGRAM_ID) {\n        const info = await connection.getAccountInfo(address, commitment);\n        if (!info) throw new Error(\"Dca Account not found.\");\n        if (!info.owner.equals(programId)) throw new Error(\"Account is not owned by Dca Program.\");\n        const dcaAcount = this.decodeUnchecked(info.data);\n        return dcaAcount;\n    }\n\n}\n\nconst dcaAccountSchema = new Map([\n    [\n        DcaAccount,\n        {\n            kind: \"struct\",\n            fields: [\n                [\"totalAmount\", \"u64\"],\n                [\"authority\", [32]],\n                [\"mintAddress\", [32]],\n                [\"startTime\", \"u64\"],\n                [\"dcaAmount\", \"u64\"],\n                [\"dcaTime\", \"u64\"],\n                [\"flag\", \"u8\"],\n                [\"state\", \"u8\"],\n                [\"minimumAmountOut\", \"u64\"],\n            ]\n        }\n    ]\n]);"],"mappings":"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"}