{"version":3,"file":"dca-account.js","names":["DcaAccount","param","_authority","PublicKey","authority","_mintAddressFrom","mintAddressFrom","_mintAddressTo","mintAddressTo","_startTime","startTime","_dcaAmount","Amount","dcaAmount","_frequency","frequency","_state","state","data","deserializeUnchecked","dcaAccountSchema","connection","address","commitment","programId","DCA_PROGRAM_ID","getAccountInfo","info","Error","owner","equals","dcaAcount","decodeUnchecked","Map","kind","fields"],"sources":["../../src/models/dca-account.ts"],"sourcesContent":["import BN from \"bn.js\";\nimport { deserializeUnchecked } from \"borsh\";\n\nimport { Commitment, Connection, PublicKey } from \"@solana/web3.js\";\n\nimport { DCA_PROGRAM_ID } from \"../constants\";\nimport { Amount } from \"./amount\";\n\n/**\n * The class for the dca account state in DCA program\n */\nexport class DcaAccount {\n\tprivate _authority: PublicKey;\n\tprivate _mintAddressFrom: PublicKey;\n\tprivate _mintAddressTo: PublicKey;\n\tprivate _startTime: BN;\n\tprivate _dcaAmount: Amount;\n\tprivate _frequency: BN;\n\tprivate _state: boolean;\n\n\tconstructor(param: {\n\t\tauthority: Uint8Array;\n\t\tmintAddressFrom: Uint8Array;\n\t\tmintAddressTo: Uint8Array;\n\t\tstartTime: BN;\n\t\tdcaAmount: BN;\n\t\tfrequency: BN;\n\t\tstate: number;\n\t}) {\n\t\tthis._authority = new PublicKey(param.authority);\n\t\tthis._mintAddressFrom = new PublicKey(param.mintAddressFrom);\n\t\tthis._mintAddressTo = new PublicKey(param.mintAddressTo);\n\t\tthis._startTime = param.startTime;\n\t\tthis._dcaAmount = new Amount(param.dcaAmount);\n\t\tthis._frequency = param.frequency;\n\t\tthis._state = param.state === 1;\n\t}\n\n\t/**\n\t * The address of authority who deposit and initiates the dca process.\n\t */\n\tpublic get authority(): PublicKey {\n\t\treturn this._authority;\n\t}\n\n\t/**\n\t * The token mint address which is used to swap from or to sol (native mint).\n\t */\n\tpublic get mintAddressFrom(): PublicKey {\n\t\treturn this._mintAddressFrom;\n\t}\n\n\t/**\n\t * The token mint address which is used to swap from or to sol (native mint).\n\t */\n\tpublic get mintAddressTo(): PublicKey {\n\t\treturn this._mintAddressTo;\n\t}\n\n\t/**\n\t * The unix timestamp from which the last swap is performed.\n\t */\n\tpublic get startTime(): BN {\n\t\treturn this._startTime;\n\t}\n\n\t/**\n\t * The amount of currency or token to be used for the swap from the total amount at a time.\n\t */\n\tpublic get dcaAmount(): Amount {\n\t\treturn this._dcaAmount;\n\t}\n\n\t/**\n\t * The time interval or span between to consecutive swap process. The value should be in seconds.\n\t */\n\tpublic get frequency(): BN {\n\t\treturn this._frequency;\n\t}\n\n\t/**\n\t * The state signifies whether the dca process has been initialized or not.\n\t */\n\tpublic get state(): boolean {\n\t\treturn this._state;\n\t}\n\n\t/**\n\t * Decode buffer data to DcaAccount Object\n\t */\n\tstatic decodeUnchecked(data: Buffer) {\n\t\treturn deserializeUnchecked(dcaAccountSchema, this, data);\n\t}\n\n\t/**\n\t * Get Dca account info of given address\n\t */\n\tstatic async getDcaAccountInfo(\n\t\tconnection: Connection,\n\t\taddress: PublicKey,\n\t\tcommitment?: Commitment,\n\t\tprogramId = DCA_PROGRAM_ID,\n\t) {\n\t\tconst info = await connection.getAccountInfo(address, commitment);\n\t\tif (!info) throw new Error(\"Dca Account not found.\");\n\t\tif (!info.owner.equals(programId)) throw new Error(\"Account is not owned by Dca Program.\");\n\t\tconst dcaAcount = this.decodeUnchecked(info.data);\n\t\treturn dcaAcount;\n\t}\n}\n\nconst dcaAccountSchema = new Map([\n\t[\n\t\tDcaAccount,\n\t\t{\n\t\t\tkind: \"struct\",\n\t\t\tfields: [\n\t\t\t\t[\"authority\", [32]],\n\t\t\t\t[\"mintAddressFrom\", [32]],\n\t\t\t\t[\"mintAddressTo\", [32]],\n\t\t\t\t[\"startTime\", \"u64\"],\n\t\t\t\t[\"dcaAmount\", \"u64\"],\n\t\t\t\t[\"frequency\", \"u64\"],\n\t\t\t\t[\"state\", \"u8\"],\n\t\t\t],\n\t\t},\n\t],\n]);\n"],"mappings":";;;;;;;;;AACA;;AAEA;;AAEA;;AACA;;+CALA,oJ;;;;;;;;;;;;;;AAOA;AACA;AACA;IACaA,U;EASZ,oBAAYC,KAAZ,EAQG;IAAA;;IAAA;;IAAA;;IAAA;;IAAA;;IAAA;;IAAA;;IAAA;;IACF,KAAKC,UAAL,GAAkB,IAAIC,cAAJ,CAAcF,KAAK,CAACG,SAApB,CAAlB;IACA,KAAKC,gBAAL,GAAwB,IAAIF,cAAJ,CAAcF,KAAK,CAACK,eAApB,CAAxB;IACA,KAAKC,cAAL,GAAsB,IAAIJ,cAAJ,CAAcF,KAAK,CAACO,aAApB,CAAtB;IACA,KAAKC,UAAL,GAAkBR,KAAK,CAACS,SAAxB;IACA,KAAKC,UAAL,GAAkB,IAAIC,cAAJ,CAAWX,KAAK,CAACY,SAAjB,CAAlB;IACA,KAAKC,UAAL,GAAkBb,KAAK,CAACc,SAAxB;IACA,KAAKC,MAAL,GAAcf,KAAK,CAACgB,KAAN,KAAgB,CAA9B;EACA;EAED;AACD;AACA;;;;;SACC,eAAkC;MACjC,OAAO,KAAKf,UAAZ;IACA;IAED;AACD;AACA;;;;SACC,eAAwC;MACvC,OAAO,KAAKG,gBAAZ;IACA;IAED;AACD;AACA;;;;SACC,eAAsC;MACrC,OAAO,KAAKE,cAAZ;IACA;IAED;AACD;AACA;;;;SACC,eAA2B;MAC1B,OAAO,KAAKE,UAAZ;IACA;IAED;AACD;AACA;;;;SACC,eAA+B;MAC9B,OAAO,KAAKE,UAAZ;IACA;IAED;AACD;AACA;;;;SACC,eAA2B;MAC1B,OAAO,KAAKG,UAAZ;IACA;IAED;AACD;AACA;;;;SACC,eAA4B;MAC3B,OAAO,KAAKE,MAAZ;IACA;IAED;AACD;AACA;;;;WACC,yBAAuBE,IAAvB,EAAqC;MACpC,OAAO,IAAAC,2BAAA,EAAqBC,gBAArB,EAAuC,IAAvC,EAA6CF,IAA7C,CAAP;IACA;IAED;AACD;AACA;;;;;0FACC,iBACCG,UADD,EAECC,OAFD,EAGCC,UAHD;QAAA;QAAA;QAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBAICC,SAJD,2DAIaC,yBAJb;gBAAA;gBAAA,OAMoBJ,UAAU,CAACK,cAAX,CAA0BJ,OAA1B,EAAmCC,UAAnC,CANpB;;cAAA;gBAMOI,IANP;;gBAAA,IAOMA,IAPN;kBAAA;kBAAA;gBAAA;;gBAAA,MAOkB,IAAIC,KAAJ,CAAU,wBAAV,CAPlB;;cAAA;gBAAA,IAQMD,IAAI,CAACE,KAAL,CAAWC,MAAX,CAAkBN,SAAlB,CARN;kBAAA;kBAAA;gBAAA;;gBAAA,MAQ0C,IAAII,KAAJ,CAAU,sCAAV,CAR1C;;cAAA;gBASOG,SATP,GASmB,KAAKC,eAAL,CAAqBL,IAAI,CAACT,IAA1B,CATnB;gBAAA,iCAUQa,SAVR;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,C;;;;;;;;;;;;;;AAcD,IAAMX,gBAAgB,GAAG,IAAIa,GAAJ,CAAQ,CAChC,CACCjC,UADD,EAEC;EACCkC,IAAI,EAAE,QADP;EAECC,MAAM,EAAE,CACP,CAAC,WAAD,EAAc,CAAC,EAAD,CAAd,CADO,EAEP,CAAC,iBAAD,EAAoB,CAAC,EAAD,CAApB,CAFO,EAGP,CAAC,eAAD,EAAkB,CAAC,EAAD,CAAlB,CAHO,EAIP,CAAC,WAAD,EAAc,KAAd,CAJO,EAKP,CAAC,WAAD,EAAc,KAAd,CALO,EAMP,CAAC,WAAD,EAAc,KAAd,CANO,EAOP,CAAC,OAAD,EAAU,IAAV,CAPO;AAFT,CAFD,CADgC,CAAR,CAAzB"}